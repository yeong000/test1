
CAN_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003144  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08003250  08003250  00013250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800333c  0800333c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800333c  0800333c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800333c  0800333c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800333c  0800333c  0001333c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003340  08003340  00013340  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003344  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  20000070  080033b4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  080033b4  00020134  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000072f7  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017f4  00000000  00000000  00027390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000818  00000000  00000000  00028b88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000780  00000000  00000000  000293a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017adf  00000000  00000000  00029b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000080e7  00000000  00000000  000415ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085d64  00000000  00000000  000496e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cf44a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000282c  00000000  00000000  000cf49c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003238 	.word	0x08003238

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003238 	.word	0x08003238

0800014c <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len){
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	60f8      	str	r0, [r7, #12]
 8000154:	60b9      	str	r1, [r7, #8]
 8000156:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (char*)ptr, (uint16_t) len, 100);
 8000158:	687b      	ldr	r3, [r7, #4]
 800015a:	b29a      	uxth	r2, r3
 800015c:	2364      	movs	r3, #100	; 0x64
 800015e:	68b9      	ldr	r1, [r7, #8]
 8000160:	4803      	ldr	r0, [pc, #12]	; (8000170 <_write+0x24>)
 8000162:	f001 fec2 	bl	8001eea <HAL_UART_Transmit>
	return(len);
 8000166:	687b      	ldr	r3, [r7, #4]
}
 8000168:	4618      	mov	r0, r3
 800016a:	3710      	adds	r7, #16
 800016c:	46bd      	mov	sp, r7
 800016e:	bd80      	pop	{r7, pc}
 8000170:	200000b4 	.word	0x200000b4

08000174 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000174:	b580      	push	{r7, lr}
 8000176:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000178:	f000 faf2 	bl	8000760 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800017c:	f000 f862 	bl	8000244 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000180:	f000 f902 	bl	8000388 <MX_GPIO_Init>
  MX_CAN_Init();
 8000184:	f000 f8a0 	bl	80002c8 <MX_CAN_Init>
  MX_USART2_UART_Init();
 8000188:	f000 f8d4 	bl	8000334 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  if(HAL_CAN_Start(&hcan)!=HAL_OK){
 800018c:	4826      	ldr	r0, [pc, #152]	; (8000228 <main+0xb4>)
 800018e:	f000 fc68 	bl	8000a62 <HAL_CAN_Start>
 8000192:	4603      	mov	r3, r0
 8000194:	2b00      	cmp	r3, #0
 8000196:	d001      	beq.n	800019c <main+0x28>
	  Error_Handler();
 8000198:	f000 f918 	bl	80003cc <Error_Handler>
  }
  printf("Can Start\r\n");
 800019c:	4823      	ldr	r0, [pc, #140]	; (800022c <main+0xb8>)
 800019e:	f002 f8c7 	bl	8002330 <puts>

  txheader.StdId=0x0f;
 80001a2:	4b23      	ldr	r3, [pc, #140]	; (8000230 <main+0xbc>)
 80001a4:	220f      	movs	r2, #15
 80001a6:	601a      	str	r2, [r3, #0]
  txheader.ExtId=0x00;
 80001a8:	4b21      	ldr	r3, [pc, #132]	; (8000230 <main+0xbc>)
 80001aa:	2200      	movs	r2, #0
 80001ac:	605a      	str	r2, [r3, #4]
  txheader.RTR=CAN_RTR_DATA;
 80001ae:	4b20      	ldr	r3, [pc, #128]	; (8000230 <main+0xbc>)
 80001b0:	2200      	movs	r2, #0
 80001b2:	60da      	str	r2, [r3, #12]
  txheader.IDE=CAN_ID_STD;
 80001b4:	4b1e      	ldr	r3, [pc, #120]	; (8000230 <main+0xbc>)
 80001b6:	2200      	movs	r2, #0
 80001b8:	609a      	str	r2, [r3, #8]
  txheader.DLC=8;
 80001ba:	4b1d      	ldr	r3, [pc, #116]	; (8000230 <main+0xbc>)
 80001bc:	2208      	movs	r2, #8
 80001be:	611a      	str	r2, [r3, #16]
  txheader.TransmitGlobalTime=DISABLE;
 80001c0:	4b1b      	ldr	r3, [pc, #108]	; (8000230 <main+0xbc>)
 80001c2:	2200      	movs	r2, #0
 80001c4:	751a      	strb	r2, [r3, #20]
//  txheader4.RTR=CAN_RTR_DATA;
//  txheader4.IDE=CAN_ID_EXT;
//  txheader4.DLC=8;
//  txheader4.TransmitGlobalTime=DISABLE;

  TxData[0]=1;
 80001c6:	4b1b      	ldr	r3, [pc, #108]	; (8000234 <main+0xc0>)
 80001c8:	2201      	movs	r2, #1
 80001ca:	701a      	strb	r2, [r3, #0]
  TxData[1]=2;
 80001cc:	4b19      	ldr	r3, [pc, #100]	; (8000234 <main+0xc0>)
 80001ce:	2202      	movs	r2, #2
 80001d0:	705a      	strb	r2, [r3, #1]
  TxData[2]=3;
 80001d2:	4b18      	ldr	r3, [pc, #96]	; (8000234 <main+0xc0>)
 80001d4:	2203      	movs	r2, #3
 80001d6:	709a      	strb	r2, [r3, #2]
  TxData[3]=4;
 80001d8:	4b16      	ldr	r3, [pc, #88]	; (8000234 <main+0xc0>)
 80001da:	2204      	movs	r2, #4
 80001dc:	70da      	strb	r2, [r3, #3]
  TxData[4]=5;
 80001de:	4b15      	ldr	r3, [pc, #84]	; (8000234 <main+0xc0>)
 80001e0:	2205      	movs	r2, #5
 80001e2:	711a      	strb	r2, [r3, #4]
  TxData[5]=6;
 80001e4:	4b13      	ldr	r3, [pc, #76]	; (8000234 <main+0xc0>)
 80001e6:	2206      	movs	r2, #6
 80001e8:	715a      	strb	r2, [r3, #5]
  TxData[6]=7;
 80001ea:	4b12      	ldr	r3, [pc, #72]	; (8000234 <main+0xc0>)
 80001ec:	2207      	movs	r2, #7
 80001ee:	719a      	strb	r2, [r3, #6]
  TxData[7]=8;
 80001f0:	4b10      	ldr	r3, [pc, #64]	; (8000234 <main+0xc0>)
 80001f2:	2208      	movs	r2, #8
 80001f4:	71da      	strb	r2, [r3, #7]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(HAL_CAN_AddTxMessage(&hcan, &txheader, TxData, &TxMailbox)!=HAL_OK){
 80001f6:	4b10      	ldr	r3, [pc, #64]	; (8000238 <main+0xc4>)
 80001f8:	4a0e      	ldr	r2, [pc, #56]	; (8000234 <main+0xc0>)
 80001fa:	490d      	ldr	r1, [pc, #52]	; (8000230 <main+0xbc>)
 80001fc:	480a      	ldr	r0, [pc, #40]	; (8000228 <main+0xb4>)
 80001fe:	f000 fc74 	bl	8000aea <HAL_CAN_AddTxMessage>
 8000202:	4603      	mov	r3, r0
 8000204:	2b00      	cmp	r3, #0
 8000206:	d001      	beq.n	800020c <main+0x98>
		  Error_Handler();
 8000208:	f000 f8e0 	bl	80003cc <Error_Handler>
	  }
	  printf("StdID: %04lx\r\n",txheader.StdId);
 800020c:	4b08      	ldr	r3, [pc, #32]	; (8000230 <main+0xbc>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	4619      	mov	r1, r3
 8000212:	480a      	ldr	r0, [pc, #40]	; (800023c <main+0xc8>)
 8000214:	f002 f806 	bl	8002224 <iprintf>
//	  printf("StdID: %04lx, ExtID: %04lx\r\n",txheader3.StdId,txheader3.ExtId);
//	  if(HAL_CAN_AddTxMessage(&hcan, &txheader4, TxData, &TxMailbox)!=HAL_OK){
//		  Error_Handler();
//	  }
//	  printf("StdID: %04lx, ExtID: %04lx\r\n",txheader4.StdId,txheader4.ExtId);
	  printf("send success\r\n\r\n");
 8000218:	4809      	ldr	r0, [pc, #36]	; (8000240 <main+0xcc>)
 800021a:	f002 f889 	bl	8002330 <puts>
	  HAL_Delay(500);
 800021e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000222:	f000 faff 	bl	8000824 <HAL_Delay>
	  if(HAL_CAN_AddTxMessage(&hcan, &txheader, TxData, &TxMailbox)!=HAL_OK){
 8000226:	e7e6      	b.n	80001f6 <main+0x82>
 8000228:	2000008c 	.word	0x2000008c
 800022c:	08003250 	.word	0x08003250
 8000230:	200000f8 	.word	0x200000f8
 8000234:	20000110 	.word	0x20000110
 8000238:	20000118 	.word	0x20000118
 800023c:	0800325c 	.word	0x0800325c
 8000240:	0800326c 	.word	0x0800326c

08000244 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b090      	sub	sp, #64	; 0x40
 8000248:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800024a:	f107 0318 	add.w	r3, r7, #24
 800024e:	2228      	movs	r2, #40	; 0x28
 8000250:	2100      	movs	r1, #0
 8000252:	4618      	mov	r0, r3
 8000254:	f001 ffde 	bl	8002214 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000258:	1d3b      	adds	r3, r7, #4
 800025a:	2200      	movs	r2, #0
 800025c:	601a      	str	r2, [r3, #0]
 800025e:	605a      	str	r2, [r3, #4]
 8000260:	609a      	str	r2, [r3, #8]
 8000262:	60da      	str	r2, [r3, #12]
 8000264:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000266:	2302      	movs	r3, #2
 8000268:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800026a:	2301      	movs	r3, #1
 800026c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800026e:	2310      	movs	r3, #16
 8000270:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000272:	2302      	movs	r3, #2
 8000274:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000276:	2300      	movs	r3, #0
 8000278:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800027a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800027e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000280:	f107 0318 	add.w	r3, r7, #24
 8000284:	4618      	mov	r0, r3
 8000286:	f001 f9c9 	bl	800161c <HAL_RCC_OscConfig>
 800028a:	4603      	mov	r3, r0
 800028c:	2b00      	cmp	r3, #0
 800028e:	d001      	beq.n	8000294 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000290:	f000 f89c 	bl	80003cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000294:	230f      	movs	r3, #15
 8000296:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000298:	2302      	movs	r3, #2
 800029a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800029c:	2300      	movs	r3, #0
 800029e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80002a0:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80002a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002a6:	2300      	movs	r3, #0
 80002a8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002aa:	1d3b      	adds	r3, r7, #4
 80002ac:	2102      	movs	r1, #2
 80002ae:	4618      	mov	r0, r3
 80002b0:	f001 fc36 	bl	8001b20 <HAL_RCC_ClockConfig>
 80002b4:	4603      	mov	r3, r0
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d001      	beq.n	80002be <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80002ba:	f000 f887 	bl	80003cc <Error_Handler>
  }
}
 80002be:	bf00      	nop
 80002c0:	3740      	adds	r7, #64	; 0x40
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bd80      	pop	{r7, pc}
	...

080002c8 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80002cc:	4b17      	ldr	r3, [pc, #92]	; (800032c <MX_CAN_Init+0x64>)
 80002ce:	4a18      	ldr	r2, [pc, #96]	; (8000330 <MX_CAN_Init+0x68>)
 80002d0:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 1;
 80002d2:	4b16      	ldr	r3, [pc, #88]	; (800032c <MX_CAN_Init+0x64>)
 80002d4:	2201      	movs	r2, #1
 80002d6:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80002d8:	4b14      	ldr	r3, [pc, #80]	; (800032c <MX_CAN_Init+0x64>)
 80002da:	2200      	movs	r2, #0
 80002dc:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80002de:	4b13      	ldr	r3, [pc, #76]	; (800032c <MX_CAN_Init+0x64>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 80002e4:	4b11      	ldr	r3, [pc, #68]	; (800032c <MX_CAN_Init+0x64>)
 80002e6:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 80002ea:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 80002ec:	4b0f      	ldr	r3, [pc, #60]	; (800032c <MX_CAN_Init+0x64>)
 80002ee:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80002f2:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80002f4:	4b0d      	ldr	r3, [pc, #52]	; (800032c <MX_CAN_Init+0x64>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80002fa:	4b0c      	ldr	r3, [pc, #48]	; (800032c <MX_CAN_Init+0x64>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000300:	4b0a      	ldr	r3, [pc, #40]	; (800032c <MX_CAN_Init+0x64>)
 8000302:	2200      	movs	r2, #0
 8000304:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000306:	4b09      	ldr	r3, [pc, #36]	; (800032c <MX_CAN_Init+0x64>)
 8000308:	2200      	movs	r2, #0
 800030a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800030c:	4b07      	ldr	r3, [pc, #28]	; (800032c <MX_CAN_Init+0x64>)
 800030e:	2200      	movs	r2, #0
 8000310:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000312:	4b06      	ldr	r3, [pc, #24]	; (800032c <MX_CAN_Init+0x64>)
 8000314:	2200      	movs	r2, #0
 8000316:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000318:	4804      	ldr	r0, [pc, #16]	; (800032c <MX_CAN_Init+0x64>)
 800031a:	f000 faa7 	bl	800086c <HAL_CAN_Init>
 800031e:	4603      	mov	r3, r0
 8000320:	2b00      	cmp	r3, #0
 8000322:	d001      	beq.n	8000328 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000324:	f000 f852 	bl	80003cc <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000328:	bf00      	nop
 800032a:	bd80      	pop	{r7, pc}
 800032c:	2000008c 	.word	0x2000008c
 8000330:	40006400 	.word	0x40006400

08000334 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000338:	4b11      	ldr	r3, [pc, #68]	; (8000380 <MX_USART2_UART_Init+0x4c>)
 800033a:	4a12      	ldr	r2, [pc, #72]	; (8000384 <MX_USART2_UART_Init+0x50>)
 800033c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800033e:	4b10      	ldr	r3, [pc, #64]	; (8000380 <MX_USART2_UART_Init+0x4c>)
 8000340:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000344:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000346:	4b0e      	ldr	r3, [pc, #56]	; (8000380 <MX_USART2_UART_Init+0x4c>)
 8000348:	2200      	movs	r2, #0
 800034a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800034c:	4b0c      	ldr	r3, [pc, #48]	; (8000380 <MX_USART2_UART_Init+0x4c>)
 800034e:	2200      	movs	r2, #0
 8000350:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000352:	4b0b      	ldr	r3, [pc, #44]	; (8000380 <MX_USART2_UART_Init+0x4c>)
 8000354:	2200      	movs	r2, #0
 8000356:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000358:	4b09      	ldr	r3, [pc, #36]	; (8000380 <MX_USART2_UART_Init+0x4c>)
 800035a:	220c      	movs	r2, #12
 800035c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800035e:	4b08      	ldr	r3, [pc, #32]	; (8000380 <MX_USART2_UART_Init+0x4c>)
 8000360:	2200      	movs	r2, #0
 8000362:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000364:	4b06      	ldr	r3, [pc, #24]	; (8000380 <MX_USART2_UART_Init+0x4c>)
 8000366:	2200      	movs	r2, #0
 8000368:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800036a:	4805      	ldr	r0, [pc, #20]	; (8000380 <MX_USART2_UART_Init+0x4c>)
 800036c:	f001 fd70 	bl	8001e50 <HAL_UART_Init>
 8000370:	4603      	mov	r3, r0
 8000372:	2b00      	cmp	r3, #0
 8000374:	d001      	beq.n	800037a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000376:	f000 f829 	bl	80003cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800037a:	bf00      	nop
 800037c:	bd80      	pop	{r7, pc}
 800037e:	bf00      	nop
 8000380:	200000b4 	.word	0x200000b4
 8000384:	40004400 	.word	0x40004400

08000388 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000388:	b480      	push	{r7}
 800038a:	b083      	sub	sp, #12
 800038c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800038e:	4b0e      	ldr	r3, [pc, #56]	; (80003c8 <MX_GPIO_Init+0x40>)
 8000390:	699b      	ldr	r3, [r3, #24]
 8000392:	4a0d      	ldr	r2, [pc, #52]	; (80003c8 <MX_GPIO_Init+0x40>)
 8000394:	f043 0310 	orr.w	r3, r3, #16
 8000398:	6193      	str	r3, [r2, #24]
 800039a:	4b0b      	ldr	r3, [pc, #44]	; (80003c8 <MX_GPIO_Init+0x40>)
 800039c:	699b      	ldr	r3, [r3, #24]
 800039e:	f003 0310 	and.w	r3, r3, #16
 80003a2:	607b      	str	r3, [r7, #4]
 80003a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003a6:	4b08      	ldr	r3, [pc, #32]	; (80003c8 <MX_GPIO_Init+0x40>)
 80003a8:	699b      	ldr	r3, [r3, #24]
 80003aa:	4a07      	ldr	r2, [pc, #28]	; (80003c8 <MX_GPIO_Init+0x40>)
 80003ac:	f043 0304 	orr.w	r3, r3, #4
 80003b0:	6193      	str	r3, [r2, #24]
 80003b2:	4b05      	ldr	r3, [pc, #20]	; (80003c8 <MX_GPIO_Init+0x40>)
 80003b4:	699b      	ldr	r3, [r3, #24]
 80003b6:	f003 0304 	and.w	r3, r3, #4
 80003ba:	603b      	str	r3, [r7, #0]
 80003bc:	683b      	ldr	r3, [r7, #0]

}
 80003be:	bf00      	nop
 80003c0:	370c      	adds	r7, #12
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bc80      	pop	{r7}
 80003c6:	4770      	bx	lr
 80003c8:	40021000 	.word	0x40021000

080003cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003cc:	b480      	push	{r7}
 80003ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003d0:	b672      	cpsid	i
}
 80003d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003d4:	e7fe      	b.n	80003d4 <Error_Handler+0x8>
	...

080003d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003d8:	b480      	push	{r7}
 80003da:	b085      	sub	sp, #20
 80003dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003de:	4b15      	ldr	r3, [pc, #84]	; (8000434 <HAL_MspInit+0x5c>)
 80003e0:	699b      	ldr	r3, [r3, #24]
 80003e2:	4a14      	ldr	r2, [pc, #80]	; (8000434 <HAL_MspInit+0x5c>)
 80003e4:	f043 0301 	orr.w	r3, r3, #1
 80003e8:	6193      	str	r3, [r2, #24]
 80003ea:	4b12      	ldr	r3, [pc, #72]	; (8000434 <HAL_MspInit+0x5c>)
 80003ec:	699b      	ldr	r3, [r3, #24]
 80003ee:	f003 0301 	and.w	r3, r3, #1
 80003f2:	60bb      	str	r3, [r7, #8]
 80003f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003f6:	4b0f      	ldr	r3, [pc, #60]	; (8000434 <HAL_MspInit+0x5c>)
 80003f8:	69db      	ldr	r3, [r3, #28]
 80003fa:	4a0e      	ldr	r2, [pc, #56]	; (8000434 <HAL_MspInit+0x5c>)
 80003fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000400:	61d3      	str	r3, [r2, #28]
 8000402:	4b0c      	ldr	r3, [pc, #48]	; (8000434 <HAL_MspInit+0x5c>)
 8000404:	69db      	ldr	r3, [r3, #28]
 8000406:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800040a:	607b      	str	r3, [r7, #4]
 800040c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800040e:	4b0a      	ldr	r3, [pc, #40]	; (8000438 <HAL_MspInit+0x60>)
 8000410:	685b      	ldr	r3, [r3, #4]
 8000412:	60fb      	str	r3, [r7, #12]
 8000414:	68fb      	ldr	r3, [r7, #12]
 8000416:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800041a:	60fb      	str	r3, [r7, #12]
 800041c:	68fb      	ldr	r3, [r7, #12]
 800041e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000422:	60fb      	str	r3, [r7, #12]
 8000424:	4a04      	ldr	r2, [pc, #16]	; (8000438 <HAL_MspInit+0x60>)
 8000426:	68fb      	ldr	r3, [r7, #12]
 8000428:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800042a:	bf00      	nop
 800042c:	3714      	adds	r7, #20
 800042e:	46bd      	mov	sp, r7
 8000430:	bc80      	pop	{r7}
 8000432:	4770      	bx	lr
 8000434:	40021000 	.word	0x40021000
 8000438:	40010000 	.word	0x40010000

0800043c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b088      	sub	sp, #32
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000444:	f107 0310 	add.w	r3, r7, #16
 8000448:	2200      	movs	r2, #0
 800044a:	601a      	str	r2, [r3, #0]
 800044c:	605a      	str	r2, [r3, #4]
 800044e:	609a      	str	r2, [r3, #8]
 8000450:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	4a24      	ldr	r2, [pc, #144]	; (80004e8 <HAL_CAN_MspInit+0xac>)
 8000458:	4293      	cmp	r3, r2
 800045a:	d141      	bne.n	80004e0 <HAL_CAN_MspInit+0xa4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800045c:	4b23      	ldr	r3, [pc, #140]	; (80004ec <HAL_CAN_MspInit+0xb0>)
 800045e:	69db      	ldr	r3, [r3, #28]
 8000460:	4a22      	ldr	r2, [pc, #136]	; (80004ec <HAL_CAN_MspInit+0xb0>)
 8000462:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000466:	61d3      	str	r3, [r2, #28]
 8000468:	4b20      	ldr	r3, [pc, #128]	; (80004ec <HAL_CAN_MspInit+0xb0>)
 800046a:	69db      	ldr	r3, [r3, #28]
 800046c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000470:	60fb      	str	r3, [r7, #12]
 8000472:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000474:	4b1d      	ldr	r3, [pc, #116]	; (80004ec <HAL_CAN_MspInit+0xb0>)
 8000476:	699b      	ldr	r3, [r3, #24]
 8000478:	4a1c      	ldr	r2, [pc, #112]	; (80004ec <HAL_CAN_MspInit+0xb0>)
 800047a:	f043 0304 	orr.w	r3, r3, #4
 800047e:	6193      	str	r3, [r2, #24]
 8000480:	4b1a      	ldr	r3, [pc, #104]	; (80004ec <HAL_CAN_MspInit+0xb0>)
 8000482:	699b      	ldr	r3, [r3, #24]
 8000484:	f003 0304 	and.w	r3, r3, #4
 8000488:	60bb      	str	r3, [r7, #8]
 800048a:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800048c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000490:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000492:	2300      	movs	r3, #0
 8000494:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000496:	2300      	movs	r3, #0
 8000498:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800049a:	f107 0310 	add.w	r3, r7, #16
 800049e:	4619      	mov	r1, r3
 80004a0:	4813      	ldr	r0, [pc, #76]	; (80004f0 <HAL_CAN_MspInit+0xb4>)
 80004a2:	f000 ff37 	bl	8001314 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80004a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004ac:	2302      	movs	r3, #2
 80004ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004b0:	2303      	movs	r3, #3
 80004b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004b4:	f107 0310 	add.w	r3, r7, #16
 80004b8:	4619      	mov	r1, r3
 80004ba:	480d      	ldr	r0, [pc, #52]	; (80004f0 <HAL_CAN_MspInit+0xb4>)
 80004bc:	f000 ff2a 	bl	8001314 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 80004c0:	2200      	movs	r2, #0
 80004c2:	2100      	movs	r1, #0
 80004c4:	2013      	movs	r0, #19
 80004c6:	f000 feee 	bl	80012a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 80004ca:	2013      	movs	r0, #19
 80004cc:	f000 ff07 	bl	80012de <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80004d0:	2200      	movs	r2, #0
 80004d2:	2100      	movs	r1, #0
 80004d4:	2014      	movs	r0, #20
 80004d6:	f000 fee6 	bl	80012a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80004da:	2014      	movs	r0, #20
 80004dc:	f000 feff 	bl	80012de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80004e0:	bf00      	nop
 80004e2:	3720      	adds	r7, #32
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	40006400 	.word	0x40006400
 80004ec:	40021000 	.word	0x40021000
 80004f0:	40010800 	.word	0x40010800

080004f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b088      	sub	sp, #32
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004fc:	f107 0310 	add.w	r3, r7, #16
 8000500:	2200      	movs	r2, #0
 8000502:	601a      	str	r2, [r3, #0]
 8000504:	605a      	str	r2, [r3, #4]
 8000506:	609a      	str	r2, [r3, #8]
 8000508:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	4a1b      	ldr	r2, [pc, #108]	; (800057c <HAL_UART_MspInit+0x88>)
 8000510:	4293      	cmp	r3, r2
 8000512:	d12f      	bne.n	8000574 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000514:	4b1a      	ldr	r3, [pc, #104]	; (8000580 <HAL_UART_MspInit+0x8c>)
 8000516:	69db      	ldr	r3, [r3, #28]
 8000518:	4a19      	ldr	r2, [pc, #100]	; (8000580 <HAL_UART_MspInit+0x8c>)
 800051a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800051e:	61d3      	str	r3, [r2, #28]
 8000520:	4b17      	ldr	r3, [pc, #92]	; (8000580 <HAL_UART_MspInit+0x8c>)
 8000522:	69db      	ldr	r3, [r3, #28]
 8000524:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000528:	60fb      	str	r3, [r7, #12]
 800052a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800052c:	4b14      	ldr	r3, [pc, #80]	; (8000580 <HAL_UART_MspInit+0x8c>)
 800052e:	699b      	ldr	r3, [r3, #24]
 8000530:	4a13      	ldr	r2, [pc, #76]	; (8000580 <HAL_UART_MspInit+0x8c>)
 8000532:	f043 0304 	orr.w	r3, r3, #4
 8000536:	6193      	str	r3, [r2, #24]
 8000538:	4b11      	ldr	r3, [pc, #68]	; (8000580 <HAL_UART_MspInit+0x8c>)
 800053a:	699b      	ldr	r3, [r3, #24]
 800053c:	f003 0304 	and.w	r3, r3, #4
 8000540:	60bb      	str	r3, [r7, #8]
 8000542:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000544:	2304      	movs	r3, #4
 8000546:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000548:	2302      	movs	r3, #2
 800054a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800054c:	2303      	movs	r3, #3
 800054e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000550:	f107 0310 	add.w	r3, r7, #16
 8000554:	4619      	mov	r1, r3
 8000556:	480b      	ldr	r0, [pc, #44]	; (8000584 <HAL_UART_MspInit+0x90>)
 8000558:	f000 fedc 	bl	8001314 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800055c:	2308      	movs	r3, #8
 800055e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000560:	2300      	movs	r3, #0
 8000562:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000564:	2300      	movs	r3, #0
 8000566:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000568:	f107 0310 	add.w	r3, r7, #16
 800056c:	4619      	mov	r1, r3
 800056e:	4805      	ldr	r0, [pc, #20]	; (8000584 <HAL_UART_MspInit+0x90>)
 8000570:	f000 fed0 	bl	8001314 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000574:	bf00      	nop
 8000576:	3720      	adds	r7, #32
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}
 800057c:	40004400 	.word	0x40004400
 8000580:	40021000 	.word	0x40021000
 8000584:	40010800 	.word	0x40010800

08000588 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800058c:	e7fe      	b.n	800058c <NMI_Handler+0x4>

0800058e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800058e:	b480      	push	{r7}
 8000590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000592:	e7fe      	b.n	8000592 <HardFault_Handler+0x4>

08000594 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000598:	e7fe      	b.n	8000598 <MemManage_Handler+0x4>

0800059a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800059a:	b480      	push	{r7}
 800059c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800059e:	e7fe      	b.n	800059e <BusFault_Handler+0x4>

080005a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005a4:	e7fe      	b.n	80005a4 <UsageFault_Handler+0x4>

080005a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005a6:	b480      	push	{r7}
 80005a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005aa:	bf00      	nop
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bc80      	pop	{r7}
 80005b0:	4770      	bx	lr

080005b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005b2:	b480      	push	{r7}
 80005b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005b6:	bf00      	nop
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bc80      	pop	{r7}
 80005bc:	4770      	bx	lr

080005be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005be:	b480      	push	{r7}
 80005c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005c2:	bf00      	nop
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bc80      	pop	{r7}
 80005c8:	4770      	bx	lr

080005ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005ca:	b580      	push	{r7, lr}
 80005cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005ce:	f000 f90d 	bl	80007ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005d2:	bf00      	nop
 80005d4:	bd80      	pop	{r7, pc}
	...

080005d8 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80005dc:	4802      	ldr	r0, [pc, #8]	; (80005e8 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 80005de:	f000 fb5e 	bl	8000c9e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 80005e2:	bf00      	nop
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	2000008c 	.word	0x2000008c

080005ec <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80005f0:	4802      	ldr	r0, [pc, #8]	; (80005fc <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80005f2:	f000 fb54 	bl	8000c9e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80005f6:	bf00      	nop
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	2000008c 	.word	0x2000008c

08000600 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b086      	sub	sp, #24
 8000604:	af00      	add	r7, sp, #0
 8000606:	60f8      	str	r0, [r7, #12]
 8000608:	60b9      	str	r1, [r7, #8]
 800060a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800060c:	2300      	movs	r3, #0
 800060e:	617b      	str	r3, [r7, #20]
 8000610:	e00a      	b.n	8000628 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000612:	f3af 8000 	nop.w
 8000616:	4601      	mov	r1, r0
 8000618:	68bb      	ldr	r3, [r7, #8]
 800061a:	1c5a      	adds	r2, r3, #1
 800061c:	60ba      	str	r2, [r7, #8]
 800061e:	b2ca      	uxtb	r2, r1
 8000620:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000622:	697b      	ldr	r3, [r7, #20]
 8000624:	3301      	adds	r3, #1
 8000626:	617b      	str	r3, [r7, #20]
 8000628:	697a      	ldr	r2, [r7, #20]
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	429a      	cmp	r2, r3
 800062e:	dbf0      	blt.n	8000612 <_read+0x12>
	}

return len;
 8000630:	687b      	ldr	r3, [r7, #4]
}
 8000632:	4618      	mov	r0, r3
 8000634:	3718      	adds	r7, #24
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}

0800063a <_close>:
	}
	return len;
}

int _close(int file)
{
 800063a:	b480      	push	{r7}
 800063c:	b083      	sub	sp, #12
 800063e:	af00      	add	r7, sp, #0
 8000640:	6078      	str	r0, [r7, #4]
	return -1;
 8000642:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000646:	4618      	mov	r0, r3
 8000648:	370c      	adds	r7, #12
 800064a:	46bd      	mov	sp, r7
 800064c:	bc80      	pop	{r7}
 800064e:	4770      	bx	lr

08000650 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000650:	b480      	push	{r7}
 8000652:	b083      	sub	sp, #12
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
 8000658:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800065a:	683b      	ldr	r3, [r7, #0]
 800065c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000660:	605a      	str	r2, [r3, #4]
	return 0;
 8000662:	2300      	movs	r3, #0
}
 8000664:	4618      	mov	r0, r3
 8000666:	370c      	adds	r7, #12
 8000668:	46bd      	mov	sp, r7
 800066a:	bc80      	pop	{r7}
 800066c:	4770      	bx	lr

0800066e <_isatty>:

int _isatty(int file)
{
 800066e:	b480      	push	{r7}
 8000670:	b083      	sub	sp, #12
 8000672:	af00      	add	r7, sp, #0
 8000674:	6078      	str	r0, [r7, #4]
	return 1;
 8000676:	2301      	movs	r3, #1
}
 8000678:	4618      	mov	r0, r3
 800067a:	370c      	adds	r7, #12
 800067c:	46bd      	mov	sp, r7
 800067e:	bc80      	pop	{r7}
 8000680:	4770      	bx	lr

08000682 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000682:	b480      	push	{r7}
 8000684:	b085      	sub	sp, #20
 8000686:	af00      	add	r7, sp, #0
 8000688:	60f8      	str	r0, [r7, #12]
 800068a:	60b9      	str	r1, [r7, #8]
 800068c:	607a      	str	r2, [r7, #4]
	return 0;
 800068e:	2300      	movs	r3, #0
}
 8000690:	4618      	mov	r0, r3
 8000692:	3714      	adds	r7, #20
 8000694:	46bd      	mov	sp, r7
 8000696:	bc80      	pop	{r7}
 8000698:	4770      	bx	lr
	...

0800069c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b086      	sub	sp, #24
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006a4:	4a14      	ldr	r2, [pc, #80]	; (80006f8 <_sbrk+0x5c>)
 80006a6:	4b15      	ldr	r3, [pc, #84]	; (80006fc <_sbrk+0x60>)
 80006a8:	1ad3      	subs	r3, r2, r3
 80006aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006ac:	697b      	ldr	r3, [r7, #20]
 80006ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006b0:	4b13      	ldr	r3, [pc, #76]	; (8000700 <_sbrk+0x64>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d102      	bne.n	80006be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006b8:	4b11      	ldr	r3, [pc, #68]	; (8000700 <_sbrk+0x64>)
 80006ba:	4a12      	ldr	r2, [pc, #72]	; (8000704 <_sbrk+0x68>)
 80006bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006be:	4b10      	ldr	r3, [pc, #64]	; (8000700 <_sbrk+0x64>)
 80006c0:	681a      	ldr	r2, [r3, #0]
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	4413      	add	r3, r2
 80006c6:	693a      	ldr	r2, [r7, #16]
 80006c8:	429a      	cmp	r2, r3
 80006ca:	d207      	bcs.n	80006dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006cc:	f001 fd78 	bl	80021c0 <__errno>
 80006d0:	4603      	mov	r3, r0
 80006d2:	220c      	movs	r2, #12
 80006d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006d6:	f04f 33ff 	mov.w	r3, #4294967295
 80006da:	e009      	b.n	80006f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006dc:	4b08      	ldr	r3, [pc, #32]	; (8000700 <_sbrk+0x64>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006e2:	4b07      	ldr	r3, [pc, #28]	; (8000700 <_sbrk+0x64>)
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	4413      	add	r3, r2
 80006ea:	4a05      	ldr	r2, [pc, #20]	; (8000700 <_sbrk+0x64>)
 80006ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006ee:	68fb      	ldr	r3, [r7, #12]
}
 80006f0:	4618      	mov	r0, r3
 80006f2:	3718      	adds	r7, #24
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	20005000 	.word	0x20005000
 80006fc:	00000400 	.word	0x00000400
 8000700:	2000011c 	.word	0x2000011c
 8000704:	20000138 	.word	0x20000138

08000708 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800070c:	bf00      	nop
 800070e:	46bd      	mov	sp, r7
 8000710:	bc80      	pop	{r7}
 8000712:	4770      	bx	lr

08000714 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000714:	480c      	ldr	r0, [pc, #48]	; (8000748 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000716:	490d      	ldr	r1, [pc, #52]	; (800074c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000718:	4a0d      	ldr	r2, [pc, #52]	; (8000750 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800071a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800071c:	e002      	b.n	8000724 <LoopCopyDataInit>

0800071e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800071e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000720:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000722:	3304      	adds	r3, #4

08000724 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000724:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000726:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000728:	d3f9      	bcc.n	800071e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800072a:	4a0a      	ldr	r2, [pc, #40]	; (8000754 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800072c:	4c0a      	ldr	r4, [pc, #40]	; (8000758 <LoopFillZerobss+0x22>)
  movs r3, #0
 800072e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000730:	e001      	b.n	8000736 <LoopFillZerobss>

08000732 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000732:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000734:	3204      	adds	r2, #4

08000736 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000736:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000738:	d3fb      	bcc.n	8000732 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800073a:	f7ff ffe5 	bl	8000708 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800073e:	f001 fd45 	bl	80021cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000742:	f7ff fd17 	bl	8000174 <main>
  bx lr
 8000746:	4770      	bx	lr
  ldr r0, =_sdata
 8000748:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800074c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000750:	08003344 	.word	0x08003344
  ldr r2, =_sbss
 8000754:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000758:	20000134 	.word	0x20000134

0800075c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800075c:	e7fe      	b.n	800075c <ADC1_2_IRQHandler>
	...

08000760 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000764:	4b08      	ldr	r3, [pc, #32]	; (8000788 <HAL_Init+0x28>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a07      	ldr	r2, [pc, #28]	; (8000788 <HAL_Init+0x28>)
 800076a:	f043 0310 	orr.w	r3, r3, #16
 800076e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000770:	2003      	movs	r0, #3
 8000772:	f000 fd8d 	bl	8001290 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000776:	200f      	movs	r0, #15
 8000778:	f000 f808 	bl	800078c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800077c:	f7ff fe2c 	bl	80003d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000780:	2300      	movs	r3, #0
}
 8000782:	4618      	mov	r0, r3
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	40022000 	.word	0x40022000

0800078c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000794:	4b12      	ldr	r3, [pc, #72]	; (80007e0 <HAL_InitTick+0x54>)
 8000796:	681a      	ldr	r2, [r3, #0]
 8000798:	4b12      	ldr	r3, [pc, #72]	; (80007e4 <HAL_InitTick+0x58>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	4619      	mov	r1, r3
 800079e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80007a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80007aa:	4618      	mov	r0, r3
 80007ac:	f000 fda5 	bl	80012fa <HAL_SYSTICK_Config>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007b6:	2301      	movs	r3, #1
 80007b8:	e00e      	b.n	80007d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	2b0f      	cmp	r3, #15
 80007be:	d80a      	bhi.n	80007d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007c0:	2200      	movs	r2, #0
 80007c2:	6879      	ldr	r1, [r7, #4]
 80007c4:	f04f 30ff 	mov.w	r0, #4294967295
 80007c8:	f000 fd6d 	bl	80012a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007cc:	4a06      	ldr	r2, [pc, #24]	; (80007e8 <HAL_InitTick+0x5c>)
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007d2:	2300      	movs	r3, #0
 80007d4:	e000      	b.n	80007d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007d6:	2301      	movs	r3, #1
}
 80007d8:	4618      	mov	r0, r3
 80007da:	3708      	adds	r7, #8
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	20000000 	.word	0x20000000
 80007e4:	20000008 	.word	0x20000008
 80007e8:	20000004 	.word	0x20000004

080007ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007f0:	4b05      	ldr	r3, [pc, #20]	; (8000808 <HAL_IncTick+0x1c>)
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	461a      	mov	r2, r3
 80007f6:	4b05      	ldr	r3, [pc, #20]	; (800080c <HAL_IncTick+0x20>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	4413      	add	r3, r2
 80007fc:	4a03      	ldr	r2, [pc, #12]	; (800080c <HAL_IncTick+0x20>)
 80007fe:	6013      	str	r3, [r2, #0]
}
 8000800:	bf00      	nop
 8000802:	46bd      	mov	sp, r7
 8000804:	bc80      	pop	{r7}
 8000806:	4770      	bx	lr
 8000808:	20000008 	.word	0x20000008
 800080c:	20000120 	.word	0x20000120

08000810 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  return uwTick;
 8000814:	4b02      	ldr	r3, [pc, #8]	; (8000820 <HAL_GetTick+0x10>)
 8000816:	681b      	ldr	r3, [r3, #0]
}
 8000818:	4618      	mov	r0, r3
 800081a:	46bd      	mov	sp, r7
 800081c:	bc80      	pop	{r7}
 800081e:	4770      	bx	lr
 8000820:	20000120 	.word	0x20000120

08000824 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b084      	sub	sp, #16
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800082c:	f7ff fff0 	bl	8000810 <HAL_GetTick>
 8000830:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800083c:	d005      	beq.n	800084a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800083e:	4b0a      	ldr	r3, [pc, #40]	; (8000868 <HAL_Delay+0x44>)
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	461a      	mov	r2, r3
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	4413      	add	r3, r2
 8000848:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800084a:	bf00      	nop
 800084c:	f7ff ffe0 	bl	8000810 <HAL_GetTick>
 8000850:	4602      	mov	r2, r0
 8000852:	68bb      	ldr	r3, [r7, #8]
 8000854:	1ad3      	subs	r3, r2, r3
 8000856:	68fa      	ldr	r2, [r7, #12]
 8000858:	429a      	cmp	r2, r3
 800085a:	d8f7      	bhi.n	800084c <HAL_Delay+0x28>
  {
  }
}
 800085c:	bf00      	nop
 800085e:	bf00      	nop
 8000860:	3710      	adds	r7, #16
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	20000008 	.word	0x20000008

0800086c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b084      	sub	sp, #16
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	2b00      	cmp	r3, #0
 8000878:	d101      	bne.n	800087e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800087a:	2301      	movs	r3, #1
 800087c:	e0ed      	b.n	8000a5a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000884:	b2db      	uxtb	r3, r3
 8000886:	2b00      	cmp	r3, #0
 8000888:	d102      	bne.n	8000890 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800088a:	6878      	ldr	r0, [r7, #4]
 800088c:	f7ff fdd6 	bl	800043c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	681a      	ldr	r2, [r3, #0]
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	f042 0201 	orr.w	r2, r2, #1
 800089e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80008a0:	f7ff ffb6 	bl	8000810 <HAL_GetTick>
 80008a4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80008a6:	e012      	b.n	80008ce <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80008a8:	f7ff ffb2 	bl	8000810 <HAL_GetTick>
 80008ac:	4602      	mov	r2, r0
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	1ad3      	subs	r3, r2, r3
 80008b2:	2b0a      	cmp	r3, #10
 80008b4:	d90b      	bls.n	80008ce <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008ba:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	2205      	movs	r2, #5
 80008c6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80008ca:	2301      	movs	r3, #1
 80008cc:	e0c5      	b.n	8000a5a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	685b      	ldr	r3, [r3, #4]
 80008d4:	f003 0301 	and.w	r3, r3, #1
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d0e5      	beq.n	80008a8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	681a      	ldr	r2, [r3, #0]
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	f022 0202 	bic.w	r2, r2, #2
 80008ea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80008ec:	f7ff ff90 	bl	8000810 <HAL_GetTick>
 80008f0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80008f2:	e012      	b.n	800091a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80008f4:	f7ff ff8c 	bl	8000810 <HAL_GetTick>
 80008f8:	4602      	mov	r2, r0
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	1ad3      	subs	r3, r2, r3
 80008fe:	2b0a      	cmp	r3, #10
 8000900:	d90b      	bls.n	800091a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000906:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	2205      	movs	r2, #5
 8000912:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000916:	2301      	movs	r3, #1
 8000918:	e09f      	b.n	8000a5a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	685b      	ldr	r3, [r3, #4]
 8000920:	f003 0302 	and.w	r3, r3, #2
 8000924:	2b00      	cmp	r3, #0
 8000926:	d1e5      	bne.n	80008f4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	7e1b      	ldrb	r3, [r3, #24]
 800092c:	2b01      	cmp	r3, #1
 800092e:	d108      	bne.n	8000942 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	681a      	ldr	r2, [r3, #0]
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800093e:	601a      	str	r2, [r3, #0]
 8000940:	e007      	b.n	8000952 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	681a      	ldr	r2, [r3, #0]
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000950:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	7e5b      	ldrb	r3, [r3, #25]
 8000956:	2b01      	cmp	r3, #1
 8000958:	d108      	bne.n	800096c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	681a      	ldr	r2, [r3, #0]
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000968:	601a      	str	r2, [r3, #0]
 800096a:	e007      	b.n	800097c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	681a      	ldr	r2, [r3, #0]
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800097a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	7e9b      	ldrb	r3, [r3, #26]
 8000980:	2b01      	cmp	r3, #1
 8000982:	d108      	bne.n	8000996 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	681a      	ldr	r2, [r3, #0]
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	f042 0220 	orr.w	r2, r2, #32
 8000992:	601a      	str	r2, [r3, #0]
 8000994:	e007      	b.n	80009a6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	681a      	ldr	r2, [r3, #0]
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	f022 0220 	bic.w	r2, r2, #32
 80009a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	7edb      	ldrb	r3, [r3, #27]
 80009aa:	2b01      	cmp	r3, #1
 80009ac:	d108      	bne.n	80009c0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	681a      	ldr	r2, [r3, #0]
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	f022 0210 	bic.w	r2, r2, #16
 80009bc:	601a      	str	r2, [r3, #0]
 80009be:	e007      	b.n	80009d0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	681a      	ldr	r2, [r3, #0]
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	f042 0210 	orr.w	r2, r2, #16
 80009ce:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	7f1b      	ldrb	r3, [r3, #28]
 80009d4:	2b01      	cmp	r3, #1
 80009d6:	d108      	bne.n	80009ea <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	681a      	ldr	r2, [r3, #0]
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	f042 0208 	orr.w	r2, r2, #8
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	e007      	b.n	80009fa <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	681a      	ldr	r2, [r3, #0]
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	f022 0208 	bic.w	r2, r2, #8
 80009f8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	7f5b      	ldrb	r3, [r3, #29]
 80009fe:	2b01      	cmp	r3, #1
 8000a00:	d108      	bne.n	8000a14 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	681a      	ldr	r2, [r3, #0]
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	f042 0204 	orr.w	r2, r2, #4
 8000a10:	601a      	str	r2, [r3, #0]
 8000a12:	e007      	b.n	8000a24 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	681a      	ldr	r2, [r3, #0]
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	f022 0204 	bic.w	r2, r2, #4
 8000a22:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	689a      	ldr	r2, [r3, #8]
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	68db      	ldr	r3, [r3, #12]
 8000a2c:	431a      	orrs	r2, r3
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	691b      	ldr	r3, [r3, #16]
 8000a32:	431a      	orrs	r2, r3
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	695b      	ldr	r3, [r3, #20]
 8000a38:	ea42 0103 	orr.w	r1, r2, r3
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	685b      	ldr	r3, [r3, #4]
 8000a40:	1e5a      	subs	r2, r3, #1
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	430a      	orrs	r2, r1
 8000a48:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	2201      	movs	r2, #1
 8000a54:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000a58:	2300      	movs	r3, #0
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	3710      	adds	r7, #16
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}

08000a62 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000a62:	b580      	push	{r7, lr}
 8000a64:	b084      	sub	sp, #16
 8000a66:	af00      	add	r7, sp, #0
 8000a68:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a70:	b2db      	uxtb	r3, r3
 8000a72:	2b01      	cmp	r3, #1
 8000a74:	d12e      	bne.n	8000ad4 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	2202      	movs	r2, #2
 8000a7a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	681a      	ldr	r2, [r3, #0]
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	f022 0201 	bic.w	r2, r2, #1
 8000a8c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000a8e:	f7ff febf 	bl	8000810 <HAL_GetTick>
 8000a92:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000a94:	e012      	b.n	8000abc <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000a96:	f7ff febb 	bl	8000810 <HAL_GetTick>
 8000a9a:	4602      	mov	r2, r0
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	1ad3      	subs	r3, r2, r3
 8000aa0:	2b0a      	cmp	r3, #10
 8000aa2:	d90b      	bls.n	8000abc <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aa8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	2205      	movs	r2, #5
 8000ab4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	e012      	b.n	8000ae2 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	f003 0301 	and.w	r3, r3, #1
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d1e5      	bne.n	8000a96 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	2200      	movs	r2, #0
 8000ace:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	e006      	b.n	8000ae2 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ad8:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000ae0:	2301      	movs	r3, #1
  }
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	3710      	adds	r7, #16
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}

08000aea <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8000aea:	b480      	push	{r7}
 8000aec:	b089      	sub	sp, #36	; 0x24
 8000aee:	af00      	add	r7, sp, #0
 8000af0:	60f8      	str	r0, [r7, #12]
 8000af2:	60b9      	str	r1, [r7, #8]
 8000af4:	607a      	str	r2, [r7, #4]
 8000af6:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000afe:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	689b      	ldr	r3, [r3, #8]
 8000b06:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000b08:	7ffb      	ldrb	r3, [r7, #31]
 8000b0a:	2b01      	cmp	r3, #1
 8000b0c:	d003      	beq.n	8000b16 <HAL_CAN_AddTxMessage+0x2c>
 8000b0e:	7ffb      	ldrb	r3, [r7, #31]
 8000b10:	2b02      	cmp	r3, #2
 8000b12:	f040 80b8 	bne.w	8000c86 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000b16:	69bb      	ldr	r3, [r7, #24]
 8000b18:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d10a      	bne.n	8000b36 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000b20:	69bb      	ldr	r3, [r7, #24]
 8000b22:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d105      	bne.n	8000b36 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000b2a:	69bb      	ldr	r3, [r7, #24]
 8000b2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	f000 80a0 	beq.w	8000c76 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000b36:	69bb      	ldr	r3, [r7, #24]
 8000b38:	0e1b      	lsrs	r3, r3, #24
 8000b3a:	f003 0303 	and.w	r3, r3, #3
 8000b3e:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	2b02      	cmp	r3, #2
 8000b44:	d907      	bls.n	8000b56 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b4a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000b52:	2301      	movs	r3, #1
 8000b54:	e09e      	b.n	8000c94 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000b56:	2201      	movs	r2, #1
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	409a      	lsls	r2, r3
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	689b      	ldr	r3, [r3, #8]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d10d      	bne.n	8000b84 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000b6e:	68bb      	ldr	r3, [r7, #8]
 8000b70:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000b72:	68f9      	ldr	r1, [r7, #12]
 8000b74:	6809      	ldr	r1, [r1, #0]
 8000b76:	431a      	orrs	r2, r3
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	3318      	adds	r3, #24
 8000b7c:	011b      	lsls	r3, r3, #4
 8000b7e:	440b      	add	r3, r1
 8000b80:	601a      	str	r2, [r3, #0]
 8000b82:	e00f      	b.n	8000ba4 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	685b      	ldr	r3, [r3, #4]
 8000b88:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000b8a:	68bb      	ldr	r3, [r7, #8]
 8000b8c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000b8e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000b90:	68bb      	ldr	r3, [r7, #8]
 8000b92:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000b94:	68f9      	ldr	r1, [r7, #12]
 8000b96:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000b98:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000b9a:	697b      	ldr	r3, [r7, #20]
 8000b9c:	3318      	adds	r3, #24
 8000b9e:	011b      	lsls	r3, r3, #4
 8000ba0:	440b      	add	r3, r1
 8000ba2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	6819      	ldr	r1, [r3, #0]
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	691a      	ldr	r2, [r3, #16]
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	3318      	adds	r3, #24
 8000bb0:	011b      	lsls	r3, r3, #4
 8000bb2:	440b      	add	r3, r1
 8000bb4:	3304      	adds	r3, #4
 8000bb6:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	7d1b      	ldrb	r3, [r3, #20]
 8000bbc:	2b01      	cmp	r3, #1
 8000bbe:	d111      	bne.n	8000be4 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	681a      	ldr	r2, [r3, #0]
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	3318      	adds	r3, #24
 8000bc8:	011b      	lsls	r3, r3, #4
 8000bca:	4413      	add	r3, r2
 8000bcc:	3304      	adds	r3, #4
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	68fa      	ldr	r2, [r7, #12]
 8000bd2:	6811      	ldr	r1, [r2, #0]
 8000bd4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	3318      	adds	r3, #24
 8000bdc:	011b      	lsls	r3, r3, #4
 8000bde:	440b      	add	r3, r1
 8000be0:	3304      	adds	r3, #4
 8000be2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	3307      	adds	r3, #7
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	061a      	lsls	r2, r3, #24
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	3306      	adds	r3, #6
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	041b      	lsls	r3, r3, #16
 8000bf4:	431a      	orrs	r2, r3
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	3305      	adds	r3, #5
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	021b      	lsls	r3, r3, #8
 8000bfe:	4313      	orrs	r3, r2
 8000c00:	687a      	ldr	r2, [r7, #4]
 8000c02:	3204      	adds	r2, #4
 8000c04:	7812      	ldrb	r2, [r2, #0]
 8000c06:	4610      	mov	r0, r2
 8000c08:	68fa      	ldr	r2, [r7, #12]
 8000c0a:	6811      	ldr	r1, [r2, #0]
 8000c0c:	ea43 0200 	orr.w	r2, r3, r0
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	011b      	lsls	r3, r3, #4
 8000c14:	440b      	add	r3, r1
 8000c16:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000c1a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	3303      	adds	r3, #3
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	061a      	lsls	r2, r3, #24
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	3302      	adds	r3, #2
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	041b      	lsls	r3, r3, #16
 8000c2c:	431a      	orrs	r2, r3
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	3301      	adds	r3, #1
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	021b      	lsls	r3, r3, #8
 8000c36:	4313      	orrs	r3, r2
 8000c38:	687a      	ldr	r2, [r7, #4]
 8000c3a:	7812      	ldrb	r2, [r2, #0]
 8000c3c:	4610      	mov	r0, r2
 8000c3e:	68fa      	ldr	r2, [r7, #12]
 8000c40:	6811      	ldr	r1, [r2, #0]
 8000c42:	ea43 0200 	orr.w	r2, r3, r0
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	011b      	lsls	r3, r3, #4
 8000c4a:	440b      	add	r3, r1
 8000c4c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000c50:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	681a      	ldr	r2, [r3, #0]
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	3318      	adds	r3, #24
 8000c5a:	011b      	lsls	r3, r3, #4
 8000c5c:	4413      	add	r3, r2
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	68fa      	ldr	r2, [r7, #12]
 8000c62:	6811      	ldr	r1, [r2, #0]
 8000c64:	f043 0201 	orr.w	r2, r3, #1
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	3318      	adds	r3, #24
 8000c6c:	011b      	lsls	r3, r3, #4
 8000c6e:	440b      	add	r3, r1
 8000c70:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000c72:	2300      	movs	r3, #0
 8000c74:	e00e      	b.n	8000c94 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c7a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8000c82:	2301      	movs	r3, #1
 8000c84:	e006      	b.n	8000c94 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c8a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000c92:	2301      	movs	r3, #1
  }
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	3724      	adds	r7, #36	; 0x24
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bc80      	pop	{r7}
 8000c9c:	4770      	bx	lr

08000c9e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	b08a      	sub	sp, #40	; 0x28
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	695b      	ldr	r3, [r3, #20]
 8000cb0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	689b      	ldr	r3, [r3, #8]
 8000cc0:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	68db      	ldr	r3, [r3, #12]
 8000cc8:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	691b      	ldr	r3, [r3, #16]
 8000cd0:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	699b      	ldr	r3, [r3, #24]
 8000cd8:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000cda:	6a3b      	ldr	r3, [r7, #32]
 8000cdc:	f003 0301 	and.w	r3, r3, #1
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d07c      	beq.n	8000dde <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000ce4:	69bb      	ldr	r3, [r7, #24]
 8000ce6:	f003 0301 	and.w	r3, r3, #1
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d023      	beq.n	8000d36 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000cf6:	69bb      	ldr	r3, [r7, #24]
 8000cf8:	f003 0302 	and.w	r3, r3, #2
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d003      	beq.n	8000d08 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000d00:	6878      	ldr	r0, [r7, #4]
 8000d02:	f000 f983 	bl	800100c <HAL_CAN_TxMailbox0CompleteCallback>
 8000d06:	e016      	b.n	8000d36 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8000d08:	69bb      	ldr	r3, [r7, #24]
 8000d0a:	f003 0304 	and.w	r3, r3, #4
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d004      	beq.n	8000d1c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d14:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d18:	627b      	str	r3, [r7, #36]	; 0x24
 8000d1a:	e00c      	b.n	8000d36 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000d1c:	69bb      	ldr	r3, [r7, #24]
 8000d1e:	f003 0308 	and.w	r3, r3, #8
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d004      	beq.n	8000d30 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d28:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d2c:	627b      	str	r3, [r7, #36]	; 0x24
 8000d2e:	e002      	b.n	8000d36 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000d30:	6878      	ldr	r0, [r7, #4]
 8000d32:	f000 f986 	bl	8001042 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8000d36:	69bb      	ldr	r3, [r7, #24]
 8000d38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d024      	beq.n	8000d8a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d48:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000d4a:	69bb      	ldr	r3, [r7, #24]
 8000d4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d003      	beq.n	8000d5c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8000d54:	6878      	ldr	r0, [r7, #4]
 8000d56:	f000 f962 	bl	800101e <HAL_CAN_TxMailbox1CompleteCallback>
 8000d5a:	e016      	b.n	8000d8a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8000d5c:	69bb      	ldr	r3, [r7, #24]
 8000d5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d004      	beq.n	8000d70 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8000d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d68:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000d6c:	627b      	str	r3, [r7, #36]	; 0x24
 8000d6e:	e00c      	b.n	8000d8a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8000d70:	69bb      	ldr	r3, [r7, #24]
 8000d72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d004      	beq.n	8000d84 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8000d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d80:	627b      	str	r3, [r7, #36]	; 0x24
 8000d82:	e002      	b.n	8000d8a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000d84:	6878      	ldr	r0, [r7, #4]
 8000d86:	f000 f965 	bl	8001054 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8000d8a:	69bb      	ldr	r3, [r7, #24]
 8000d8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d024      	beq.n	8000dde <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000d9c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000d9e:	69bb      	ldr	r3, [r7, #24]
 8000da0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d003      	beq.n	8000db0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8000da8:	6878      	ldr	r0, [r7, #4]
 8000daa:	f000 f941 	bl	8001030 <HAL_CAN_TxMailbox2CompleteCallback>
 8000dae:	e016      	b.n	8000dde <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8000db0:	69bb      	ldr	r3, [r7, #24]
 8000db2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d004      	beq.n	8000dc4 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8000dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000dc0:	627b      	str	r3, [r7, #36]	; 0x24
 8000dc2:	e00c      	b.n	8000dde <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8000dc4:	69bb      	ldr	r3, [r7, #24]
 8000dc6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d004      	beq.n	8000dd8 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8000dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dd4:	627b      	str	r3, [r7, #36]	; 0x24
 8000dd6:	e002      	b.n	8000dde <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8000dd8:	6878      	ldr	r0, [r7, #4]
 8000dda:	f000 f944 	bl	8001066 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8000dde:	6a3b      	ldr	r3, [r7, #32]
 8000de0:	f003 0308 	and.w	r3, r3, #8
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d00c      	beq.n	8000e02 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	f003 0310 	and.w	r3, r3, #16
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d007      	beq.n	8000e02 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8000df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000df4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000df8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	2210      	movs	r2, #16
 8000e00:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8000e02:	6a3b      	ldr	r3, [r7, #32]
 8000e04:	f003 0304 	and.w	r3, r3, #4
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d00b      	beq.n	8000e24 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	f003 0308 	and.w	r3, r3, #8
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d006      	beq.n	8000e24 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	2208      	movs	r2, #8
 8000e1c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8000e1e:	6878      	ldr	r0, [r7, #4]
 8000e20:	f000 f933 	bl	800108a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8000e24:	6a3b      	ldr	r3, [r7, #32]
 8000e26:	f003 0302 	and.w	r3, r3, #2
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d009      	beq.n	8000e42 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	68db      	ldr	r3, [r3, #12]
 8000e34:	f003 0303 	and.w	r3, r3, #3
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d002      	beq.n	8000e42 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8000e3c:	6878      	ldr	r0, [r7, #4]
 8000e3e:	f000 f91b 	bl	8001078 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8000e42:	6a3b      	ldr	r3, [r7, #32]
 8000e44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d00c      	beq.n	8000e66 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8000e4c:	693b      	ldr	r3, [r7, #16]
 8000e4e:	f003 0310 	and.w	r3, r3, #16
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d007      	beq.n	8000e66 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8000e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e58:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e5c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	2210      	movs	r2, #16
 8000e64:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8000e66:	6a3b      	ldr	r3, [r7, #32]
 8000e68:	f003 0320 	and.w	r3, r3, #32
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d00b      	beq.n	8000e88 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8000e70:	693b      	ldr	r3, [r7, #16]
 8000e72:	f003 0308 	and.w	r3, r3, #8
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d006      	beq.n	8000e88 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	2208      	movs	r2, #8
 8000e80:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8000e82:	6878      	ldr	r0, [r7, #4]
 8000e84:	f000 f913 	bl	80010ae <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8000e88:	6a3b      	ldr	r3, [r7, #32]
 8000e8a:	f003 0310 	and.w	r3, r3, #16
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d009      	beq.n	8000ea6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	691b      	ldr	r3, [r3, #16]
 8000e98:	f003 0303 	and.w	r3, r3, #3
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d002      	beq.n	8000ea6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8000ea0:	6878      	ldr	r0, [r7, #4]
 8000ea2:	f000 f8fb 	bl	800109c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8000ea6:	6a3b      	ldr	r3, [r7, #32]
 8000ea8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d00b      	beq.n	8000ec8 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8000eb0:	69fb      	ldr	r3, [r7, #28]
 8000eb2:	f003 0310 	and.w	r3, r3, #16
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d006      	beq.n	8000ec8 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	2210      	movs	r2, #16
 8000ec0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8000ec2:	6878      	ldr	r0, [r7, #4]
 8000ec4:	f000 f8fc 	bl	80010c0 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8000ec8:	6a3b      	ldr	r3, [r7, #32]
 8000eca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d00b      	beq.n	8000eea <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	f003 0308 	and.w	r3, r3, #8
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d006      	beq.n	8000eea <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	2208      	movs	r2, #8
 8000ee2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	f000 f8f4 	bl	80010d2 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8000eea:	6a3b      	ldr	r3, [r7, #32]
 8000eec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d07b      	beq.n	8000fec <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8000ef4:	69fb      	ldr	r3, [r7, #28]
 8000ef6:	f003 0304 	and.w	r3, r3, #4
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d072      	beq.n	8000fe4 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000efe:	6a3b      	ldr	r3, [r7, #32]
 8000f00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d008      	beq.n	8000f1a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d003      	beq.n	8000f1a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8000f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f14:	f043 0301 	orr.w	r3, r3, #1
 8000f18:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000f1a:	6a3b      	ldr	r3, [r7, #32]
 8000f1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d008      	beq.n	8000f36 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d003      	beq.n	8000f36 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8000f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f30:	f043 0302 	orr.w	r3, r3, #2
 8000f34:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000f36:	6a3b      	ldr	r3, [r7, #32]
 8000f38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d008      	beq.n	8000f52 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d003      	beq.n	8000f52 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8000f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f4c:	f043 0304 	orr.w	r3, r3, #4
 8000f50:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000f52:	6a3b      	ldr	r3, [r7, #32]
 8000f54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d043      	beq.n	8000fe4 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d03e      	beq.n	8000fe4 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8000f6c:	2b60      	cmp	r3, #96	; 0x60
 8000f6e:	d02b      	beq.n	8000fc8 <HAL_CAN_IRQHandler+0x32a>
 8000f70:	2b60      	cmp	r3, #96	; 0x60
 8000f72:	d82e      	bhi.n	8000fd2 <HAL_CAN_IRQHandler+0x334>
 8000f74:	2b50      	cmp	r3, #80	; 0x50
 8000f76:	d022      	beq.n	8000fbe <HAL_CAN_IRQHandler+0x320>
 8000f78:	2b50      	cmp	r3, #80	; 0x50
 8000f7a:	d82a      	bhi.n	8000fd2 <HAL_CAN_IRQHandler+0x334>
 8000f7c:	2b40      	cmp	r3, #64	; 0x40
 8000f7e:	d019      	beq.n	8000fb4 <HAL_CAN_IRQHandler+0x316>
 8000f80:	2b40      	cmp	r3, #64	; 0x40
 8000f82:	d826      	bhi.n	8000fd2 <HAL_CAN_IRQHandler+0x334>
 8000f84:	2b30      	cmp	r3, #48	; 0x30
 8000f86:	d010      	beq.n	8000faa <HAL_CAN_IRQHandler+0x30c>
 8000f88:	2b30      	cmp	r3, #48	; 0x30
 8000f8a:	d822      	bhi.n	8000fd2 <HAL_CAN_IRQHandler+0x334>
 8000f8c:	2b10      	cmp	r3, #16
 8000f8e:	d002      	beq.n	8000f96 <HAL_CAN_IRQHandler+0x2f8>
 8000f90:	2b20      	cmp	r3, #32
 8000f92:	d005      	beq.n	8000fa0 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8000f94:	e01d      	b.n	8000fd2 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8000f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f98:	f043 0308 	orr.w	r3, r3, #8
 8000f9c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000f9e:	e019      	b.n	8000fd4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8000fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa2:	f043 0310 	orr.w	r3, r3, #16
 8000fa6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000fa8:	e014      	b.n	8000fd4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8000faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fac:	f043 0320 	orr.w	r3, r3, #32
 8000fb0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000fb2:	e00f      	b.n	8000fd4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8000fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fba:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000fbc:	e00a      	b.n	8000fd4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8000fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fc4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000fc6:	e005      	b.n	8000fd4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8000fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fce:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000fd0:	e000      	b.n	8000fd4 <HAL_CAN_IRQHandler+0x336>
            break;
 8000fd2:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	699a      	ldr	r2, [r3, #24]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000fe2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	2204      	movs	r2, #4
 8000fea:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8000fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d008      	beq.n	8001004 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff8:	431a      	orrs	r2, r3
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8000ffe:	6878      	ldr	r0, [r7, #4]
 8001000:	f000 f870 	bl	80010e4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001004:	bf00      	nop
 8001006:	3728      	adds	r7, #40	; 0x28
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}

0800100c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001014:	bf00      	nop
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	bc80      	pop	{r7}
 800101c:	4770      	bx	lr

0800101e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800101e:	b480      	push	{r7}
 8001020:	b083      	sub	sp, #12
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001026:	bf00      	nop
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	bc80      	pop	{r7}
 800102e:	4770      	bx	lr

08001030 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001038:	bf00      	nop
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	bc80      	pop	{r7}
 8001040:	4770      	bx	lr

08001042 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001042:	b480      	push	{r7}
 8001044:	b083      	sub	sp, #12
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800104a:	bf00      	nop
 800104c:	370c      	adds	r7, #12
 800104e:	46bd      	mov	sp, r7
 8001050:	bc80      	pop	{r7}
 8001052:	4770      	bx	lr

08001054 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800105c:	bf00      	nop
 800105e:	370c      	adds	r7, #12
 8001060:	46bd      	mov	sp, r7
 8001062:	bc80      	pop	{r7}
 8001064:	4770      	bx	lr

08001066 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001066:	b480      	push	{r7}
 8001068:	b083      	sub	sp, #12
 800106a:	af00      	add	r7, sp, #0
 800106c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800106e:	bf00      	nop
 8001070:	370c      	adds	r7, #12
 8001072:	46bd      	mov	sp, r7
 8001074:	bc80      	pop	{r7}
 8001076:	4770      	bx	lr

08001078 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001080:	bf00      	nop
 8001082:	370c      	adds	r7, #12
 8001084:	46bd      	mov	sp, r7
 8001086:	bc80      	pop	{r7}
 8001088:	4770      	bx	lr

0800108a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800108a:	b480      	push	{r7}
 800108c:	b083      	sub	sp, #12
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001092:	bf00      	nop
 8001094:	370c      	adds	r7, #12
 8001096:	46bd      	mov	sp, r7
 8001098:	bc80      	pop	{r7}
 800109a:	4770      	bx	lr

0800109c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80010a4:	bf00      	nop
 80010a6:	370c      	adds	r7, #12
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bc80      	pop	{r7}
 80010ac:	4770      	bx	lr

080010ae <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80010ae:	b480      	push	{r7}
 80010b0:	b083      	sub	sp, #12
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80010b6:	bf00      	nop
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bc80      	pop	{r7}
 80010be:	4770      	bx	lr

080010c0 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80010c8:	bf00      	nop
 80010ca:	370c      	adds	r7, #12
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bc80      	pop	{r7}
 80010d0:	4770      	bx	lr

080010d2 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80010d2:	b480      	push	{r7}
 80010d4:	b083      	sub	sp, #12
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80010da:	bf00      	nop
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	bc80      	pop	{r7}
 80010e2:	4770      	bx	lr

080010e4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80010ec:	bf00      	nop
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bc80      	pop	{r7}
 80010f4:	4770      	bx	lr
	...

080010f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b085      	sub	sp, #20
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	f003 0307 	and.w	r3, r3, #7
 8001106:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001108:	4b0c      	ldr	r3, [pc, #48]	; (800113c <__NVIC_SetPriorityGrouping+0x44>)
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800110e:	68ba      	ldr	r2, [r7, #8]
 8001110:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001114:	4013      	ands	r3, r2
 8001116:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001120:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001124:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001128:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800112a:	4a04      	ldr	r2, [pc, #16]	; (800113c <__NVIC_SetPriorityGrouping+0x44>)
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	60d3      	str	r3, [r2, #12]
}
 8001130:	bf00      	nop
 8001132:	3714      	adds	r7, #20
 8001134:	46bd      	mov	sp, r7
 8001136:	bc80      	pop	{r7}
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	e000ed00 	.word	0xe000ed00

08001140 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001144:	4b04      	ldr	r3, [pc, #16]	; (8001158 <__NVIC_GetPriorityGrouping+0x18>)
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	0a1b      	lsrs	r3, r3, #8
 800114a:	f003 0307 	and.w	r3, r3, #7
}
 800114e:	4618      	mov	r0, r3
 8001150:	46bd      	mov	sp, r7
 8001152:	bc80      	pop	{r7}
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	e000ed00 	.word	0xe000ed00

0800115c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	4603      	mov	r3, r0
 8001164:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116a:	2b00      	cmp	r3, #0
 800116c:	db0b      	blt.n	8001186 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800116e:	79fb      	ldrb	r3, [r7, #7]
 8001170:	f003 021f 	and.w	r2, r3, #31
 8001174:	4906      	ldr	r1, [pc, #24]	; (8001190 <__NVIC_EnableIRQ+0x34>)
 8001176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117a:	095b      	lsrs	r3, r3, #5
 800117c:	2001      	movs	r0, #1
 800117e:	fa00 f202 	lsl.w	r2, r0, r2
 8001182:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001186:	bf00      	nop
 8001188:	370c      	adds	r7, #12
 800118a:	46bd      	mov	sp, r7
 800118c:	bc80      	pop	{r7}
 800118e:	4770      	bx	lr
 8001190:	e000e100 	.word	0xe000e100

08001194 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	4603      	mov	r3, r0
 800119c:	6039      	str	r1, [r7, #0]
 800119e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	db0a      	blt.n	80011be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	b2da      	uxtb	r2, r3
 80011ac:	490c      	ldr	r1, [pc, #48]	; (80011e0 <__NVIC_SetPriority+0x4c>)
 80011ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b2:	0112      	lsls	r2, r2, #4
 80011b4:	b2d2      	uxtb	r2, r2
 80011b6:	440b      	add	r3, r1
 80011b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011bc:	e00a      	b.n	80011d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	b2da      	uxtb	r2, r3
 80011c2:	4908      	ldr	r1, [pc, #32]	; (80011e4 <__NVIC_SetPriority+0x50>)
 80011c4:	79fb      	ldrb	r3, [r7, #7]
 80011c6:	f003 030f 	and.w	r3, r3, #15
 80011ca:	3b04      	subs	r3, #4
 80011cc:	0112      	lsls	r2, r2, #4
 80011ce:	b2d2      	uxtb	r2, r2
 80011d0:	440b      	add	r3, r1
 80011d2:	761a      	strb	r2, [r3, #24]
}
 80011d4:	bf00      	nop
 80011d6:	370c      	adds	r7, #12
 80011d8:	46bd      	mov	sp, r7
 80011da:	bc80      	pop	{r7}
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	e000e100 	.word	0xe000e100
 80011e4:	e000ed00 	.word	0xe000ed00

080011e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b089      	sub	sp, #36	; 0x24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	60f8      	str	r0, [r7, #12]
 80011f0:	60b9      	str	r1, [r7, #8]
 80011f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	f003 0307 	and.w	r3, r3, #7
 80011fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	f1c3 0307 	rsb	r3, r3, #7
 8001202:	2b04      	cmp	r3, #4
 8001204:	bf28      	it	cs
 8001206:	2304      	movcs	r3, #4
 8001208:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	3304      	adds	r3, #4
 800120e:	2b06      	cmp	r3, #6
 8001210:	d902      	bls.n	8001218 <NVIC_EncodePriority+0x30>
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	3b03      	subs	r3, #3
 8001216:	e000      	b.n	800121a <NVIC_EncodePriority+0x32>
 8001218:	2300      	movs	r3, #0
 800121a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800121c:	f04f 32ff 	mov.w	r2, #4294967295
 8001220:	69bb      	ldr	r3, [r7, #24]
 8001222:	fa02 f303 	lsl.w	r3, r2, r3
 8001226:	43da      	mvns	r2, r3
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	401a      	ands	r2, r3
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001230:	f04f 31ff 	mov.w	r1, #4294967295
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	fa01 f303 	lsl.w	r3, r1, r3
 800123a:	43d9      	mvns	r1, r3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001240:	4313      	orrs	r3, r2
         );
}
 8001242:	4618      	mov	r0, r3
 8001244:	3724      	adds	r7, #36	; 0x24
 8001246:	46bd      	mov	sp, r7
 8001248:	bc80      	pop	{r7}
 800124a:	4770      	bx	lr

0800124c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	3b01      	subs	r3, #1
 8001258:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800125c:	d301      	bcc.n	8001262 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800125e:	2301      	movs	r3, #1
 8001260:	e00f      	b.n	8001282 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001262:	4a0a      	ldr	r2, [pc, #40]	; (800128c <SysTick_Config+0x40>)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	3b01      	subs	r3, #1
 8001268:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800126a:	210f      	movs	r1, #15
 800126c:	f04f 30ff 	mov.w	r0, #4294967295
 8001270:	f7ff ff90 	bl	8001194 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001274:	4b05      	ldr	r3, [pc, #20]	; (800128c <SysTick_Config+0x40>)
 8001276:	2200      	movs	r2, #0
 8001278:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800127a:	4b04      	ldr	r3, [pc, #16]	; (800128c <SysTick_Config+0x40>)
 800127c:	2207      	movs	r2, #7
 800127e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001280:	2300      	movs	r3, #0
}
 8001282:	4618      	mov	r0, r3
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	e000e010 	.word	0xe000e010

08001290 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f7ff ff2d 	bl	80010f8 <__NVIC_SetPriorityGrouping>
}
 800129e:	bf00      	nop
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012a6:	b580      	push	{r7, lr}
 80012a8:	b086      	sub	sp, #24
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	4603      	mov	r3, r0
 80012ae:	60b9      	str	r1, [r7, #8]
 80012b0:	607a      	str	r2, [r7, #4]
 80012b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012b4:	2300      	movs	r3, #0
 80012b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012b8:	f7ff ff42 	bl	8001140 <__NVIC_GetPriorityGrouping>
 80012bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012be:	687a      	ldr	r2, [r7, #4]
 80012c0:	68b9      	ldr	r1, [r7, #8]
 80012c2:	6978      	ldr	r0, [r7, #20]
 80012c4:	f7ff ff90 	bl	80011e8 <NVIC_EncodePriority>
 80012c8:	4602      	mov	r2, r0
 80012ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ce:	4611      	mov	r1, r2
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff ff5f 	bl	8001194 <__NVIC_SetPriority>
}
 80012d6:	bf00      	nop
 80012d8:	3718      	adds	r7, #24
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}

080012de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012de:	b580      	push	{r7, lr}
 80012e0:	b082      	sub	sp, #8
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	4603      	mov	r3, r0
 80012e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff ff35 	bl	800115c <__NVIC_EnableIRQ>
}
 80012f2:	bf00      	nop
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}

080012fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012fa:	b580      	push	{r7, lr}
 80012fc:	b082      	sub	sp, #8
 80012fe:	af00      	add	r7, sp, #0
 8001300:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f7ff ffa2 	bl	800124c <SysTick_Config>
 8001308:	4603      	mov	r3, r0
}
 800130a:	4618      	mov	r0, r3
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
	...

08001314 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001314:	b480      	push	{r7}
 8001316:	b08b      	sub	sp, #44	; 0x2c
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800131e:	2300      	movs	r3, #0
 8001320:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001322:	2300      	movs	r3, #0
 8001324:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001326:	e169      	b.n	80015fc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001328:	2201      	movs	r2, #1
 800132a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800132c:	fa02 f303 	lsl.w	r3, r2, r3
 8001330:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	69fa      	ldr	r2, [r7, #28]
 8001338:	4013      	ands	r3, r2
 800133a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	429a      	cmp	r2, r3
 8001342:	f040 8158 	bne.w	80015f6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	4a9a      	ldr	r2, [pc, #616]	; (80015b4 <HAL_GPIO_Init+0x2a0>)
 800134c:	4293      	cmp	r3, r2
 800134e:	d05e      	beq.n	800140e <HAL_GPIO_Init+0xfa>
 8001350:	4a98      	ldr	r2, [pc, #608]	; (80015b4 <HAL_GPIO_Init+0x2a0>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d875      	bhi.n	8001442 <HAL_GPIO_Init+0x12e>
 8001356:	4a98      	ldr	r2, [pc, #608]	; (80015b8 <HAL_GPIO_Init+0x2a4>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d058      	beq.n	800140e <HAL_GPIO_Init+0xfa>
 800135c:	4a96      	ldr	r2, [pc, #600]	; (80015b8 <HAL_GPIO_Init+0x2a4>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d86f      	bhi.n	8001442 <HAL_GPIO_Init+0x12e>
 8001362:	4a96      	ldr	r2, [pc, #600]	; (80015bc <HAL_GPIO_Init+0x2a8>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d052      	beq.n	800140e <HAL_GPIO_Init+0xfa>
 8001368:	4a94      	ldr	r2, [pc, #592]	; (80015bc <HAL_GPIO_Init+0x2a8>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d869      	bhi.n	8001442 <HAL_GPIO_Init+0x12e>
 800136e:	4a94      	ldr	r2, [pc, #592]	; (80015c0 <HAL_GPIO_Init+0x2ac>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d04c      	beq.n	800140e <HAL_GPIO_Init+0xfa>
 8001374:	4a92      	ldr	r2, [pc, #584]	; (80015c0 <HAL_GPIO_Init+0x2ac>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d863      	bhi.n	8001442 <HAL_GPIO_Init+0x12e>
 800137a:	4a92      	ldr	r2, [pc, #584]	; (80015c4 <HAL_GPIO_Init+0x2b0>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d046      	beq.n	800140e <HAL_GPIO_Init+0xfa>
 8001380:	4a90      	ldr	r2, [pc, #576]	; (80015c4 <HAL_GPIO_Init+0x2b0>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d85d      	bhi.n	8001442 <HAL_GPIO_Init+0x12e>
 8001386:	2b12      	cmp	r3, #18
 8001388:	d82a      	bhi.n	80013e0 <HAL_GPIO_Init+0xcc>
 800138a:	2b12      	cmp	r3, #18
 800138c:	d859      	bhi.n	8001442 <HAL_GPIO_Init+0x12e>
 800138e:	a201      	add	r2, pc, #4	; (adr r2, 8001394 <HAL_GPIO_Init+0x80>)
 8001390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001394:	0800140f 	.word	0x0800140f
 8001398:	080013e9 	.word	0x080013e9
 800139c:	080013fb 	.word	0x080013fb
 80013a0:	0800143d 	.word	0x0800143d
 80013a4:	08001443 	.word	0x08001443
 80013a8:	08001443 	.word	0x08001443
 80013ac:	08001443 	.word	0x08001443
 80013b0:	08001443 	.word	0x08001443
 80013b4:	08001443 	.word	0x08001443
 80013b8:	08001443 	.word	0x08001443
 80013bc:	08001443 	.word	0x08001443
 80013c0:	08001443 	.word	0x08001443
 80013c4:	08001443 	.word	0x08001443
 80013c8:	08001443 	.word	0x08001443
 80013cc:	08001443 	.word	0x08001443
 80013d0:	08001443 	.word	0x08001443
 80013d4:	08001443 	.word	0x08001443
 80013d8:	080013f1 	.word	0x080013f1
 80013dc:	08001405 	.word	0x08001405
 80013e0:	4a79      	ldr	r2, [pc, #484]	; (80015c8 <HAL_GPIO_Init+0x2b4>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d013      	beq.n	800140e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80013e6:	e02c      	b.n	8001442 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	68db      	ldr	r3, [r3, #12]
 80013ec:	623b      	str	r3, [r7, #32]
          break;
 80013ee:	e029      	b.n	8001444 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	3304      	adds	r3, #4
 80013f6:	623b      	str	r3, [r7, #32]
          break;
 80013f8:	e024      	b.n	8001444 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	68db      	ldr	r3, [r3, #12]
 80013fe:	3308      	adds	r3, #8
 8001400:	623b      	str	r3, [r7, #32]
          break;
 8001402:	e01f      	b.n	8001444 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	330c      	adds	r3, #12
 800140a:	623b      	str	r3, [r7, #32]
          break;
 800140c:	e01a      	b.n	8001444 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d102      	bne.n	800141c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001416:	2304      	movs	r3, #4
 8001418:	623b      	str	r3, [r7, #32]
          break;
 800141a:	e013      	b.n	8001444 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	2b01      	cmp	r3, #1
 8001422:	d105      	bne.n	8001430 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001424:	2308      	movs	r3, #8
 8001426:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	69fa      	ldr	r2, [r7, #28]
 800142c:	611a      	str	r2, [r3, #16]
          break;
 800142e:	e009      	b.n	8001444 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001430:	2308      	movs	r3, #8
 8001432:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	69fa      	ldr	r2, [r7, #28]
 8001438:	615a      	str	r2, [r3, #20]
          break;
 800143a:	e003      	b.n	8001444 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800143c:	2300      	movs	r3, #0
 800143e:	623b      	str	r3, [r7, #32]
          break;
 8001440:	e000      	b.n	8001444 <HAL_GPIO_Init+0x130>
          break;
 8001442:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001444:	69bb      	ldr	r3, [r7, #24]
 8001446:	2bff      	cmp	r3, #255	; 0xff
 8001448:	d801      	bhi.n	800144e <HAL_GPIO_Init+0x13a>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	e001      	b.n	8001452 <HAL_GPIO_Init+0x13e>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	3304      	adds	r3, #4
 8001452:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	2bff      	cmp	r3, #255	; 0xff
 8001458:	d802      	bhi.n	8001460 <HAL_GPIO_Init+0x14c>
 800145a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	e002      	b.n	8001466 <HAL_GPIO_Init+0x152>
 8001460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001462:	3b08      	subs	r3, #8
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	210f      	movs	r1, #15
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	fa01 f303 	lsl.w	r3, r1, r3
 8001474:	43db      	mvns	r3, r3
 8001476:	401a      	ands	r2, r3
 8001478:	6a39      	ldr	r1, [r7, #32]
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	fa01 f303 	lsl.w	r3, r1, r3
 8001480:	431a      	orrs	r2, r3
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800148e:	2b00      	cmp	r3, #0
 8001490:	f000 80b1 	beq.w	80015f6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001494:	4b4d      	ldr	r3, [pc, #308]	; (80015cc <HAL_GPIO_Init+0x2b8>)
 8001496:	699b      	ldr	r3, [r3, #24]
 8001498:	4a4c      	ldr	r2, [pc, #304]	; (80015cc <HAL_GPIO_Init+0x2b8>)
 800149a:	f043 0301 	orr.w	r3, r3, #1
 800149e:	6193      	str	r3, [r2, #24]
 80014a0:	4b4a      	ldr	r3, [pc, #296]	; (80015cc <HAL_GPIO_Init+0x2b8>)
 80014a2:	699b      	ldr	r3, [r3, #24]
 80014a4:	f003 0301 	and.w	r3, r3, #1
 80014a8:	60bb      	str	r3, [r7, #8]
 80014aa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80014ac:	4a48      	ldr	r2, [pc, #288]	; (80015d0 <HAL_GPIO_Init+0x2bc>)
 80014ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b0:	089b      	lsrs	r3, r3, #2
 80014b2:	3302      	adds	r3, #2
 80014b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014b8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80014ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014bc:	f003 0303 	and.w	r3, r3, #3
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	220f      	movs	r2, #15
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	43db      	mvns	r3, r3
 80014ca:	68fa      	ldr	r2, [r7, #12]
 80014cc:	4013      	ands	r3, r2
 80014ce:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	4a40      	ldr	r2, [pc, #256]	; (80015d4 <HAL_GPIO_Init+0x2c0>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d013      	beq.n	8001500 <HAL_GPIO_Init+0x1ec>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	4a3f      	ldr	r2, [pc, #252]	; (80015d8 <HAL_GPIO_Init+0x2c4>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d00d      	beq.n	80014fc <HAL_GPIO_Init+0x1e8>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	4a3e      	ldr	r2, [pc, #248]	; (80015dc <HAL_GPIO_Init+0x2c8>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d007      	beq.n	80014f8 <HAL_GPIO_Init+0x1e4>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	4a3d      	ldr	r2, [pc, #244]	; (80015e0 <HAL_GPIO_Init+0x2cc>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d101      	bne.n	80014f4 <HAL_GPIO_Init+0x1e0>
 80014f0:	2303      	movs	r3, #3
 80014f2:	e006      	b.n	8001502 <HAL_GPIO_Init+0x1ee>
 80014f4:	2304      	movs	r3, #4
 80014f6:	e004      	b.n	8001502 <HAL_GPIO_Init+0x1ee>
 80014f8:	2302      	movs	r3, #2
 80014fa:	e002      	b.n	8001502 <HAL_GPIO_Init+0x1ee>
 80014fc:	2301      	movs	r3, #1
 80014fe:	e000      	b.n	8001502 <HAL_GPIO_Init+0x1ee>
 8001500:	2300      	movs	r3, #0
 8001502:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001504:	f002 0203 	and.w	r2, r2, #3
 8001508:	0092      	lsls	r2, r2, #2
 800150a:	4093      	lsls	r3, r2
 800150c:	68fa      	ldr	r2, [r7, #12]
 800150e:	4313      	orrs	r3, r2
 8001510:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001512:	492f      	ldr	r1, [pc, #188]	; (80015d0 <HAL_GPIO_Init+0x2bc>)
 8001514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001516:	089b      	lsrs	r3, r3, #2
 8001518:	3302      	adds	r3, #2
 800151a:	68fa      	ldr	r2, [r7, #12]
 800151c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001528:	2b00      	cmp	r3, #0
 800152a:	d006      	beq.n	800153a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800152c:	4b2d      	ldr	r3, [pc, #180]	; (80015e4 <HAL_GPIO_Init+0x2d0>)
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	492c      	ldr	r1, [pc, #176]	; (80015e4 <HAL_GPIO_Init+0x2d0>)
 8001532:	69bb      	ldr	r3, [r7, #24]
 8001534:	4313      	orrs	r3, r2
 8001536:	600b      	str	r3, [r1, #0]
 8001538:	e006      	b.n	8001548 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800153a:	4b2a      	ldr	r3, [pc, #168]	; (80015e4 <HAL_GPIO_Init+0x2d0>)
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	69bb      	ldr	r3, [r7, #24]
 8001540:	43db      	mvns	r3, r3
 8001542:	4928      	ldr	r1, [pc, #160]	; (80015e4 <HAL_GPIO_Init+0x2d0>)
 8001544:	4013      	ands	r3, r2
 8001546:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001550:	2b00      	cmp	r3, #0
 8001552:	d006      	beq.n	8001562 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001554:	4b23      	ldr	r3, [pc, #140]	; (80015e4 <HAL_GPIO_Init+0x2d0>)
 8001556:	685a      	ldr	r2, [r3, #4]
 8001558:	4922      	ldr	r1, [pc, #136]	; (80015e4 <HAL_GPIO_Init+0x2d0>)
 800155a:	69bb      	ldr	r3, [r7, #24]
 800155c:	4313      	orrs	r3, r2
 800155e:	604b      	str	r3, [r1, #4]
 8001560:	e006      	b.n	8001570 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001562:	4b20      	ldr	r3, [pc, #128]	; (80015e4 <HAL_GPIO_Init+0x2d0>)
 8001564:	685a      	ldr	r2, [r3, #4]
 8001566:	69bb      	ldr	r3, [r7, #24]
 8001568:	43db      	mvns	r3, r3
 800156a:	491e      	ldr	r1, [pc, #120]	; (80015e4 <HAL_GPIO_Init+0x2d0>)
 800156c:	4013      	ands	r3, r2
 800156e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001578:	2b00      	cmp	r3, #0
 800157a:	d006      	beq.n	800158a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800157c:	4b19      	ldr	r3, [pc, #100]	; (80015e4 <HAL_GPIO_Init+0x2d0>)
 800157e:	689a      	ldr	r2, [r3, #8]
 8001580:	4918      	ldr	r1, [pc, #96]	; (80015e4 <HAL_GPIO_Init+0x2d0>)
 8001582:	69bb      	ldr	r3, [r7, #24]
 8001584:	4313      	orrs	r3, r2
 8001586:	608b      	str	r3, [r1, #8]
 8001588:	e006      	b.n	8001598 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800158a:	4b16      	ldr	r3, [pc, #88]	; (80015e4 <HAL_GPIO_Init+0x2d0>)
 800158c:	689a      	ldr	r2, [r3, #8]
 800158e:	69bb      	ldr	r3, [r7, #24]
 8001590:	43db      	mvns	r3, r3
 8001592:	4914      	ldr	r1, [pc, #80]	; (80015e4 <HAL_GPIO_Init+0x2d0>)
 8001594:	4013      	ands	r3, r2
 8001596:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d021      	beq.n	80015e8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80015a4:	4b0f      	ldr	r3, [pc, #60]	; (80015e4 <HAL_GPIO_Init+0x2d0>)
 80015a6:	68da      	ldr	r2, [r3, #12]
 80015a8:	490e      	ldr	r1, [pc, #56]	; (80015e4 <HAL_GPIO_Init+0x2d0>)
 80015aa:	69bb      	ldr	r3, [r7, #24]
 80015ac:	4313      	orrs	r3, r2
 80015ae:	60cb      	str	r3, [r1, #12]
 80015b0:	e021      	b.n	80015f6 <HAL_GPIO_Init+0x2e2>
 80015b2:	bf00      	nop
 80015b4:	10320000 	.word	0x10320000
 80015b8:	10310000 	.word	0x10310000
 80015bc:	10220000 	.word	0x10220000
 80015c0:	10210000 	.word	0x10210000
 80015c4:	10120000 	.word	0x10120000
 80015c8:	10110000 	.word	0x10110000
 80015cc:	40021000 	.word	0x40021000
 80015d0:	40010000 	.word	0x40010000
 80015d4:	40010800 	.word	0x40010800
 80015d8:	40010c00 	.word	0x40010c00
 80015dc:	40011000 	.word	0x40011000
 80015e0:	40011400 	.word	0x40011400
 80015e4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80015e8:	4b0b      	ldr	r3, [pc, #44]	; (8001618 <HAL_GPIO_Init+0x304>)
 80015ea:	68da      	ldr	r2, [r3, #12]
 80015ec:	69bb      	ldr	r3, [r7, #24]
 80015ee:	43db      	mvns	r3, r3
 80015f0:	4909      	ldr	r1, [pc, #36]	; (8001618 <HAL_GPIO_Init+0x304>)
 80015f2:	4013      	ands	r3, r2
 80015f4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80015f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f8:	3301      	adds	r3, #1
 80015fa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001602:	fa22 f303 	lsr.w	r3, r2, r3
 8001606:	2b00      	cmp	r3, #0
 8001608:	f47f ae8e 	bne.w	8001328 <HAL_GPIO_Init+0x14>
  }
}
 800160c:	bf00      	nop
 800160e:	bf00      	nop
 8001610:	372c      	adds	r7, #44	; 0x2c
 8001612:	46bd      	mov	sp, r7
 8001614:	bc80      	pop	{r7}
 8001616:	4770      	bx	lr
 8001618:	40010400 	.word	0x40010400

0800161c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b086      	sub	sp, #24
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d101      	bne.n	800162e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e272      	b.n	8001b14 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 0301 	and.w	r3, r3, #1
 8001636:	2b00      	cmp	r3, #0
 8001638:	f000 8087 	beq.w	800174a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800163c:	4b92      	ldr	r3, [pc, #584]	; (8001888 <HAL_RCC_OscConfig+0x26c>)
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f003 030c 	and.w	r3, r3, #12
 8001644:	2b04      	cmp	r3, #4
 8001646:	d00c      	beq.n	8001662 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001648:	4b8f      	ldr	r3, [pc, #572]	; (8001888 <HAL_RCC_OscConfig+0x26c>)
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f003 030c 	and.w	r3, r3, #12
 8001650:	2b08      	cmp	r3, #8
 8001652:	d112      	bne.n	800167a <HAL_RCC_OscConfig+0x5e>
 8001654:	4b8c      	ldr	r3, [pc, #560]	; (8001888 <HAL_RCC_OscConfig+0x26c>)
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800165c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001660:	d10b      	bne.n	800167a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001662:	4b89      	ldr	r3, [pc, #548]	; (8001888 <HAL_RCC_OscConfig+0x26c>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d06c      	beq.n	8001748 <HAL_RCC_OscConfig+0x12c>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d168      	bne.n	8001748 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e24c      	b.n	8001b14 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001682:	d106      	bne.n	8001692 <HAL_RCC_OscConfig+0x76>
 8001684:	4b80      	ldr	r3, [pc, #512]	; (8001888 <HAL_RCC_OscConfig+0x26c>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a7f      	ldr	r2, [pc, #508]	; (8001888 <HAL_RCC_OscConfig+0x26c>)
 800168a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800168e:	6013      	str	r3, [r2, #0]
 8001690:	e02e      	b.n	80016f0 <HAL_RCC_OscConfig+0xd4>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d10c      	bne.n	80016b4 <HAL_RCC_OscConfig+0x98>
 800169a:	4b7b      	ldr	r3, [pc, #492]	; (8001888 <HAL_RCC_OscConfig+0x26c>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a7a      	ldr	r2, [pc, #488]	; (8001888 <HAL_RCC_OscConfig+0x26c>)
 80016a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016a4:	6013      	str	r3, [r2, #0]
 80016a6:	4b78      	ldr	r3, [pc, #480]	; (8001888 <HAL_RCC_OscConfig+0x26c>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a77      	ldr	r2, [pc, #476]	; (8001888 <HAL_RCC_OscConfig+0x26c>)
 80016ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016b0:	6013      	str	r3, [r2, #0]
 80016b2:	e01d      	b.n	80016f0 <HAL_RCC_OscConfig+0xd4>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016bc:	d10c      	bne.n	80016d8 <HAL_RCC_OscConfig+0xbc>
 80016be:	4b72      	ldr	r3, [pc, #456]	; (8001888 <HAL_RCC_OscConfig+0x26c>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a71      	ldr	r2, [pc, #452]	; (8001888 <HAL_RCC_OscConfig+0x26c>)
 80016c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016c8:	6013      	str	r3, [r2, #0]
 80016ca:	4b6f      	ldr	r3, [pc, #444]	; (8001888 <HAL_RCC_OscConfig+0x26c>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a6e      	ldr	r2, [pc, #440]	; (8001888 <HAL_RCC_OscConfig+0x26c>)
 80016d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016d4:	6013      	str	r3, [r2, #0]
 80016d6:	e00b      	b.n	80016f0 <HAL_RCC_OscConfig+0xd4>
 80016d8:	4b6b      	ldr	r3, [pc, #428]	; (8001888 <HAL_RCC_OscConfig+0x26c>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a6a      	ldr	r2, [pc, #424]	; (8001888 <HAL_RCC_OscConfig+0x26c>)
 80016de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016e2:	6013      	str	r3, [r2, #0]
 80016e4:	4b68      	ldr	r3, [pc, #416]	; (8001888 <HAL_RCC_OscConfig+0x26c>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a67      	ldr	r2, [pc, #412]	; (8001888 <HAL_RCC_OscConfig+0x26c>)
 80016ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016ee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d013      	beq.n	8001720 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f8:	f7ff f88a 	bl	8000810 <HAL_GetTick>
 80016fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016fe:	e008      	b.n	8001712 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001700:	f7ff f886 	bl	8000810 <HAL_GetTick>
 8001704:	4602      	mov	r2, r0
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	2b64      	cmp	r3, #100	; 0x64
 800170c:	d901      	bls.n	8001712 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800170e:	2303      	movs	r3, #3
 8001710:	e200      	b.n	8001b14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001712:	4b5d      	ldr	r3, [pc, #372]	; (8001888 <HAL_RCC_OscConfig+0x26c>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800171a:	2b00      	cmp	r3, #0
 800171c:	d0f0      	beq.n	8001700 <HAL_RCC_OscConfig+0xe4>
 800171e:	e014      	b.n	800174a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001720:	f7ff f876 	bl	8000810 <HAL_GetTick>
 8001724:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001726:	e008      	b.n	800173a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001728:	f7ff f872 	bl	8000810 <HAL_GetTick>
 800172c:	4602      	mov	r2, r0
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	2b64      	cmp	r3, #100	; 0x64
 8001734:	d901      	bls.n	800173a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001736:	2303      	movs	r3, #3
 8001738:	e1ec      	b.n	8001b14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800173a:	4b53      	ldr	r3, [pc, #332]	; (8001888 <HAL_RCC_OscConfig+0x26c>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d1f0      	bne.n	8001728 <HAL_RCC_OscConfig+0x10c>
 8001746:	e000      	b.n	800174a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001748:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 0302 	and.w	r3, r3, #2
 8001752:	2b00      	cmp	r3, #0
 8001754:	d063      	beq.n	800181e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001756:	4b4c      	ldr	r3, [pc, #304]	; (8001888 <HAL_RCC_OscConfig+0x26c>)
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	f003 030c 	and.w	r3, r3, #12
 800175e:	2b00      	cmp	r3, #0
 8001760:	d00b      	beq.n	800177a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001762:	4b49      	ldr	r3, [pc, #292]	; (8001888 <HAL_RCC_OscConfig+0x26c>)
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f003 030c 	and.w	r3, r3, #12
 800176a:	2b08      	cmp	r3, #8
 800176c:	d11c      	bne.n	80017a8 <HAL_RCC_OscConfig+0x18c>
 800176e:	4b46      	ldr	r3, [pc, #280]	; (8001888 <HAL_RCC_OscConfig+0x26c>)
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d116      	bne.n	80017a8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800177a:	4b43      	ldr	r3, [pc, #268]	; (8001888 <HAL_RCC_OscConfig+0x26c>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 0302 	and.w	r3, r3, #2
 8001782:	2b00      	cmp	r3, #0
 8001784:	d005      	beq.n	8001792 <HAL_RCC_OscConfig+0x176>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	691b      	ldr	r3, [r3, #16]
 800178a:	2b01      	cmp	r3, #1
 800178c:	d001      	beq.n	8001792 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e1c0      	b.n	8001b14 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001792:	4b3d      	ldr	r3, [pc, #244]	; (8001888 <HAL_RCC_OscConfig+0x26c>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	695b      	ldr	r3, [r3, #20]
 800179e:	00db      	lsls	r3, r3, #3
 80017a0:	4939      	ldr	r1, [pc, #228]	; (8001888 <HAL_RCC_OscConfig+0x26c>)
 80017a2:	4313      	orrs	r3, r2
 80017a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017a6:	e03a      	b.n	800181e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	691b      	ldr	r3, [r3, #16]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d020      	beq.n	80017f2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017b0:	4b36      	ldr	r3, [pc, #216]	; (800188c <HAL_RCC_OscConfig+0x270>)
 80017b2:	2201      	movs	r2, #1
 80017b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b6:	f7ff f82b 	bl	8000810 <HAL_GetTick>
 80017ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017bc:	e008      	b.n	80017d0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017be:	f7ff f827 	bl	8000810 <HAL_GetTick>
 80017c2:	4602      	mov	r2, r0
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	1ad3      	subs	r3, r2, r3
 80017c8:	2b02      	cmp	r3, #2
 80017ca:	d901      	bls.n	80017d0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80017cc:	2303      	movs	r3, #3
 80017ce:	e1a1      	b.n	8001b14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017d0:	4b2d      	ldr	r3, [pc, #180]	; (8001888 <HAL_RCC_OscConfig+0x26c>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 0302 	and.w	r3, r3, #2
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d0f0      	beq.n	80017be <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017dc:	4b2a      	ldr	r3, [pc, #168]	; (8001888 <HAL_RCC_OscConfig+0x26c>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	695b      	ldr	r3, [r3, #20]
 80017e8:	00db      	lsls	r3, r3, #3
 80017ea:	4927      	ldr	r1, [pc, #156]	; (8001888 <HAL_RCC_OscConfig+0x26c>)
 80017ec:	4313      	orrs	r3, r2
 80017ee:	600b      	str	r3, [r1, #0]
 80017f0:	e015      	b.n	800181e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017f2:	4b26      	ldr	r3, [pc, #152]	; (800188c <HAL_RCC_OscConfig+0x270>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f8:	f7ff f80a 	bl	8000810 <HAL_GetTick>
 80017fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017fe:	e008      	b.n	8001812 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001800:	f7ff f806 	bl	8000810 <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	2b02      	cmp	r3, #2
 800180c:	d901      	bls.n	8001812 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	e180      	b.n	8001b14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001812:	4b1d      	ldr	r3, [pc, #116]	; (8001888 <HAL_RCC_OscConfig+0x26c>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0302 	and.w	r3, r3, #2
 800181a:	2b00      	cmp	r3, #0
 800181c:	d1f0      	bne.n	8001800 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 0308 	and.w	r3, r3, #8
 8001826:	2b00      	cmp	r3, #0
 8001828:	d03a      	beq.n	80018a0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	699b      	ldr	r3, [r3, #24]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d019      	beq.n	8001866 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001832:	4b17      	ldr	r3, [pc, #92]	; (8001890 <HAL_RCC_OscConfig+0x274>)
 8001834:	2201      	movs	r2, #1
 8001836:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001838:	f7fe ffea 	bl	8000810 <HAL_GetTick>
 800183c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800183e:	e008      	b.n	8001852 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001840:	f7fe ffe6 	bl	8000810 <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	2b02      	cmp	r3, #2
 800184c:	d901      	bls.n	8001852 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e160      	b.n	8001b14 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001852:	4b0d      	ldr	r3, [pc, #52]	; (8001888 <HAL_RCC_OscConfig+0x26c>)
 8001854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001856:	f003 0302 	and.w	r3, r3, #2
 800185a:	2b00      	cmp	r3, #0
 800185c:	d0f0      	beq.n	8001840 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800185e:	2001      	movs	r0, #1
 8001860:	f000 fad8 	bl	8001e14 <RCC_Delay>
 8001864:	e01c      	b.n	80018a0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001866:	4b0a      	ldr	r3, [pc, #40]	; (8001890 <HAL_RCC_OscConfig+0x274>)
 8001868:	2200      	movs	r2, #0
 800186a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800186c:	f7fe ffd0 	bl	8000810 <HAL_GetTick>
 8001870:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001872:	e00f      	b.n	8001894 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001874:	f7fe ffcc 	bl	8000810 <HAL_GetTick>
 8001878:	4602      	mov	r2, r0
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	2b02      	cmp	r3, #2
 8001880:	d908      	bls.n	8001894 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e146      	b.n	8001b14 <HAL_RCC_OscConfig+0x4f8>
 8001886:	bf00      	nop
 8001888:	40021000 	.word	0x40021000
 800188c:	42420000 	.word	0x42420000
 8001890:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001894:	4b92      	ldr	r3, [pc, #584]	; (8001ae0 <HAL_RCC_OscConfig+0x4c4>)
 8001896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001898:	f003 0302 	and.w	r3, r3, #2
 800189c:	2b00      	cmp	r3, #0
 800189e:	d1e9      	bne.n	8001874 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 0304 	and.w	r3, r3, #4
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	f000 80a6 	beq.w	80019fa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018ae:	2300      	movs	r3, #0
 80018b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018b2:	4b8b      	ldr	r3, [pc, #556]	; (8001ae0 <HAL_RCC_OscConfig+0x4c4>)
 80018b4:	69db      	ldr	r3, [r3, #28]
 80018b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d10d      	bne.n	80018da <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018be:	4b88      	ldr	r3, [pc, #544]	; (8001ae0 <HAL_RCC_OscConfig+0x4c4>)
 80018c0:	69db      	ldr	r3, [r3, #28]
 80018c2:	4a87      	ldr	r2, [pc, #540]	; (8001ae0 <HAL_RCC_OscConfig+0x4c4>)
 80018c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018c8:	61d3      	str	r3, [r2, #28]
 80018ca:	4b85      	ldr	r3, [pc, #532]	; (8001ae0 <HAL_RCC_OscConfig+0x4c4>)
 80018cc:	69db      	ldr	r3, [r3, #28]
 80018ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018d2:	60bb      	str	r3, [r7, #8]
 80018d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018d6:	2301      	movs	r3, #1
 80018d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018da:	4b82      	ldr	r3, [pc, #520]	; (8001ae4 <HAL_RCC_OscConfig+0x4c8>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d118      	bne.n	8001918 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018e6:	4b7f      	ldr	r3, [pc, #508]	; (8001ae4 <HAL_RCC_OscConfig+0x4c8>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a7e      	ldr	r2, [pc, #504]	; (8001ae4 <HAL_RCC_OscConfig+0x4c8>)
 80018ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018f2:	f7fe ff8d 	bl	8000810 <HAL_GetTick>
 80018f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018f8:	e008      	b.n	800190c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018fa:	f7fe ff89 	bl	8000810 <HAL_GetTick>
 80018fe:	4602      	mov	r2, r0
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	2b64      	cmp	r3, #100	; 0x64
 8001906:	d901      	bls.n	800190c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001908:	2303      	movs	r3, #3
 800190a:	e103      	b.n	8001b14 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800190c:	4b75      	ldr	r3, [pc, #468]	; (8001ae4 <HAL_RCC_OscConfig+0x4c8>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001914:	2b00      	cmp	r3, #0
 8001916:	d0f0      	beq.n	80018fa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	2b01      	cmp	r3, #1
 800191e:	d106      	bne.n	800192e <HAL_RCC_OscConfig+0x312>
 8001920:	4b6f      	ldr	r3, [pc, #444]	; (8001ae0 <HAL_RCC_OscConfig+0x4c4>)
 8001922:	6a1b      	ldr	r3, [r3, #32]
 8001924:	4a6e      	ldr	r2, [pc, #440]	; (8001ae0 <HAL_RCC_OscConfig+0x4c4>)
 8001926:	f043 0301 	orr.w	r3, r3, #1
 800192a:	6213      	str	r3, [r2, #32]
 800192c:	e02d      	b.n	800198a <HAL_RCC_OscConfig+0x36e>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	68db      	ldr	r3, [r3, #12]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d10c      	bne.n	8001950 <HAL_RCC_OscConfig+0x334>
 8001936:	4b6a      	ldr	r3, [pc, #424]	; (8001ae0 <HAL_RCC_OscConfig+0x4c4>)
 8001938:	6a1b      	ldr	r3, [r3, #32]
 800193a:	4a69      	ldr	r2, [pc, #420]	; (8001ae0 <HAL_RCC_OscConfig+0x4c4>)
 800193c:	f023 0301 	bic.w	r3, r3, #1
 8001940:	6213      	str	r3, [r2, #32]
 8001942:	4b67      	ldr	r3, [pc, #412]	; (8001ae0 <HAL_RCC_OscConfig+0x4c4>)
 8001944:	6a1b      	ldr	r3, [r3, #32]
 8001946:	4a66      	ldr	r2, [pc, #408]	; (8001ae0 <HAL_RCC_OscConfig+0x4c4>)
 8001948:	f023 0304 	bic.w	r3, r3, #4
 800194c:	6213      	str	r3, [r2, #32]
 800194e:	e01c      	b.n	800198a <HAL_RCC_OscConfig+0x36e>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	2b05      	cmp	r3, #5
 8001956:	d10c      	bne.n	8001972 <HAL_RCC_OscConfig+0x356>
 8001958:	4b61      	ldr	r3, [pc, #388]	; (8001ae0 <HAL_RCC_OscConfig+0x4c4>)
 800195a:	6a1b      	ldr	r3, [r3, #32]
 800195c:	4a60      	ldr	r2, [pc, #384]	; (8001ae0 <HAL_RCC_OscConfig+0x4c4>)
 800195e:	f043 0304 	orr.w	r3, r3, #4
 8001962:	6213      	str	r3, [r2, #32]
 8001964:	4b5e      	ldr	r3, [pc, #376]	; (8001ae0 <HAL_RCC_OscConfig+0x4c4>)
 8001966:	6a1b      	ldr	r3, [r3, #32]
 8001968:	4a5d      	ldr	r2, [pc, #372]	; (8001ae0 <HAL_RCC_OscConfig+0x4c4>)
 800196a:	f043 0301 	orr.w	r3, r3, #1
 800196e:	6213      	str	r3, [r2, #32]
 8001970:	e00b      	b.n	800198a <HAL_RCC_OscConfig+0x36e>
 8001972:	4b5b      	ldr	r3, [pc, #364]	; (8001ae0 <HAL_RCC_OscConfig+0x4c4>)
 8001974:	6a1b      	ldr	r3, [r3, #32]
 8001976:	4a5a      	ldr	r2, [pc, #360]	; (8001ae0 <HAL_RCC_OscConfig+0x4c4>)
 8001978:	f023 0301 	bic.w	r3, r3, #1
 800197c:	6213      	str	r3, [r2, #32]
 800197e:	4b58      	ldr	r3, [pc, #352]	; (8001ae0 <HAL_RCC_OscConfig+0x4c4>)
 8001980:	6a1b      	ldr	r3, [r3, #32]
 8001982:	4a57      	ldr	r2, [pc, #348]	; (8001ae0 <HAL_RCC_OscConfig+0x4c4>)
 8001984:	f023 0304 	bic.w	r3, r3, #4
 8001988:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	68db      	ldr	r3, [r3, #12]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d015      	beq.n	80019be <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001992:	f7fe ff3d 	bl	8000810 <HAL_GetTick>
 8001996:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001998:	e00a      	b.n	80019b0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800199a:	f7fe ff39 	bl	8000810 <HAL_GetTick>
 800199e:	4602      	mov	r2, r0
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	1ad3      	subs	r3, r2, r3
 80019a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d901      	bls.n	80019b0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80019ac:	2303      	movs	r3, #3
 80019ae:	e0b1      	b.n	8001b14 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019b0:	4b4b      	ldr	r3, [pc, #300]	; (8001ae0 <HAL_RCC_OscConfig+0x4c4>)
 80019b2:	6a1b      	ldr	r3, [r3, #32]
 80019b4:	f003 0302 	and.w	r3, r3, #2
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d0ee      	beq.n	800199a <HAL_RCC_OscConfig+0x37e>
 80019bc:	e014      	b.n	80019e8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019be:	f7fe ff27 	bl	8000810 <HAL_GetTick>
 80019c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019c4:	e00a      	b.n	80019dc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019c6:	f7fe ff23 	bl	8000810 <HAL_GetTick>
 80019ca:	4602      	mov	r2, r0
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d901      	bls.n	80019dc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80019d8:	2303      	movs	r3, #3
 80019da:	e09b      	b.n	8001b14 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019dc:	4b40      	ldr	r3, [pc, #256]	; (8001ae0 <HAL_RCC_OscConfig+0x4c4>)
 80019de:	6a1b      	ldr	r3, [r3, #32]
 80019e0:	f003 0302 	and.w	r3, r3, #2
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d1ee      	bne.n	80019c6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80019e8:	7dfb      	ldrb	r3, [r7, #23]
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d105      	bne.n	80019fa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019ee:	4b3c      	ldr	r3, [pc, #240]	; (8001ae0 <HAL_RCC_OscConfig+0x4c4>)
 80019f0:	69db      	ldr	r3, [r3, #28]
 80019f2:	4a3b      	ldr	r2, [pc, #236]	; (8001ae0 <HAL_RCC_OscConfig+0x4c4>)
 80019f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019f8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	69db      	ldr	r3, [r3, #28]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	f000 8087 	beq.w	8001b12 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a04:	4b36      	ldr	r3, [pc, #216]	; (8001ae0 <HAL_RCC_OscConfig+0x4c4>)
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f003 030c 	and.w	r3, r3, #12
 8001a0c:	2b08      	cmp	r3, #8
 8001a0e:	d061      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	69db      	ldr	r3, [r3, #28]
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d146      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a18:	4b33      	ldr	r3, [pc, #204]	; (8001ae8 <HAL_RCC_OscConfig+0x4cc>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a1e:	f7fe fef7 	bl	8000810 <HAL_GetTick>
 8001a22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a24:	e008      	b.n	8001a38 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a26:	f7fe fef3 	bl	8000810 <HAL_GetTick>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d901      	bls.n	8001a38 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001a34:	2303      	movs	r3, #3
 8001a36:	e06d      	b.n	8001b14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a38:	4b29      	ldr	r3, [pc, #164]	; (8001ae0 <HAL_RCC_OscConfig+0x4c4>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d1f0      	bne.n	8001a26 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6a1b      	ldr	r3, [r3, #32]
 8001a48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a4c:	d108      	bne.n	8001a60 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a4e:	4b24      	ldr	r3, [pc, #144]	; (8001ae0 <HAL_RCC_OscConfig+0x4c4>)
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	4921      	ldr	r1, [pc, #132]	; (8001ae0 <HAL_RCC_OscConfig+0x4c4>)
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a60:	4b1f      	ldr	r3, [pc, #124]	; (8001ae0 <HAL_RCC_OscConfig+0x4c4>)
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6a19      	ldr	r1, [r3, #32]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a70:	430b      	orrs	r3, r1
 8001a72:	491b      	ldr	r1, [pc, #108]	; (8001ae0 <HAL_RCC_OscConfig+0x4c4>)
 8001a74:	4313      	orrs	r3, r2
 8001a76:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a78:	4b1b      	ldr	r3, [pc, #108]	; (8001ae8 <HAL_RCC_OscConfig+0x4cc>)
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a7e:	f7fe fec7 	bl	8000810 <HAL_GetTick>
 8001a82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a84:	e008      	b.n	8001a98 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a86:	f7fe fec3 	bl	8000810 <HAL_GetTick>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d901      	bls.n	8001a98 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001a94:	2303      	movs	r3, #3
 8001a96:	e03d      	b.n	8001b14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a98:	4b11      	ldr	r3, [pc, #68]	; (8001ae0 <HAL_RCC_OscConfig+0x4c4>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d0f0      	beq.n	8001a86 <HAL_RCC_OscConfig+0x46a>
 8001aa4:	e035      	b.n	8001b12 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aa6:	4b10      	ldr	r3, [pc, #64]	; (8001ae8 <HAL_RCC_OscConfig+0x4cc>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aac:	f7fe feb0 	bl	8000810 <HAL_GetTick>
 8001ab0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ab2:	e008      	b.n	8001ac6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ab4:	f7fe feac 	bl	8000810 <HAL_GetTick>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d901      	bls.n	8001ac6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	e026      	b.n	8001b14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ac6:	4b06      	ldr	r3, [pc, #24]	; (8001ae0 <HAL_RCC_OscConfig+0x4c4>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d1f0      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x498>
 8001ad2:	e01e      	b.n	8001b12 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	69db      	ldr	r3, [r3, #28]
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d107      	bne.n	8001aec <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e019      	b.n	8001b14 <HAL_RCC_OscConfig+0x4f8>
 8001ae0:	40021000 	.word	0x40021000
 8001ae4:	40007000 	.word	0x40007000
 8001ae8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001aec:	4b0b      	ldr	r3, [pc, #44]	; (8001b1c <HAL_RCC_OscConfig+0x500>)
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6a1b      	ldr	r3, [r3, #32]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d106      	bne.n	8001b0e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d001      	beq.n	8001b12 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e000      	b.n	8001b14 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001b12:	2300      	movs	r3, #0
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3718      	adds	r7, #24
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	40021000 	.word	0x40021000

08001b20 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d101      	bne.n	8001b34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e0d0      	b.n	8001cd6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b34:	4b6a      	ldr	r3, [pc, #424]	; (8001ce0 <HAL_RCC_ClockConfig+0x1c0>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 0307 	and.w	r3, r3, #7
 8001b3c:	683a      	ldr	r2, [r7, #0]
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	d910      	bls.n	8001b64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b42:	4b67      	ldr	r3, [pc, #412]	; (8001ce0 <HAL_RCC_ClockConfig+0x1c0>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f023 0207 	bic.w	r2, r3, #7
 8001b4a:	4965      	ldr	r1, [pc, #404]	; (8001ce0 <HAL_RCC_ClockConfig+0x1c0>)
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b52:	4b63      	ldr	r3, [pc, #396]	; (8001ce0 <HAL_RCC_ClockConfig+0x1c0>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0307 	and.w	r3, r3, #7
 8001b5a:	683a      	ldr	r2, [r7, #0]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d001      	beq.n	8001b64 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e0b8      	b.n	8001cd6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 0302 	and.w	r3, r3, #2
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d020      	beq.n	8001bb2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 0304 	and.w	r3, r3, #4
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d005      	beq.n	8001b88 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b7c:	4b59      	ldr	r3, [pc, #356]	; (8001ce4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	4a58      	ldr	r2, [pc, #352]	; (8001ce4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b82:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001b86:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 0308 	and.w	r3, r3, #8
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d005      	beq.n	8001ba0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b94:	4b53      	ldr	r3, [pc, #332]	; (8001ce4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	4a52      	ldr	r2, [pc, #328]	; (8001ce4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b9a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001b9e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ba0:	4b50      	ldr	r3, [pc, #320]	; (8001ce4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	494d      	ldr	r1, [pc, #308]	; (8001ce4 <HAL_RCC_ClockConfig+0x1c4>)
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0301 	and.w	r3, r3, #1
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d040      	beq.n	8001c40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d107      	bne.n	8001bd6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bc6:	4b47      	ldr	r3, [pc, #284]	; (8001ce4 <HAL_RCC_ClockConfig+0x1c4>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d115      	bne.n	8001bfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e07f      	b.n	8001cd6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d107      	bne.n	8001bee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bde:	4b41      	ldr	r3, [pc, #260]	; (8001ce4 <HAL_RCC_ClockConfig+0x1c4>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d109      	bne.n	8001bfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e073      	b.n	8001cd6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bee:	4b3d      	ldr	r3, [pc, #244]	; (8001ce4 <HAL_RCC_ClockConfig+0x1c4>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0302 	and.w	r3, r3, #2
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d101      	bne.n	8001bfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e06b      	b.n	8001cd6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bfe:	4b39      	ldr	r3, [pc, #228]	; (8001ce4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	f023 0203 	bic.w	r2, r3, #3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	4936      	ldr	r1, [pc, #216]	; (8001ce4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c10:	f7fe fdfe 	bl	8000810 <HAL_GetTick>
 8001c14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c16:	e00a      	b.n	8001c2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c18:	f7fe fdfa 	bl	8000810 <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e053      	b.n	8001cd6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c2e:	4b2d      	ldr	r3, [pc, #180]	; (8001ce4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f003 020c 	and.w	r2, r3, #12
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d1eb      	bne.n	8001c18 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c40:	4b27      	ldr	r3, [pc, #156]	; (8001ce0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 0307 	and.w	r3, r3, #7
 8001c48:	683a      	ldr	r2, [r7, #0]
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d210      	bcs.n	8001c70 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c4e:	4b24      	ldr	r3, [pc, #144]	; (8001ce0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f023 0207 	bic.w	r2, r3, #7
 8001c56:	4922      	ldr	r1, [pc, #136]	; (8001ce0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c5e:	4b20      	ldr	r3, [pc, #128]	; (8001ce0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0307 	and.w	r3, r3, #7
 8001c66:	683a      	ldr	r2, [r7, #0]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d001      	beq.n	8001c70 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e032      	b.n	8001cd6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 0304 	and.w	r3, r3, #4
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d008      	beq.n	8001c8e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c7c:	4b19      	ldr	r3, [pc, #100]	; (8001ce4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	4916      	ldr	r1, [pc, #88]	; (8001ce4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0308 	and.w	r3, r3, #8
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d009      	beq.n	8001cae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c9a:	4b12      	ldr	r3, [pc, #72]	; (8001ce4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	691b      	ldr	r3, [r3, #16]
 8001ca6:	00db      	lsls	r3, r3, #3
 8001ca8:	490e      	ldr	r1, [pc, #56]	; (8001ce4 <HAL_RCC_ClockConfig+0x1c4>)
 8001caa:	4313      	orrs	r3, r2
 8001cac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001cae:	f000 f821 	bl	8001cf4 <HAL_RCC_GetSysClockFreq>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	4b0b      	ldr	r3, [pc, #44]	; (8001ce4 <HAL_RCC_ClockConfig+0x1c4>)
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	091b      	lsrs	r3, r3, #4
 8001cba:	f003 030f 	and.w	r3, r3, #15
 8001cbe:	490a      	ldr	r1, [pc, #40]	; (8001ce8 <HAL_RCC_ClockConfig+0x1c8>)
 8001cc0:	5ccb      	ldrb	r3, [r1, r3]
 8001cc2:	fa22 f303 	lsr.w	r3, r2, r3
 8001cc6:	4a09      	ldr	r2, [pc, #36]	; (8001cec <HAL_RCC_ClockConfig+0x1cc>)
 8001cc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001cca:	4b09      	ldr	r3, [pc, #36]	; (8001cf0 <HAL_RCC_ClockConfig+0x1d0>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f7fe fd5c 	bl	800078c <HAL_InitTick>

  return HAL_OK;
 8001cd4:	2300      	movs	r3, #0
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3710      	adds	r7, #16
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	40022000 	.word	0x40022000
 8001ce4:	40021000 	.word	0x40021000
 8001ce8:	0800328c 	.word	0x0800328c
 8001cec:	20000000 	.word	0x20000000
 8001cf0:	20000004 	.word	0x20000004

08001cf4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cf4:	b490      	push	{r4, r7}
 8001cf6:	b08a      	sub	sp, #40	; 0x28
 8001cf8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001cfa:	4b29      	ldr	r3, [pc, #164]	; (8001da0 <HAL_RCC_GetSysClockFreq+0xac>)
 8001cfc:	1d3c      	adds	r4, r7, #4
 8001cfe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d00:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001d04:	f240 2301 	movw	r3, #513	; 0x201
 8001d08:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	61fb      	str	r3, [r7, #28]
 8001d0e:	2300      	movs	r3, #0
 8001d10:	61bb      	str	r3, [r7, #24]
 8001d12:	2300      	movs	r3, #0
 8001d14:	627b      	str	r3, [r7, #36]	; 0x24
 8001d16:	2300      	movs	r3, #0
 8001d18:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001d1e:	4b21      	ldr	r3, [pc, #132]	; (8001da4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	f003 030c 	and.w	r3, r3, #12
 8001d2a:	2b04      	cmp	r3, #4
 8001d2c:	d002      	beq.n	8001d34 <HAL_RCC_GetSysClockFreq+0x40>
 8001d2e:	2b08      	cmp	r3, #8
 8001d30:	d003      	beq.n	8001d3a <HAL_RCC_GetSysClockFreq+0x46>
 8001d32:	e02b      	b.n	8001d8c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d34:	4b1c      	ldr	r3, [pc, #112]	; (8001da8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001d36:	623b      	str	r3, [r7, #32]
      break;
 8001d38:	e02b      	b.n	8001d92 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	0c9b      	lsrs	r3, r3, #18
 8001d3e:	f003 030f 	and.w	r3, r3, #15
 8001d42:	3328      	adds	r3, #40	; 0x28
 8001d44:	443b      	add	r3, r7
 8001d46:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001d4a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d012      	beq.n	8001d7c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d56:	4b13      	ldr	r3, [pc, #76]	; (8001da4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	0c5b      	lsrs	r3, r3, #17
 8001d5c:	f003 0301 	and.w	r3, r3, #1
 8001d60:	3328      	adds	r3, #40	; 0x28
 8001d62:	443b      	add	r3, r7
 8001d64:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001d68:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	4a0e      	ldr	r2, [pc, #56]	; (8001da8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001d6e:	fb03 f202 	mul.w	r2, r3, r2
 8001d72:	69bb      	ldr	r3, [r7, #24]
 8001d74:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d78:	627b      	str	r3, [r7, #36]	; 0x24
 8001d7a:	e004      	b.n	8001d86 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	4a0b      	ldr	r2, [pc, #44]	; (8001dac <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d80:	fb02 f303 	mul.w	r3, r2, r3
 8001d84:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d88:	623b      	str	r3, [r7, #32]
      break;
 8001d8a:	e002      	b.n	8001d92 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d8c:	4b06      	ldr	r3, [pc, #24]	; (8001da8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001d8e:	623b      	str	r3, [r7, #32]
      break;
 8001d90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d92:	6a3b      	ldr	r3, [r7, #32]
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3728      	adds	r7, #40	; 0x28
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bc90      	pop	{r4, r7}
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	0800327c 	.word	0x0800327c
 8001da4:	40021000 	.word	0x40021000
 8001da8:	007a1200 	.word	0x007a1200
 8001dac:	003d0900 	.word	0x003d0900

08001db0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001db4:	4b02      	ldr	r3, [pc, #8]	; (8001dc0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001db6:	681b      	ldr	r3, [r3, #0]
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bc80      	pop	{r7}
 8001dbe:	4770      	bx	lr
 8001dc0:	20000000 	.word	0x20000000

08001dc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001dc8:	f7ff fff2 	bl	8001db0 <HAL_RCC_GetHCLKFreq>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	4b05      	ldr	r3, [pc, #20]	; (8001de4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	0a1b      	lsrs	r3, r3, #8
 8001dd4:	f003 0307 	and.w	r3, r3, #7
 8001dd8:	4903      	ldr	r1, [pc, #12]	; (8001de8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001dda:	5ccb      	ldrb	r3, [r1, r3]
 8001ddc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	40021000 	.word	0x40021000
 8001de8:	0800329c 	.word	0x0800329c

08001dec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001df0:	f7ff ffde 	bl	8001db0 <HAL_RCC_GetHCLKFreq>
 8001df4:	4602      	mov	r2, r0
 8001df6:	4b05      	ldr	r3, [pc, #20]	; (8001e0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	0adb      	lsrs	r3, r3, #11
 8001dfc:	f003 0307 	and.w	r3, r3, #7
 8001e00:	4903      	ldr	r1, [pc, #12]	; (8001e10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e02:	5ccb      	ldrb	r3, [r1, r3]
 8001e04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	40021000 	.word	0x40021000
 8001e10:	0800329c 	.word	0x0800329c

08001e14 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b085      	sub	sp, #20
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e1c:	4b0a      	ldr	r3, [pc, #40]	; (8001e48 <RCC_Delay+0x34>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a0a      	ldr	r2, [pc, #40]	; (8001e4c <RCC_Delay+0x38>)
 8001e22:	fba2 2303 	umull	r2, r3, r2, r3
 8001e26:	0a5b      	lsrs	r3, r3, #9
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	fb02 f303 	mul.w	r3, r2, r3
 8001e2e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001e30:	bf00      	nop
  }
  while (Delay --);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	1e5a      	subs	r2, r3, #1
 8001e36:	60fa      	str	r2, [r7, #12]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d1f9      	bne.n	8001e30 <RCC_Delay+0x1c>
}
 8001e3c:	bf00      	nop
 8001e3e:	bf00      	nop
 8001e40:	3714      	adds	r7, #20
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bc80      	pop	{r7}
 8001e46:	4770      	bx	lr
 8001e48:	20000000 	.word	0x20000000
 8001e4c:	10624dd3 	.word	0x10624dd3

08001e50 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d101      	bne.n	8001e62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e03f      	b.n	8001ee2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d106      	bne.n	8001e7c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2200      	movs	r2, #0
 8001e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f7fe fb3c 	bl	80004f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2224      	movs	r2, #36	; 0x24
 8001e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	68da      	ldr	r2, [r3, #12]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e92:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f000 f905 	bl	80020a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	691a      	ldr	r2, [r3, #16]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001ea8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	695a      	ldr	r2, [r3, #20]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001eb8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	68da      	ldr	r2, [r3, #12]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ec8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2220      	movs	r2, #32
 8001ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2220      	movs	r2, #32
 8001edc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}

08001eea <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001eea:	b580      	push	{r7, lr}
 8001eec:	b08a      	sub	sp, #40	; 0x28
 8001eee:	af02      	add	r7, sp, #8
 8001ef0:	60f8      	str	r0, [r7, #12]
 8001ef2:	60b9      	str	r1, [r7, #8]
 8001ef4:	603b      	str	r3, [r7, #0]
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001efa:	2300      	movs	r3, #0
 8001efc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	2b20      	cmp	r3, #32
 8001f08:	d17c      	bne.n	8002004 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d002      	beq.n	8001f16 <HAL_UART_Transmit+0x2c>
 8001f10:	88fb      	ldrh	r3, [r7, #6]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d101      	bne.n	8001f1a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e075      	b.n	8002006 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d101      	bne.n	8001f28 <HAL_UART_Transmit+0x3e>
 8001f24:	2302      	movs	r3, #2
 8001f26:	e06e      	b.n	8002006 <HAL_UART_Transmit+0x11c>
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	2200      	movs	r2, #0
 8001f34:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2221      	movs	r2, #33	; 0x21
 8001f3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001f3e:	f7fe fc67 	bl	8000810 <HAL_GetTick>
 8001f42:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	88fa      	ldrh	r2, [r7, #6]
 8001f48:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	88fa      	ldrh	r2, [r7, #6]
 8001f4e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f58:	d108      	bne.n	8001f6c <HAL_UART_Transmit+0x82>
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	691b      	ldr	r3, [r3, #16]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d104      	bne.n	8001f6c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001f62:	2300      	movs	r3, #0
 8001f64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	61bb      	str	r3, [r7, #24]
 8001f6a:	e003      	b.n	8001f74 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001f70:	2300      	movs	r3, #0
 8001f72:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2200      	movs	r2, #0
 8001f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001f7c:	e02a      	b.n	8001fd4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	9300      	str	r3, [sp, #0]
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	2200      	movs	r2, #0
 8001f86:	2180      	movs	r1, #128	; 0x80
 8001f88:	68f8      	ldr	r0, [r7, #12]
 8001f8a:	f000 f840 	bl	800200e <UART_WaitOnFlagUntilTimeout>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d001      	beq.n	8001f98 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001f94:	2303      	movs	r3, #3
 8001f96:	e036      	b.n	8002006 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d10b      	bne.n	8001fb6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001f9e:	69bb      	ldr	r3, [r7, #24]
 8001fa0:	881b      	ldrh	r3, [r3, #0]
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001fac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001fae:	69bb      	ldr	r3, [r7, #24]
 8001fb0:	3302      	adds	r3, #2
 8001fb2:	61bb      	str	r3, [r7, #24]
 8001fb4:	e007      	b.n	8001fc6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	781a      	ldrb	r2, [r3, #0]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001fca:	b29b      	uxth	r3, r3
 8001fcc:	3b01      	subs	r3, #1
 8001fce:	b29a      	uxth	r2, r3
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001fd8:	b29b      	uxth	r3, r3
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d1cf      	bne.n	8001f7e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	9300      	str	r3, [sp, #0]
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	2140      	movs	r1, #64	; 0x40
 8001fe8:	68f8      	ldr	r0, [r7, #12]
 8001fea:	f000 f810 	bl	800200e <UART_WaitOnFlagUntilTimeout>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d001      	beq.n	8001ff8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e006      	b.n	8002006 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2220      	movs	r2, #32
 8001ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002000:	2300      	movs	r3, #0
 8002002:	e000      	b.n	8002006 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002004:	2302      	movs	r3, #2
  }
}
 8002006:	4618      	mov	r0, r3
 8002008:	3720      	adds	r7, #32
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800200e:	b580      	push	{r7, lr}
 8002010:	b084      	sub	sp, #16
 8002012:	af00      	add	r7, sp, #0
 8002014:	60f8      	str	r0, [r7, #12]
 8002016:	60b9      	str	r1, [r7, #8]
 8002018:	603b      	str	r3, [r7, #0]
 800201a:	4613      	mov	r3, r2
 800201c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800201e:	e02c      	b.n	800207a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002020:	69bb      	ldr	r3, [r7, #24]
 8002022:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002026:	d028      	beq.n	800207a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002028:	69bb      	ldr	r3, [r7, #24]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d007      	beq.n	800203e <UART_WaitOnFlagUntilTimeout+0x30>
 800202e:	f7fe fbef 	bl	8000810 <HAL_GetTick>
 8002032:	4602      	mov	r2, r0
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	429a      	cmp	r2, r3
 800203c:	d21d      	bcs.n	800207a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	68da      	ldr	r2, [r3, #12]
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800204c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	695a      	ldr	r2, [r3, #20]
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f022 0201 	bic.w	r2, r2, #1
 800205c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2220      	movs	r2, #32
 8002062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2220      	movs	r2, #32
 800206a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2200      	movs	r2, #0
 8002072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e00f      	b.n	800209a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	4013      	ands	r3, r2
 8002084:	68ba      	ldr	r2, [r7, #8]
 8002086:	429a      	cmp	r2, r3
 8002088:	bf0c      	ite	eq
 800208a:	2301      	moveq	r3, #1
 800208c:	2300      	movne	r3, #0
 800208e:	b2db      	uxtb	r3, r3
 8002090:	461a      	mov	r2, r3
 8002092:	79fb      	ldrb	r3, [r7, #7]
 8002094:	429a      	cmp	r2, r3
 8002096:	d0c3      	beq.n	8002020 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002098:	2300      	movs	r3, #0
}
 800209a:	4618      	mov	r0, r3
 800209c:	3710      	adds	r7, #16
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
	...

080020a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	691b      	ldr	r3, [r3, #16]
 80020b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	68da      	ldr	r2, [r3, #12]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	430a      	orrs	r2, r1
 80020c0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	689a      	ldr	r2, [r3, #8]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	691b      	ldr	r3, [r3, #16]
 80020ca:	431a      	orrs	r2, r3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	695b      	ldr	r3, [r3, #20]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80020de:	f023 030c 	bic.w	r3, r3, #12
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	6812      	ldr	r2, [r2, #0]
 80020e6:	68b9      	ldr	r1, [r7, #8]
 80020e8:	430b      	orrs	r3, r1
 80020ea:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	695b      	ldr	r3, [r3, #20]
 80020f2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	699a      	ldr	r2, [r3, #24]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	430a      	orrs	r2, r1
 8002100:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a2c      	ldr	r2, [pc, #176]	; (80021b8 <UART_SetConfig+0x114>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d103      	bne.n	8002114 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800210c:	f7ff fe6e 	bl	8001dec <HAL_RCC_GetPCLK2Freq>
 8002110:	60f8      	str	r0, [r7, #12]
 8002112:	e002      	b.n	800211a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002114:	f7ff fe56 	bl	8001dc4 <HAL_RCC_GetPCLK1Freq>
 8002118:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800211a:	68fa      	ldr	r2, [r7, #12]
 800211c:	4613      	mov	r3, r2
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	4413      	add	r3, r2
 8002122:	009a      	lsls	r2, r3, #2
 8002124:	441a      	add	r2, r3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002130:	4a22      	ldr	r2, [pc, #136]	; (80021bc <UART_SetConfig+0x118>)
 8002132:	fba2 2303 	umull	r2, r3, r2, r3
 8002136:	095b      	lsrs	r3, r3, #5
 8002138:	0119      	lsls	r1, r3, #4
 800213a:	68fa      	ldr	r2, [r7, #12]
 800213c:	4613      	mov	r3, r2
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	4413      	add	r3, r2
 8002142:	009a      	lsls	r2, r3, #2
 8002144:	441a      	add	r2, r3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002150:	4b1a      	ldr	r3, [pc, #104]	; (80021bc <UART_SetConfig+0x118>)
 8002152:	fba3 0302 	umull	r0, r3, r3, r2
 8002156:	095b      	lsrs	r3, r3, #5
 8002158:	2064      	movs	r0, #100	; 0x64
 800215a:	fb00 f303 	mul.w	r3, r0, r3
 800215e:	1ad3      	subs	r3, r2, r3
 8002160:	011b      	lsls	r3, r3, #4
 8002162:	3332      	adds	r3, #50	; 0x32
 8002164:	4a15      	ldr	r2, [pc, #84]	; (80021bc <UART_SetConfig+0x118>)
 8002166:	fba2 2303 	umull	r2, r3, r2, r3
 800216a:	095b      	lsrs	r3, r3, #5
 800216c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002170:	4419      	add	r1, r3
 8002172:	68fa      	ldr	r2, [r7, #12]
 8002174:	4613      	mov	r3, r2
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	4413      	add	r3, r2
 800217a:	009a      	lsls	r2, r3, #2
 800217c:	441a      	add	r2, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	fbb2 f2f3 	udiv	r2, r2, r3
 8002188:	4b0c      	ldr	r3, [pc, #48]	; (80021bc <UART_SetConfig+0x118>)
 800218a:	fba3 0302 	umull	r0, r3, r3, r2
 800218e:	095b      	lsrs	r3, r3, #5
 8002190:	2064      	movs	r0, #100	; 0x64
 8002192:	fb00 f303 	mul.w	r3, r0, r3
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	011b      	lsls	r3, r3, #4
 800219a:	3332      	adds	r3, #50	; 0x32
 800219c:	4a07      	ldr	r2, [pc, #28]	; (80021bc <UART_SetConfig+0x118>)
 800219e:	fba2 2303 	umull	r2, r3, r2, r3
 80021a2:	095b      	lsrs	r3, r3, #5
 80021a4:	f003 020f 	and.w	r2, r3, #15
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	440a      	add	r2, r1
 80021ae:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80021b0:	bf00      	nop
 80021b2:	3710      	adds	r7, #16
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	40013800 	.word	0x40013800
 80021bc:	51eb851f 	.word	0x51eb851f

080021c0 <__errno>:
 80021c0:	4b01      	ldr	r3, [pc, #4]	; (80021c8 <__errno+0x8>)
 80021c2:	6818      	ldr	r0, [r3, #0]
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	2000000c 	.word	0x2000000c

080021cc <__libc_init_array>:
 80021cc:	b570      	push	{r4, r5, r6, lr}
 80021ce:	2600      	movs	r6, #0
 80021d0:	4d0c      	ldr	r5, [pc, #48]	; (8002204 <__libc_init_array+0x38>)
 80021d2:	4c0d      	ldr	r4, [pc, #52]	; (8002208 <__libc_init_array+0x3c>)
 80021d4:	1b64      	subs	r4, r4, r5
 80021d6:	10a4      	asrs	r4, r4, #2
 80021d8:	42a6      	cmp	r6, r4
 80021da:	d109      	bne.n	80021f0 <__libc_init_array+0x24>
 80021dc:	f001 f82c 	bl	8003238 <_init>
 80021e0:	2600      	movs	r6, #0
 80021e2:	4d0a      	ldr	r5, [pc, #40]	; (800220c <__libc_init_array+0x40>)
 80021e4:	4c0a      	ldr	r4, [pc, #40]	; (8002210 <__libc_init_array+0x44>)
 80021e6:	1b64      	subs	r4, r4, r5
 80021e8:	10a4      	asrs	r4, r4, #2
 80021ea:	42a6      	cmp	r6, r4
 80021ec:	d105      	bne.n	80021fa <__libc_init_array+0x2e>
 80021ee:	bd70      	pop	{r4, r5, r6, pc}
 80021f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80021f4:	4798      	blx	r3
 80021f6:	3601      	adds	r6, #1
 80021f8:	e7ee      	b.n	80021d8 <__libc_init_array+0xc>
 80021fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80021fe:	4798      	blx	r3
 8002200:	3601      	adds	r6, #1
 8002202:	e7f2      	b.n	80021ea <__libc_init_array+0x1e>
 8002204:	0800333c 	.word	0x0800333c
 8002208:	0800333c 	.word	0x0800333c
 800220c:	0800333c 	.word	0x0800333c
 8002210:	08003340 	.word	0x08003340

08002214 <memset>:
 8002214:	4603      	mov	r3, r0
 8002216:	4402      	add	r2, r0
 8002218:	4293      	cmp	r3, r2
 800221a:	d100      	bne.n	800221e <memset+0xa>
 800221c:	4770      	bx	lr
 800221e:	f803 1b01 	strb.w	r1, [r3], #1
 8002222:	e7f9      	b.n	8002218 <memset+0x4>

08002224 <iprintf>:
 8002224:	b40f      	push	{r0, r1, r2, r3}
 8002226:	4b0a      	ldr	r3, [pc, #40]	; (8002250 <iprintf+0x2c>)
 8002228:	b513      	push	{r0, r1, r4, lr}
 800222a:	681c      	ldr	r4, [r3, #0]
 800222c:	b124      	cbz	r4, 8002238 <iprintf+0x14>
 800222e:	69a3      	ldr	r3, [r4, #24]
 8002230:	b913      	cbnz	r3, 8002238 <iprintf+0x14>
 8002232:	4620      	mov	r0, r4
 8002234:	f000 fa5a 	bl	80026ec <__sinit>
 8002238:	ab05      	add	r3, sp, #20
 800223a:	4620      	mov	r0, r4
 800223c:	9a04      	ldr	r2, [sp, #16]
 800223e:	68a1      	ldr	r1, [r4, #8]
 8002240:	9301      	str	r3, [sp, #4]
 8002242:	f000 fc5d 	bl	8002b00 <_vfiprintf_r>
 8002246:	b002      	add	sp, #8
 8002248:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800224c:	b004      	add	sp, #16
 800224e:	4770      	bx	lr
 8002250:	2000000c 	.word	0x2000000c

08002254 <_puts_r>:
 8002254:	b570      	push	{r4, r5, r6, lr}
 8002256:	460e      	mov	r6, r1
 8002258:	4605      	mov	r5, r0
 800225a:	b118      	cbz	r0, 8002264 <_puts_r+0x10>
 800225c:	6983      	ldr	r3, [r0, #24]
 800225e:	b90b      	cbnz	r3, 8002264 <_puts_r+0x10>
 8002260:	f000 fa44 	bl	80026ec <__sinit>
 8002264:	69ab      	ldr	r3, [r5, #24]
 8002266:	68ac      	ldr	r4, [r5, #8]
 8002268:	b913      	cbnz	r3, 8002270 <_puts_r+0x1c>
 800226a:	4628      	mov	r0, r5
 800226c:	f000 fa3e 	bl	80026ec <__sinit>
 8002270:	4b2c      	ldr	r3, [pc, #176]	; (8002324 <_puts_r+0xd0>)
 8002272:	429c      	cmp	r4, r3
 8002274:	d120      	bne.n	80022b8 <_puts_r+0x64>
 8002276:	686c      	ldr	r4, [r5, #4]
 8002278:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800227a:	07db      	lsls	r3, r3, #31
 800227c:	d405      	bmi.n	800228a <_puts_r+0x36>
 800227e:	89a3      	ldrh	r3, [r4, #12]
 8002280:	0598      	lsls	r0, r3, #22
 8002282:	d402      	bmi.n	800228a <_puts_r+0x36>
 8002284:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002286:	f000 facf 	bl	8002828 <__retarget_lock_acquire_recursive>
 800228a:	89a3      	ldrh	r3, [r4, #12]
 800228c:	0719      	lsls	r1, r3, #28
 800228e:	d51d      	bpl.n	80022cc <_puts_r+0x78>
 8002290:	6923      	ldr	r3, [r4, #16]
 8002292:	b1db      	cbz	r3, 80022cc <_puts_r+0x78>
 8002294:	3e01      	subs	r6, #1
 8002296:	68a3      	ldr	r3, [r4, #8]
 8002298:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800229c:	3b01      	subs	r3, #1
 800229e:	60a3      	str	r3, [r4, #8]
 80022a0:	bb39      	cbnz	r1, 80022f2 <_puts_r+0x9e>
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	da38      	bge.n	8002318 <_puts_r+0xc4>
 80022a6:	4622      	mov	r2, r4
 80022a8:	210a      	movs	r1, #10
 80022aa:	4628      	mov	r0, r5
 80022ac:	f000 f848 	bl	8002340 <__swbuf_r>
 80022b0:	3001      	adds	r0, #1
 80022b2:	d011      	beq.n	80022d8 <_puts_r+0x84>
 80022b4:	250a      	movs	r5, #10
 80022b6:	e011      	b.n	80022dc <_puts_r+0x88>
 80022b8:	4b1b      	ldr	r3, [pc, #108]	; (8002328 <_puts_r+0xd4>)
 80022ba:	429c      	cmp	r4, r3
 80022bc:	d101      	bne.n	80022c2 <_puts_r+0x6e>
 80022be:	68ac      	ldr	r4, [r5, #8]
 80022c0:	e7da      	b.n	8002278 <_puts_r+0x24>
 80022c2:	4b1a      	ldr	r3, [pc, #104]	; (800232c <_puts_r+0xd8>)
 80022c4:	429c      	cmp	r4, r3
 80022c6:	bf08      	it	eq
 80022c8:	68ec      	ldreq	r4, [r5, #12]
 80022ca:	e7d5      	b.n	8002278 <_puts_r+0x24>
 80022cc:	4621      	mov	r1, r4
 80022ce:	4628      	mov	r0, r5
 80022d0:	f000 f888 	bl	80023e4 <__swsetup_r>
 80022d4:	2800      	cmp	r0, #0
 80022d6:	d0dd      	beq.n	8002294 <_puts_r+0x40>
 80022d8:	f04f 35ff 	mov.w	r5, #4294967295
 80022dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80022de:	07da      	lsls	r2, r3, #31
 80022e0:	d405      	bmi.n	80022ee <_puts_r+0x9a>
 80022e2:	89a3      	ldrh	r3, [r4, #12]
 80022e4:	059b      	lsls	r3, r3, #22
 80022e6:	d402      	bmi.n	80022ee <_puts_r+0x9a>
 80022e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80022ea:	f000 fa9e 	bl	800282a <__retarget_lock_release_recursive>
 80022ee:	4628      	mov	r0, r5
 80022f0:	bd70      	pop	{r4, r5, r6, pc}
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	da04      	bge.n	8002300 <_puts_r+0xac>
 80022f6:	69a2      	ldr	r2, [r4, #24]
 80022f8:	429a      	cmp	r2, r3
 80022fa:	dc06      	bgt.n	800230a <_puts_r+0xb6>
 80022fc:	290a      	cmp	r1, #10
 80022fe:	d004      	beq.n	800230a <_puts_r+0xb6>
 8002300:	6823      	ldr	r3, [r4, #0]
 8002302:	1c5a      	adds	r2, r3, #1
 8002304:	6022      	str	r2, [r4, #0]
 8002306:	7019      	strb	r1, [r3, #0]
 8002308:	e7c5      	b.n	8002296 <_puts_r+0x42>
 800230a:	4622      	mov	r2, r4
 800230c:	4628      	mov	r0, r5
 800230e:	f000 f817 	bl	8002340 <__swbuf_r>
 8002312:	3001      	adds	r0, #1
 8002314:	d1bf      	bne.n	8002296 <_puts_r+0x42>
 8002316:	e7df      	b.n	80022d8 <_puts_r+0x84>
 8002318:	250a      	movs	r5, #10
 800231a:	6823      	ldr	r3, [r4, #0]
 800231c:	1c5a      	adds	r2, r3, #1
 800231e:	6022      	str	r2, [r4, #0]
 8002320:	701d      	strb	r5, [r3, #0]
 8002322:	e7db      	b.n	80022dc <_puts_r+0x88>
 8002324:	080032c8 	.word	0x080032c8
 8002328:	080032e8 	.word	0x080032e8
 800232c:	080032a8 	.word	0x080032a8

08002330 <puts>:
 8002330:	4b02      	ldr	r3, [pc, #8]	; (800233c <puts+0xc>)
 8002332:	4601      	mov	r1, r0
 8002334:	6818      	ldr	r0, [r3, #0]
 8002336:	f7ff bf8d 	b.w	8002254 <_puts_r>
 800233a:	bf00      	nop
 800233c:	2000000c 	.word	0x2000000c

08002340 <__swbuf_r>:
 8002340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002342:	460e      	mov	r6, r1
 8002344:	4614      	mov	r4, r2
 8002346:	4605      	mov	r5, r0
 8002348:	b118      	cbz	r0, 8002352 <__swbuf_r+0x12>
 800234a:	6983      	ldr	r3, [r0, #24]
 800234c:	b90b      	cbnz	r3, 8002352 <__swbuf_r+0x12>
 800234e:	f000 f9cd 	bl	80026ec <__sinit>
 8002352:	4b21      	ldr	r3, [pc, #132]	; (80023d8 <__swbuf_r+0x98>)
 8002354:	429c      	cmp	r4, r3
 8002356:	d12b      	bne.n	80023b0 <__swbuf_r+0x70>
 8002358:	686c      	ldr	r4, [r5, #4]
 800235a:	69a3      	ldr	r3, [r4, #24]
 800235c:	60a3      	str	r3, [r4, #8]
 800235e:	89a3      	ldrh	r3, [r4, #12]
 8002360:	071a      	lsls	r2, r3, #28
 8002362:	d52f      	bpl.n	80023c4 <__swbuf_r+0x84>
 8002364:	6923      	ldr	r3, [r4, #16]
 8002366:	b36b      	cbz	r3, 80023c4 <__swbuf_r+0x84>
 8002368:	6923      	ldr	r3, [r4, #16]
 800236a:	6820      	ldr	r0, [r4, #0]
 800236c:	b2f6      	uxtb	r6, r6
 800236e:	1ac0      	subs	r0, r0, r3
 8002370:	6963      	ldr	r3, [r4, #20]
 8002372:	4637      	mov	r7, r6
 8002374:	4283      	cmp	r3, r0
 8002376:	dc04      	bgt.n	8002382 <__swbuf_r+0x42>
 8002378:	4621      	mov	r1, r4
 800237a:	4628      	mov	r0, r5
 800237c:	f000 f922 	bl	80025c4 <_fflush_r>
 8002380:	bb30      	cbnz	r0, 80023d0 <__swbuf_r+0x90>
 8002382:	68a3      	ldr	r3, [r4, #8]
 8002384:	3001      	adds	r0, #1
 8002386:	3b01      	subs	r3, #1
 8002388:	60a3      	str	r3, [r4, #8]
 800238a:	6823      	ldr	r3, [r4, #0]
 800238c:	1c5a      	adds	r2, r3, #1
 800238e:	6022      	str	r2, [r4, #0]
 8002390:	701e      	strb	r6, [r3, #0]
 8002392:	6963      	ldr	r3, [r4, #20]
 8002394:	4283      	cmp	r3, r0
 8002396:	d004      	beq.n	80023a2 <__swbuf_r+0x62>
 8002398:	89a3      	ldrh	r3, [r4, #12]
 800239a:	07db      	lsls	r3, r3, #31
 800239c:	d506      	bpl.n	80023ac <__swbuf_r+0x6c>
 800239e:	2e0a      	cmp	r6, #10
 80023a0:	d104      	bne.n	80023ac <__swbuf_r+0x6c>
 80023a2:	4621      	mov	r1, r4
 80023a4:	4628      	mov	r0, r5
 80023a6:	f000 f90d 	bl	80025c4 <_fflush_r>
 80023aa:	b988      	cbnz	r0, 80023d0 <__swbuf_r+0x90>
 80023ac:	4638      	mov	r0, r7
 80023ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80023b0:	4b0a      	ldr	r3, [pc, #40]	; (80023dc <__swbuf_r+0x9c>)
 80023b2:	429c      	cmp	r4, r3
 80023b4:	d101      	bne.n	80023ba <__swbuf_r+0x7a>
 80023b6:	68ac      	ldr	r4, [r5, #8]
 80023b8:	e7cf      	b.n	800235a <__swbuf_r+0x1a>
 80023ba:	4b09      	ldr	r3, [pc, #36]	; (80023e0 <__swbuf_r+0xa0>)
 80023bc:	429c      	cmp	r4, r3
 80023be:	bf08      	it	eq
 80023c0:	68ec      	ldreq	r4, [r5, #12]
 80023c2:	e7ca      	b.n	800235a <__swbuf_r+0x1a>
 80023c4:	4621      	mov	r1, r4
 80023c6:	4628      	mov	r0, r5
 80023c8:	f000 f80c 	bl	80023e4 <__swsetup_r>
 80023cc:	2800      	cmp	r0, #0
 80023ce:	d0cb      	beq.n	8002368 <__swbuf_r+0x28>
 80023d0:	f04f 37ff 	mov.w	r7, #4294967295
 80023d4:	e7ea      	b.n	80023ac <__swbuf_r+0x6c>
 80023d6:	bf00      	nop
 80023d8:	080032c8 	.word	0x080032c8
 80023dc:	080032e8 	.word	0x080032e8
 80023e0:	080032a8 	.word	0x080032a8

080023e4 <__swsetup_r>:
 80023e4:	4b32      	ldr	r3, [pc, #200]	; (80024b0 <__swsetup_r+0xcc>)
 80023e6:	b570      	push	{r4, r5, r6, lr}
 80023e8:	681d      	ldr	r5, [r3, #0]
 80023ea:	4606      	mov	r6, r0
 80023ec:	460c      	mov	r4, r1
 80023ee:	b125      	cbz	r5, 80023fa <__swsetup_r+0x16>
 80023f0:	69ab      	ldr	r3, [r5, #24]
 80023f2:	b913      	cbnz	r3, 80023fa <__swsetup_r+0x16>
 80023f4:	4628      	mov	r0, r5
 80023f6:	f000 f979 	bl	80026ec <__sinit>
 80023fa:	4b2e      	ldr	r3, [pc, #184]	; (80024b4 <__swsetup_r+0xd0>)
 80023fc:	429c      	cmp	r4, r3
 80023fe:	d10f      	bne.n	8002420 <__swsetup_r+0x3c>
 8002400:	686c      	ldr	r4, [r5, #4]
 8002402:	89a3      	ldrh	r3, [r4, #12]
 8002404:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002408:	0719      	lsls	r1, r3, #28
 800240a:	d42c      	bmi.n	8002466 <__swsetup_r+0x82>
 800240c:	06dd      	lsls	r5, r3, #27
 800240e:	d411      	bmi.n	8002434 <__swsetup_r+0x50>
 8002410:	2309      	movs	r3, #9
 8002412:	6033      	str	r3, [r6, #0]
 8002414:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002418:	f04f 30ff 	mov.w	r0, #4294967295
 800241c:	81a3      	strh	r3, [r4, #12]
 800241e:	e03e      	b.n	800249e <__swsetup_r+0xba>
 8002420:	4b25      	ldr	r3, [pc, #148]	; (80024b8 <__swsetup_r+0xd4>)
 8002422:	429c      	cmp	r4, r3
 8002424:	d101      	bne.n	800242a <__swsetup_r+0x46>
 8002426:	68ac      	ldr	r4, [r5, #8]
 8002428:	e7eb      	b.n	8002402 <__swsetup_r+0x1e>
 800242a:	4b24      	ldr	r3, [pc, #144]	; (80024bc <__swsetup_r+0xd8>)
 800242c:	429c      	cmp	r4, r3
 800242e:	bf08      	it	eq
 8002430:	68ec      	ldreq	r4, [r5, #12]
 8002432:	e7e6      	b.n	8002402 <__swsetup_r+0x1e>
 8002434:	0758      	lsls	r0, r3, #29
 8002436:	d512      	bpl.n	800245e <__swsetup_r+0x7a>
 8002438:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800243a:	b141      	cbz	r1, 800244e <__swsetup_r+0x6a>
 800243c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002440:	4299      	cmp	r1, r3
 8002442:	d002      	beq.n	800244a <__swsetup_r+0x66>
 8002444:	4630      	mov	r0, r6
 8002446:	f000 fa57 	bl	80028f8 <_free_r>
 800244a:	2300      	movs	r3, #0
 800244c:	6363      	str	r3, [r4, #52]	; 0x34
 800244e:	89a3      	ldrh	r3, [r4, #12]
 8002450:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002454:	81a3      	strh	r3, [r4, #12]
 8002456:	2300      	movs	r3, #0
 8002458:	6063      	str	r3, [r4, #4]
 800245a:	6923      	ldr	r3, [r4, #16]
 800245c:	6023      	str	r3, [r4, #0]
 800245e:	89a3      	ldrh	r3, [r4, #12]
 8002460:	f043 0308 	orr.w	r3, r3, #8
 8002464:	81a3      	strh	r3, [r4, #12]
 8002466:	6923      	ldr	r3, [r4, #16]
 8002468:	b94b      	cbnz	r3, 800247e <__swsetup_r+0x9a>
 800246a:	89a3      	ldrh	r3, [r4, #12]
 800246c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002470:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002474:	d003      	beq.n	800247e <__swsetup_r+0x9a>
 8002476:	4621      	mov	r1, r4
 8002478:	4630      	mov	r0, r6
 800247a:	f000 f9fd 	bl	8002878 <__smakebuf_r>
 800247e:	89a0      	ldrh	r0, [r4, #12]
 8002480:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002484:	f010 0301 	ands.w	r3, r0, #1
 8002488:	d00a      	beq.n	80024a0 <__swsetup_r+0xbc>
 800248a:	2300      	movs	r3, #0
 800248c:	60a3      	str	r3, [r4, #8]
 800248e:	6963      	ldr	r3, [r4, #20]
 8002490:	425b      	negs	r3, r3
 8002492:	61a3      	str	r3, [r4, #24]
 8002494:	6923      	ldr	r3, [r4, #16]
 8002496:	b943      	cbnz	r3, 80024aa <__swsetup_r+0xc6>
 8002498:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800249c:	d1ba      	bne.n	8002414 <__swsetup_r+0x30>
 800249e:	bd70      	pop	{r4, r5, r6, pc}
 80024a0:	0781      	lsls	r1, r0, #30
 80024a2:	bf58      	it	pl
 80024a4:	6963      	ldrpl	r3, [r4, #20]
 80024a6:	60a3      	str	r3, [r4, #8]
 80024a8:	e7f4      	b.n	8002494 <__swsetup_r+0xb0>
 80024aa:	2000      	movs	r0, #0
 80024ac:	e7f7      	b.n	800249e <__swsetup_r+0xba>
 80024ae:	bf00      	nop
 80024b0:	2000000c 	.word	0x2000000c
 80024b4:	080032c8 	.word	0x080032c8
 80024b8:	080032e8 	.word	0x080032e8
 80024bc:	080032a8 	.word	0x080032a8

080024c0 <__sflush_r>:
 80024c0:	898a      	ldrh	r2, [r1, #12]
 80024c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024c4:	4605      	mov	r5, r0
 80024c6:	0710      	lsls	r0, r2, #28
 80024c8:	460c      	mov	r4, r1
 80024ca:	d457      	bmi.n	800257c <__sflush_r+0xbc>
 80024cc:	684b      	ldr	r3, [r1, #4]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	dc04      	bgt.n	80024dc <__sflush_r+0x1c>
 80024d2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	dc01      	bgt.n	80024dc <__sflush_r+0x1c>
 80024d8:	2000      	movs	r0, #0
 80024da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80024dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80024de:	2e00      	cmp	r6, #0
 80024e0:	d0fa      	beq.n	80024d8 <__sflush_r+0x18>
 80024e2:	2300      	movs	r3, #0
 80024e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80024e8:	682f      	ldr	r7, [r5, #0]
 80024ea:	602b      	str	r3, [r5, #0]
 80024ec:	d032      	beq.n	8002554 <__sflush_r+0x94>
 80024ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80024f0:	89a3      	ldrh	r3, [r4, #12]
 80024f2:	075a      	lsls	r2, r3, #29
 80024f4:	d505      	bpl.n	8002502 <__sflush_r+0x42>
 80024f6:	6863      	ldr	r3, [r4, #4]
 80024f8:	1ac0      	subs	r0, r0, r3
 80024fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80024fc:	b10b      	cbz	r3, 8002502 <__sflush_r+0x42>
 80024fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002500:	1ac0      	subs	r0, r0, r3
 8002502:	2300      	movs	r3, #0
 8002504:	4602      	mov	r2, r0
 8002506:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002508:	4628      	mov	r0, r5
 800250a:	6a21      	ldr	r1, [r4, #32]
 800250c:	47b0      	blx	r6
 800250e:	1c43      	adds	r3, r0, #1
 8002510:	89a3      	ldrh	r3, [r4, #12]
 8002512:	d106      	bne.n	8002522 <__sflush_r+0x62>
 8002514:	6829      	ldr	r1, [r5, #0]
 8002516:	291d      	cmp	r1, #29
 8002518:	d82c      	bhi.n	8002574 <__sflush_r+0xb4>
 800251a:	4a29      	ldr	r2, [pc, #164]	; (80025c0 <__sflush_r+0x100>)
 800251c:	40ca      	lsrs	r2, r1
 800251e:	07d6      	lsls	r6, r2, #31
 8002520:	d528      	bpl.n	8002574 <__sflush_r+0xb4>
 8002522:	2200      	movs	r2, #0
 8002524:	6062      	str	r2, [r4, #4]
 8002526:	6922      	ldr	r2, [r4, #16]
 8002528:	04d9      	lsls	r1, r3, #19
 800252a:	6022      	str	r2, [r4, #0]
 800252c:	d504      	bpl.n	8002538 <__sflush_r+0x78>
 800252e:	1c42      	adds	r2, r0, #1
 8002530:	d101      	bne.n	8002536 <__sflush_r+0x76>
 8002532:	682b      	ldr	r3, [r5, #0]
 8002534:	b903      	cbnz	r3, 8002538 <__sflush_r+0x78>
 8002536:	6560      	str	r0, [r4, #84]	; 0x54
 8002538:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800253a:	602f      	str	r7, [r5, #0]
 800253c:	2900      	cmp	r1, #0
 800253e:	d0cb      	beq.n	80024d8 <__sflush_r+0x18>
 8002540:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002544:	4299      	cmp	r1, r3
 8002546:	d002      	beq.n	800254e <__sflush_r+0x8e>
 8002548:	4628      	mov	r0, r5
 800254a:	f000 f9d5 	bl	80028f8 <_free_r>
 800254e:	2000      	movs	r0, #0
 8002550:	6360      	str	r0, [r4, #52]	; 0x34
 8002552:	e7c2      	b.n	80024da <__sflush_r+0x1a>
 8002554:	6a21      	ldr	r1, [r4, #32]
 8002556:	2301      	movs	r3, #1
 8002558:	4628      	mov	r0, r5
 800255a:	47b0      	blx	r6
 800255c:	1c41      	adds	r1, r0, #1
 800255e:	d1c7      	bne.n	80024f0 <__sflush_r+0x30>
 8002560:	682b      	ldr	r3, [r5, #0]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d0c4      	beq.n	80024f0 <__sflush_r+0x30>
 8002566:	2b1d      	cmp	r3, #29
 8002568:	d001      	beq.n	800256e <__sflush_r+0xae>
 800256a:	2b16      	cmp	r3, #22
 800256c:	d101      	bne.n	8002572 <__sflush_r+0xb2>
 800256e:	602f      	str	r7, [r5, #0]
 8002570:	e7b2      	b.n	80024d8 <__sflush_r+0x18>
 8002572:	89a3      	ldrh	r3, [r4, #12]
 8002574:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002578:	81a3      	strh	r3, [r4, #12]
 800257a:	e7ae      	b.n	80024da <__sflush_r+0x1a>
 800257c:	690f      	ldr	r7, [r1, #16]
 800257e:	2f00      	cmp	r7, #0
 8002580:	d0aa      	beq.n	80024d8 <__sflush_r+0x18>
 8002582:	0793      	lsls	r3, r2, #30
 8002584:	bf18      	it	ne
 8002586:	2300      	movne	r3, #0
 8002588:	680e      	ldr	r6, [r1, #0]
 800258a:	bf08      	it	eq
 800258c:	694b      	ldreq	r3, [r1, #20]
 800258e:	1bf6      	subs	r6, r6, r7
 8002590:	600f      	str	r7, [r1, #0]
 8002592:	608b      	str	r3, [r1, #8]
 8002594:	2e00      	cmp	r6, #0
 8002596:	dd9f      	ble.n	80024d8 <__sflush_r+0x18>
 8002598:	4633      	mov	r3, r6
 800259a:	463a      	mov	r2, r7
 800259c:	4628      	mov	r0, r5
 800259e:	6a21      	ldr	r1, [r4, #32]
 80025a0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80025a4:	47e0      	blx	ip
 80025a6:	2800      	cmp	r0, #0
 80025a8:	dc06      	bgt.n	80025b8 <__sflush_r+0xf8>
 80025aa:	89a3      	ldrh	r3, [r4, #12]
 80025ac:	f04f 30ff 	mov.w	r0, #4294967295
 80025b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025b4:	81a3      	strh	r3, [r4, #12]
 80025b6:	e790      	b.n	80024da <__sflush_r+0x1a>
 80025b8:	4407      	add	r7, r0
 80025ba:	1a36      	subs	r6, r6, r0
 80025bc:	e7ea      	b.n	8002594 <__sflush_r+0xd4>
 80025be:	bf00      	nop
 80025c0:	20400001 	.word	0x20400001

080025c4 <_fflush_r>:
 80025c4:	b538      	push	{r3, r4, r5, lr}
 80025c6:	690b      	ldr	r3, [r1, #16]
 80025c8:	4605      	mov	r5, r0
 80025ca:	460c      	mov	r4, r1
 80025cc:	b913      	cbnz	r3, 80025d4 <_fflush_r+0x10>
 80025ce:	2500      	movs	r5, #0
 80025d0:	4628      	mov	r0, r5
 80025d2:	bd38      	pop	{r3, r4, r5, pc}
 80025d4:	b118      	cbz	r0, 80025de <_fflush_r+0x1a>
 80025d6:	6983      	ldr	r3, [r0, #24]
 80025d8:	b90b      	cbnz	r3, 80025de <_fflush_r+0x1a>
 80025da:	f000 f887 	bl	80026ec <__sinit>
 80025de:	4b14      	ldr	r3, [pc, #80]	; (8002630 <_fflush_r+0x6c>)
 80025e0:	429c      	cmp	r4, r3
 80025e2:	d11b      	bne.n	800261c <_fflush_r+0x58>
 80025e4:	686c      	ldr	r4, [r5, #4]
 80025e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d0ef      	beq.n	80025ce <_fflush_r+0xa>
 80025ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80025f0:	07d0      	lsls	r0, r2, #31
 80025f2:	d404      	bmi.n	80025fe <_fflush_r+0x3a>
 80025f4:	0599      	lsls	r1, r3, #22
 80025f6:	d402      	bmi.n	80025fe <_fflush_r+0x3a>
 80025f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80025fa:	f000 f915 	bl	8002828 <__retarget_lock_acquire_recursive>
 80025fe:	4628      	mov	r0, r5
 8002600:	4621      	mov	r1, r4
 8002602:	f7ff ff5d 	bl	80024c0 <__sflush_r>
 8002606:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002608:	4605      	mov	r5, r0
 800260a:	07da      	lsls	r2, r3, #31
 800260c:	d4e0      	bmi.n	80025d0 <_fflush_r+0xc>
 800260e:	89a3      	ldrh	r3, [r4, #12]
 8002610:	059b      	lsls	r3, r3, #22
 8002612:	d4dd      	bmi.n	80025d0 <_fflush_r+0xc>
 8002614:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002616:	f000 f908 	bl	800282a <__retarget_lock_release_recursive>
 800261a:	e7d9      	b.n	80025d0 <_fflush_r+0xc>
 800261c:	4b05      	ldr	r3, [pc, #20]	; (8002634 <_fflush_r+0x70>)
 800261e:	429c      	cmp	r4, r3
 8002620:	d101      	bne.n	8002626 <_fflush_r+0x62>
 8002622:	68ac      	ldr	r4, [r5, #8]
 8002624:	e7df      	b.n	80025e6 <_fflush_r+0x22>
 8002626:	4b04      	ldr	r3, [pc, #16]	; (8002638 <_fflush_r+0x74>)
 8002628:	429c      	cmp	r4, r3
 800262a:	bf08      	it	eq
 800262c:	68ec      	ldreq	r4, [r5, #12]
 800262e:	e7da      	b.n	80025e6 <_fflush_r+0x22>
 8002630:	080032c8 	.word	0x080032c8
 8002634:	080032e8 	.word	0x080032e8
 8002638:	080032a8 	.word	0x080032a8

0800263c <std>:
 800263c:	2300      	movs	r3, #0
 800263e:	b510      	push	{r4, lr}
 8002640:	4604      	mov	r4, r0
 8002642:	e9c0 3300 	strd	r3, r3, [r0]
 8002646:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800264a:	6083      	str	r3, [r0, #8]
 800264c:	8181      	strh	r1, [r0, #12]
 800264e:	6643      	str	r3, [r0, #100]	; 0x64
 8002650:	81c2      	strh	r2, [r0, #14]
 8002652:	6183      	str	r3, [r0, #24]
 8002654:	4619      	mov	r1, r3
 8002656:	2208      	movs	r2, #8
 8002658:	305c      	adds	r0, #92	; 0x5c
 800265a:	f7ff fddb 	bl	8002214 <memset>
 800265e:	4b05      	ldr	r3, [pc, #20]	; (8002674 <std+0x38>)
 8002660:	6224      	str	r4, [r4, #32]
 8002662:	6263      	str	r3, [r4, #36]	; 0x24
 8002664:	4b04      	ldr	r3, [pc, #16]	; (8002678 <std+0x3c>)
 8002666:	62a3      	str	r3, [r4, #40]	; 0x28
 8002668:	4b04      	ldr	r3, [pc, #16]	; (800267c <std+0x40>)
 800266a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800266c:	4b04      	ldr	r3, [pc, #16]	; (8002680 <std+0x44>)
 800266e:	6323      	str	r3, [r4, #48]	; 0x30
 8002670:	bd10      	pop	{r4, pc}
 8002672:	bf00      	nop
 8002674:	080030ad 	.word	0x080030ad
 8002678:	080030cf 	.word	0x080030cf
 800267c:	08003107 	.word	0x08003107
 8002680:	0800312b 	.word	0x0800312b

08002684 <_cleanup_r>:
 8002684:	4901      	ldr	r1, [pc, #4]	; (800268c <_cleanup_r+0x8>)
 8002686:	f000 b8af 	b.w	80027e8 <_fwalk_reent>
 800268a:	bf00      	nop
 800268c:	080025c5 	.word	0x080025c5

08002690 <__sfmoreglue>:
 8002690:	2268      	movs	r2, #104	; 0x68
 8002692:	b570      	push	{r4, r5, r6, lr}
 8002694:	1e4d      	subs	r5, r1, #1
 8002696:	4355      	muls	r5, r2
 8002698:	460e      	mov	r6, r1
 800269a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800269e:	f000 f993 	bl	80029c8 <_malloc_r>
 80026a2:	4604      	mov	r4, r0
 80026a4:	b140      	cbz	r0, 80026b8 <__sfmoreglue+0x28>
 80026a6:	2100      	movs	r1, #0
 80026a8:	e9c0 1600 	strd	r1, r6, [r0]
 80026ac:	300c      	adds	r0, #12
 80026ae:	60a0      	str	r0, [r4, #8]
 80026b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80026b4:	f7ff fdae 	bl	8002214 <memset>
 80026b8:	4620      	mov	r0, r4
 80026ba:	bd70      	pop	{r4, r5, r6, pc}

080026bc <__sfp_lock_acquire>:
 80026bc:	4801      	ldr	r0, [pc, #4]	; (80026c4 <__sfp_lock_acquire+0x8>)
 80026be:	f000 b8b3 	b.w	8002828 <__retarget_lock_acquire_recursive>
 80026c2:	bf00      	nop
 80026c4:	20000125 	.word	0x20000125

080026c8 <__sfp_lock_release>:
 80026c8:	4801      	ldr	r0, [pc, #4]	; (80026d0 <__sfp_lock_release+0x8>)
 80026ca:	f000 b8ae 	b.w	800282a <__retarget_lock_release_recursive>
 80026ce:	bf00      	nop
 80026d0:	20000125 	.word	0x20000125

080026d4 <__sinit_lock_acquire>:
 80026d4:	4801      	ldr	r0, [pc, #4]	; (80026dc <__sinit_lock_acquire+0x8>)
 80026d6:	f000 b8a7 	b.w	8002828 <__retarget_lock_acquire_recursive>
 80026da:	bf00      	nop
 80026dc:	20000126 	.word	0x20000126

080026e0 <__sinit_lock_release>:
 80026e0:	4801      	ldr	r0, [pc, #4]	; (80026e8 <__sinit_lock_release+0x8>)
 80026e2:	f000 b8a2 	b.w	800282a <__retarget_lock_release_recursive>
 80026e6:	bf00      	nop
 80026e8:	20000126 	.word	0x20000126

080026ec <__sinit>:
 80026ec:	b510      	push	{r4, lr}
 80026ee:	4604      	mov	r4, r0
 80026f0:	f7ff fff0 	bl	80026d4 <__sinit_lock_acquire>
 80026f4:	69a3      	ldr	r3, [r4, #24]
 80026f6:	b11b      	cbz	r3, 8002700 <__sinit+0x14>
 80026f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80026fc:	f7ff bff0 	b.w	80026e0 <__sinit_lock_release>
 8002700:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002704:	6523      	str	r3, [r4, #80]	; 0x50
 8002706:	4b13      	ldr	r3, [pc, #76]	; (8002754 <__sinit+0x68>)
 8002708:	4a13      	ldr	r2, [pc, #76]	; (8002758 <__sinit+0x6c>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	62a2      	str	r2, [r4, #40]	; 0x28
 800270e:	42a3      	cmp	r3, r4
 8002710:	bf08      	it	eq
 8002712:	2301      	moveq	r3, #1
 8002714:	4620      	mov	r0, r4
 8002716:	bf08      	it	eq
 8002718:	61a3      	streq	r3, [r4, #24]
 800271a:	f000 f81f 	bl	800275c <__sfp>
 800271e:	6060      	str	r0, [r4, #4]
 8002720:	4620      	mov	r0, r4
 8002722:	f000 f81b 	bl	800275c <__sfp>
 8002726:	60a0      	str	r0, [r4, #8]
 8002728:	4620      	mov	r0, r4
 800272a:	f000 f817 	bl	800275c <__sfp>
 800272e:	2200      	movs	r2, #0
 8002730:	2104      	movs	r1, #4
 8002732:	60e0      	str	r0, [r4, #12]
 8002734:	6860      	ldr	r0, [r4, #4]
 8002736:	f7ff ff81 	bl	800263c <std>
 800273a:	2201      	movs	r2, #1
 800273c:	2109      	movs	r1, #9
 800273e:	68a0      	ldr	r0, [r4, #8]
 8002740:	f7ff ff7c 	bl	800263c <std>
 8002744:	2202      	movs	r2, #2
 8002746:	2112      	movs	r1, #18
 8002748:	68e0      	ldr	r0, [r4, #12]
 800274a:	f7ff ff77 	bl	800263c <std>
 800274e:	2301      	movs	r3, #1
 8002750:	61a3      	str	r3, [r4, #24]
 8002752:	e7d1      	b.n	80026f8 <__sinit+0xc>
 8002754:	080032a4 	.word	0x080032a4
 8002758:	08002685 	.word	0x08002685

0800275c <__sfp>:
 800275c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800275e:	4607      	mov	r7, r0
 8002760:	f7ff ffac 	bl	80026bc <__sfp_lock_acquire>
 8002764:	4b1e      	ldr	r3, [pc, #120]	; (80027e0 <__sfp+0x84>)
 8002766:	681e      	ldr	r6, [r3, #0]
 8002768:	69b3      	ldr	r3, [r6, #24]
 800276a:	b913      	cbnz	r3, 8002772 <__sfp+0x16>
 800276c:	4630      	mov	r0, r6
 800276e:	f7ff ffbd 	bl	80026ec <__sinit>
 8002772:	3648      	adds	r6, #72	; 0x48
 8002774:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002778:	3b01      	subs	r3, #1
 800277a:	d503      	bpl.n	8002784 <__sfp+0x28>
 800277c:	6833      	ldr	r3, [r6, #0]
 800277e:	b30b      	cbz	r3, 80027c4 <__sfp+0x68>
 8002780:	6836      	ldr	r6, [r6, #0]
 8002782:	e7f7      	b.n	8002774 <__sfp+0x18>
 8002784:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002788:	b9d5      	cbnz	r5, 80027c0 <__sfp+0x64>
 800278a:	4b16      	ldr	r3, [pc, #88]	; (80027e4 <__sfp+0x88>)
 800278c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002790:	60e3      	str	r3, [r4, #12]
 8002792:	6665      	str	r5, [r4, #100]	; 0x64
 8002794:	f000 f847 	bl	8002826 <__retarget_lock_init_recursive>
 8002798:	f7ff ff96 	bl	80026c8 <__sfp_lock_release>
 800279c:	2208      	movs	r2, #8
 800279e:	4629      	mov	r1, r5
 80027a0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80027a4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80027a8:	6025      	str	r5, [r4, #0]
 80027aa:	61a5      	str	r5, [r4, #24]
 80027ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80027b0:	f7ff fd30 	bl	8002214 <memset>
 80027b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80027b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80027bc:	4620      	mov	r0, r4
 80027be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80027c0:	3468      	adds	r4, #104	; 0x68
 80027c2:	e7d9      	b.n	8002778 <__sfp+0x1c>
 80027c4:	2104      	movs	r1, #4
 80027c6:	4638      	mov	r0, r7
 80027c8:	f7ff ff62 	bl	8002690 <__sfmoreglue>
 80027cc:	4604      	mov	r4, r0
 80027ce:	6030      	str	r0, [r6, #0]
 80027d0:	2800      	cmp	r0, #0
 80027d2:	d1d5      	bne.n	8002780 <__sfp+0x24>
 80027d4:	f7ff ff78 	bl	80026c8 <__sfp_lock_release>
 80027d8:	230c      	movs	r3, #12
 80027da:	603b      	str	r3, [r7, #0]
 80027dc:	e7ee      	b.n	80027bc <__sfp+0x60>
 80027de:	bf00      	nop
 80027e0:	080032a4 	.word	0x080032a4
 80027e4:	ffff0001 	.word	0xffff0001

080027e8 <_fwalk_reent>:
 80027e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80027ec:	4606      	mov	r6, r0
 80027ee:	4688      	mov	r8, r1
 80027f0:	2700      	movs	r7, #0
 80027f2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80027f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80027fa:	f1b9 0901 	subs.w	r9, r9, #1
 80027fe:	d505      	bpl.n	800280c <_fwalk_reent+0x24>
 8002800:	6824      	ldr	r4, [r4, #0]
 8002802:	2c00      	cmp	r4, #0
 8002804:	d1f7      	bne.n	80027f6 <_fwalk_reent+0xe>
 8002806:	4638      	mov	r0, r7
 8002808:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800280c:	89ab      	ldrh	r3, [r5, #12]
 800280e:	2b01      	cmp	r3, #1
 8002810:	d907      	bls.n	8002822 <_fwalk_reent+0x3a>
 8002812:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002816:	3301      	adds	r3, #1
 8002818:	d003      	beq.n	8002822 <_fwalk_reent+0x3a>
 800281a:	4629      	mov	r1, r5
 800281c:	4630      	mov	r0, r6
 800281e:	47c0      	blx	r8
 8002820:	4307      	orrs	r7, r0
 8002822:	3568      	adds	r5, #104	; 0x68
 8002824:	e7e9      	b.n	80027fa <_fwalk_reent+0x12>

08002826 <__retarget_lock_init_recursive>:
 8002826:	4770      	bx	lr

08002828 <__retarget_lock_acquire_recursive>:
 8002828:	4770      	bx	lr

0800282a <__retarget_lock_release_recursive>:
 800282a:	4770      	bx	lr

0800282c <__swhatbuf_r>:
 800282c:	b570      	push	{r4, r5, r6, lr}
 800282e:	460e      	mov	r6, r1
 8002830:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002834:	4614      	mov	r4, r2
 8002836:	2900      	cmp	r1, #0
 8002838:	461d      	mov	r5, r3
 800283a:	b096      	sub	sp, #88	; 0x58
 800283c:	da08      	bge.n	8002850 <__swhatbuf_r+0x24>
 800283e:	2200      	movs	r2, #0
 8002840:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8002844:	602a      	str	r2, [r5, #0]
 8002846:	061a      	lsls	r2, r3, #24
 8002848:	d410      	bmi.n	800286c <__swhatbuf_r+0x40>
 800284a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800284e:	e00e      	b.n	800286e <__swhatbuf_r+0x42>
 8002850:	466a      	mov	r2, sp
 8002852:	f000 fc91 	bl	8003178 <_fstat_r>
 8002856:	2800      	cmp	r0, #0
 8002858:	dbf1      	blt.n	800283e <__swhatbuf_r+0x12>
 800285a:	9a01      	ldr	r2, [sp, #4]
 800285c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002860:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002864:	425a      	negs	r2, r3
 8002866:	415a      	adcs	r2, r3
 8002868:	602a      	str	r2, [r5, #0]
 800286a:	e7ee      	b.n	800284a <__swhatbuf_r+0x1e>
 800286c:	2340      	movs	r3, #64	; 0x40
 800286e:	2000      	movs	r0, #0
 8002870:	6023      	str	r3, [r4, #0]
 8002872:	b016      	add	sp, #88	; 0x58
 8002874:	bd70      	pop	{r4, r5, r6, pc}
	...

08002878 <__smakebuf_r>:
 8002878:	898b      	ldrh	r3, [r1, #12]
 800287a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800287c:	079d      	lsls	r5, r3, #30
 800287e:	4606      	mov	r6, r0
 8002880:	460c      	mov	r4, r1
 8002882:	d507      	bpl.n	8002894 <__smakebuf_r+0x1c>
 8002884:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002888:	6023      	str	r3, [r4, #0]
 800288a:	6123      	str	r3, [r4, #16]
 800288c:	2301      	movs	r3, #1
 800288e:	6163      	str	r3, [r4, #20]
 8002890:	b002      	add	sp, #8
 8002892:	bd70      	pop	{r4, r5, r6, pc}
 8002894:	466a      	mov	r2, sp
 8002896:	ab01      	add	r3, sp, #4
 8002898:	f7ff ffc8 	bl	800282c <__swhatbuf_r>
 800289c:	9900      	ldr	r1, [sp, #0]
 800289e:	4605      	mov	r5, r0
 80028a0:	4630      	mov	r0, r6
 80028a2:	f000 f891 	bl	80029c8 <_malloc_r>
 80028a6:	b948      	cbnz	r0, 80028bc <__smakebuf_r+0x44>
 80028a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80028ac:	059a      	lsls	r2, r3, #22
 80028ae:	d4ef      	bmi.n	8002890 <__smakebuf_r+0x18>
 80028b0:	f023 0303 	bic.w	r3, r3, #3
 80028b4:	f043 0302 	orr.w	r3, r3, #2
 80028b8:	81a3      	strh	r3, [r4, #12]
 80028ba:	e7e3      	b.n	8002884 <__smakebuf_r+0xc>
 80028bc:	4b0d      	ldr	r3, [pc, #52]	; (80028f4 <__smakebuf_r+0x7c>)
 80028be:	62b3      	str	r3, [r6, #40]	; 0x28
 80028c0:	89a3      	ldrh	r3, [r4, #12]
 80028c2:	6020      	str	r0, [r4, #0]
 80028c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028c8:	81a3      	strh	r3, [r4, #12]
 80028ca:	9b00      	ldr	r3, [sp, #0]
 80028cc:	6120      	str	r0, [r4, #16]
 80028ce:	6163      	str	r3, [r4, #20]
 80028d0:	9b01      	ldr	r3, [sp, #4]
 80028d2:	b15b      	cbz	r3, 80028ec <__smakebuf_r+0x74>
 80028d4:	4630      	mov	r0, r6
 80028d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80028da:	f000 fc5f 	bl	800319c <_isatty_r>
 80028de:	b128      	cbz	r0, 80028ec <__smakebuf_r+0x74>
 80028e0:	89a3      	ldrh	r3, [r4, #12]
 80028e2:	f023 0303 	bic.w	r3, r3, #3
 80028e6:	f043 0301 	orr.w	r3, r3, #1
 80028ea:	81a3      	strh	r3, [r4, #12]
 80028ec:	89a0      	ldrh	r0, [r4, #12]
 80028ee:	4305      	orrs	r5, r0
 80028f0:	81a5      	strh	r5, [r4, #12]
 80028f2:	e7cd      	b.n	8002890 <__smakebuf_r+0x18>
 80028f4:	08002685 	.word	0x08002685

080028f8 <_free_r>:
 80028f8:	b538      	push	{r3, r4, r5, lr}
 80028fa:	4605      	mov	r5, r0
 80028fc:	2900      	cmp	r1, #0
 80028fe:	d040      	beq.n	8002982 <_free_r+0x8a>
 8002900:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002904:	1f0c      	subs	r4, r1, #4
 8002906:	2b00      	cmp	r3, #0
 8002908:	bfb8      	it	lt
 800290a:	18e4      	addlt	r4, r4, r3
 800290c:	f000 fc76 	bl	80031fc <__malloc_lock>
 8002910:	4a1c      	ldr	r2, [pc, #112]	; (8002984 <_free_r+0x8c>)
 8002912:	6813      	ldr	r3, [r2, #0]
 8002914:	b933      	cbnz	r3, 8002924 <_free_r+0x2c>
 8002916:	6063      	str	r3, [r4, #4]
 8002918:	6014      	str	r4, [r2, #0]
 800291a:	4628      	mov	r0, r5
 800291c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002920:	f000 bc72 	b.w	8003208 <__malloc_unlock>
 8002924:	42a3      	cmp	r3, r4
 8002926:	d908      	bls.n	800293a <_free_r+0x42>
 8002928:	6820      	ldr	r0, [r4, #0]
 800292a:	1821      	adds	r1, r4, r0
 800292c:	428b      	cmp	r3, r1
 800292e:	bf01      	itttt	eq
 8002930:	6819      	ldreq	r1, [r3, #0]
 8002932:	685b      	ldreq	r3, [r3, #4]
 8002934:	1809      	addeq	r1, r1, r0
 8002936:	6021      	streq	r1, [r4, #0]
 8002938:	e7ed      	b.n	8002916 <_free_r+0x1e>
 800293a:	461a      	mov	r2, r3
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	b10b      	cbz	r3, 8002944 <_free_r+0x4c>
 8002940:	42a3      	cmp	r3, r4
 8002942:	d9fa      	bls.n	800293a <_free_r+0x42>
 8002944:	6811      	ldr	r1, [r2, #0]
 8002946:	1850      	adds	r0, r2, r1
 8002948:	42a0      	cmp	r0, r4
 800294a:	d10b      	bne.n	8002964 <_free_r+0x6c>
 800294c:	6820      	ldr	r0, [r4, #0]
 800294e:	4401      	add	r1, r0
 8002950:	1850      	adds	r0, r2, r1
 8002952:	4283      	cmp	r3, r0
 8002954:	6011      	str	r1, [r2, #0]
 8002956:	d1e0      	bne.n	800291a <_free_r+0x22>
 8002958:	6818      	ldr	r0, [r3, #0]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	4401      	add	r1, r0
 800295e:	6011      	str	r1, [r2, #0]
 8002960:	6053      	str	r3, [r2, #4]
 8002962:	e7da      	b.n	800291a <_free_r+0x22>
 8002964:	d902      	bls.n	800296c <_free_r+0x74>
 8002966:	230c      	movs	r3, #12
 8002968:	602b      	str	r3, [r5, #0]
 800296a:	e7d6      	b.n	800291a <_free_r+0x22>
 800296c:	6820      	ldr	r0, [r4, #0]
 800296e:	1821      	adds	r1, r4, r0
 8002970:	428b      	cmp	r3, r1
 8002972:	bf01      	itttt	eq
 8002974:	6819      	ldreq	r1, [r3, #0]
 8002976:	685b      	ldreq	r3, [r3, #4]
 8002978:	1809      	addeq	r1, r1, r0
 800297a:	6021      	streq	r1, [r4, #0]
 800297c:	6063      	str	r3, [r4, #4]
 800297e:	6054      	str	r4, [r2, #4]
 8002980:	e7cb      	b.n	800291a <_free_r+0x22>
 8002982:	bd38      	pop	{r3, r4, r5, pc}
 8002984:	20000128 	.word	0x20000128

08002988 <sbrk_aligned>:
 8002988:	b570      	push	{r4, r5, r6, lr}
 800298a:	4e0e      	ldr	r6, [pc, #56]	; (80029c4 <sbrk_aligned+0x3c>)
 800298c:	460c      	mov	r4, r1
 800298e:	6831      	ldr	r1, [r6, #0]
 8002990:	4605      	mov	r5, r0
 8002992:	b911      	cbnz	r1, 800299a <sbrk_aligned+0x12>
 8002994:	f000 fb7a 	bl	800308c <_sbrk_r>
 8002998:	6030      	str	r0, [r6, #0]
 800299a:	4621      	mov	r1, r4
 800299c:	4628      	mov	r0, r5
 800299e:	f000 fb75 	bl	800308c <_sbrk_r>
 80029a2:	1c43      	adds	r3, r0, #1
 80029a4:	d00a      	beq.n	80029bc <sbrk_aligned+0x34>
 80029a6:	1cc4      	adds	r4, r0, #3
 80029a8:	f024 0403 	bic.w	r4, r4, #3
 80029ac:	42a0      	cmp	r0, r4
 80029ae:	d007      	beq.n	80029c0 <sbrk_aligned+0x38>
 80029b0:	1a21      	subs	r1, r4, r0
 80029b2:	4628      	mov	r0, r5
 80029b4:	f000 fb6a 	bl	800308c <_sbrk_r>
 80029b8:	3001      	adds	r0, #1
 80029ba:	d101      	bne.n	80029c0 <sbrk_aligned+0x38>
 80029bc:	f04f 34ff 	mov.w	r4, #4294967295
 80029c0:	4620      	mov	r0, r4
 80029c2:	bd70      	pop	{r4, r5, r6, pc}
 80029c4:	2000012c 	.word	0x2000012c

080029c8 <_malloc_r>:
 80029c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80029cc:	1ccd      	adds	r5, r1, #3
 80029ce:	f025 0503 	bic.w	r5, r5, #3
 80029d2:	3508      	adds	r5, #8
 80029d4:	2d0c      	cmp	r5, #12
 80029d6:	bf38      	it	cc
 80029d8:	250c      	movcc	r5, #12
 80029da:	2d00      	cmp	r5, #0
 80029dc:	4607      	mov	r7, r0
 80029de:	db01      	blt.n	80029e4 <_malloc_r+0x1c>
 80029e0:	42a9      	cmp	r1, r5
 80029e2:	d905      	bls.n	80029f0 <_malloc_r+0x28>
 80029e4:	230c      	movs	r3, #12
 80029e6:	2600      	movs	r6, #0
 80029e8:	603b      	str	r3, [r7, #0]
 80029ea:	4630      	mov	r0, r6
 80029ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80029f0:	4e2e      	ldr	r6, [pc, #184]	; (8002aac <_malloc_r+0xe4>)
 80029f2:	f000 fc03 	bl	80031fc <__malloc_lock>
 80029f6:	6833      	ldr	r3, [r6, #0]
 80029f8:	461c      	mov	r4, r3
 80029fa:	bb34      	cbnz	r4, 8002a4a <_malloc_r+0x82>
 80029fc:	4629      	mov	r1, r5
 80029fe:	4638      	mov	r0, r7
 8002a00:	f7ff ffc2 	bl	8002988 <sbrk_aligned>
 8002a04:	1c43      	adds	r3, r0, #1
 8002a06:	4604      	mov	r4, r0
 8002a08:	d14d      	bne.n	8002aa6 <_malloc_r+0xde>
 8002a0a:	6834      	ldr	r4, [r6, #0]
 8002a0c:	4626      	mov	r6, r4
 8002a0e:	2e00      	cmp	r6, #0
 8002a10:	d140      	bne.n	8002a94 <_malloc_r+0xcc>
 8002a12:	6823      	ldr	r3, [r4, #0]
 8002a14:	4631      	mov	r1, r6
 8002a16:	4638      	mov	r0, r7
 8002a18:	eb04 0803 	add.w	r8, r4, r3
 8002a1c:	f000 fb36 	bl	800308c <_sbrk_r>
 8002a20:	4580      	cmp	r8, r0
 8002a22:	d13a      	bne.n	8002a9a <_malloc_r+0xd2>
 8002a24:	6821      	ldr	r1, [r4, #0]
 8002a26:	3503      	adds	r5, #3
 8002a28:	1a6d      	subs	r5, r5, r1
 8002a2a:	f025 0503 	bic.w	r5, r5, #3
 8002a2e:	3508      	adds	r5, #8
 8002a30:	2d0c      	cmp	r5, #12
 8002a32:	bf38      	it	cc
 8002a34:	250c      	movcc	r5, #12
 8002a36:	4638      	mov	r0, r7
 8002a38:	4629      	mov	r1, r5
 8002a3a:	f7ff ffa5 	bl	8002988 <sbrk_aligned>
 8002a3e:	3001      	adds	r0, #1
 8002a40:	d02b      	beq.n	8002a9a <_malloc_r+0xd2>
 8002a42:	6823      	ldr	r3, [r4, #0]
 8002a44:	442b      	add	r3, r5
 8002a46:	6023      	str	r3, [r4, #0]
 8002a48:	e00e      	b.n	8002a68 <_malloc_r+0xa0>
 8002a4a:	6822      	ldr	r2, [r4, #0]
 8002a4c:	1b52      	subs	r2, r2, r5
 8002a4e:	d41e      	bmi.n	8002a8e <_malloc_r+0xc6>
 8002a50:	2a0b      	cmp	r2, #11
 8002a52:	d916      	bls.n	8002a82 <_malloc_r+0xba>
 8002a54:	1961      	adds	r1, r4, r5
 8002a56:	42a3      	cmp	r3, r4
 8002a58:	6025      	str	r5, [r4, #0]
 8002a5a:	bf18      	it	ne
 8002a5c:	6059      	strne	r1, [r3, #4]
 8002a5e:	6863      	ldr	r3, [r4, #4]
 8002a60:	bf08      	it	eq
 8002a62:	6031      	streq	r1, [r6, #0]
 8002a64:	5162      	str	r2, [r4, r5]
 8002a66:	604b      	str	r3, [r1, #4]
 8002a68:	4638      	mov	r0, r7
 8002a6a:	f104 060b 	add.w	r6, r4, #11
 8002a6e:	f000 fbcb 	bl	8003208 <__malloc_unlock>
 8002a72:	f026 0607 	bic.w	r6, r6, #7
 8002a76:	1d23      	adds	r3, r4, #4
 8002a78:	1af2      	subs	r2, r6, r3
 8002a7a:	d0b6      	beq.n	80029ea <_malloc_r+0x22>
 8002a7c:	1b9b      	subs	r3, r3, r6
 8002a7e:	50a3      	str	r3, [r4, r2]
 8002a80:	e7b3      	b.n	80029ea <_malloc_r+0x22>
 8002a82:	6862      	ldr	r2, [r4, #4]
 8002a84:	42a3      	cmp	r3, r4
 8002a86:	bf0c      	ite	eq
 8002a88:	6032      	streq	r2, [r6, #0]
 8002a8a:	605a      	strne	r2, [r3, #4]
 8002a8c:	e7ec      	b.n	8002a68 <_malloc_r+0xa0>
 8002a8e:	4623      	mov	r3, r4
 8002a90:	6864      	ldr	r4, [r4, #4]
 8002a92:	e7b2      	b.n	80029fa <_malloc_r+0x32>
 8002a94:	4634      	mov	r4, r6
 8002a96:	6876      	ldr	r6, [r6, #4]
 8002a98:	e7b9      	b.n	8002a0e <_malloc_r+0x46>
 8002a9a:	230c      	movs	r3, #12
 8002a9c:	4638      	mov	r0, r7
 8002a9e:	603b      	str	r3, [r7, #0]
 8002aa0:	f000 fbb2 	bl	8003208 <__malloc_unlock>
 8002aa4:	e7a1      	b.n	80029ea <_malloc_r+0x22>
 8002aa6:	6025      	str	r5, [r4, #0]
 8002aa8:	e7de      	b.n	8002a68 <_malloc_r+0xa0>
 8002aaa:	bf00      	nop
 8002aac:	20000128 	.word	0x20000128

08002ab0 <__sfputc_r>:
 8002ab0:	6893      	ldr	r3, [r2, #8]
 8002ab2:	b410      	push	{r4}
 8002ab4:	3b01      	subs	r3, #1
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	6093      	str	r3, [r2, #8]
 8002aba:	da07      	bge.n	8002acc <__sfputc_r+0x1c>
 8002abc:	6994      	ldr	r4, [r2, #24]
 8002abe:	42a3      	cmp	r3, r4
 8002ac0:	db01      	blt.n	8002ac6 <__sfputc_r+0x16>
 8002ac2:	290a      	cmp	r1, #10
 8002ac4:	d102      	bne.n	8002acc <__sfputc_r+0x1c>
 8002ac6:	bc10      	pop	{r4}
 8002ac8:	f7ff bc3a 	b.w	8002340 <__swbuf_r>
 8002acc:	6813      	ldr	r3, [r2, #0]
 8002ace:	1c58      	adds	r0, r3, #1
 8002ad0:	6010      	str	r0, [r2, #0]
 8002ad2:	7019      	strb	r1, [r3, #0]
 8002ad4:	4608      	mov	r0, r1
 8002ad6:	bc10      	pop	{r4}
 8002ad8:	4770      	bx	lr

08002ada <__sfputs_r>:
 8002ada:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002adc:	4606      	mov	r6, r0
 8002ade:	460f      	mov	r7, r1
 8002ae0:	4614      	mov	r4, r2
 8002ae2:	18d5      	adds	r5, r2, r3
 8002ae4:	42ac      	cmp	r4, r5
 8002ae6:	d101      	bne.n	8002aec <__sfputs_r+0x12>
 8002ae8:	2000      	movs	r0, #0
 8002aea:	e007      	b.n	8002afc <__sfputs_r+0x22>
 8002aec:	463a      	mov	r2, r7
 8002aee:	4630      	mov	r0, r6
 8002af0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002af4:	f7ff ffdc 	bl	8002ab0 <__sfputc_r>
 8002af8:	1c43      	adds	r3, r0, #1
 8002afa:	d1f3      	bne.n	8002ae4 <__sfputs_r+0xa>
 8002afc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002b00 <_vfiprintf_r>:
 8002b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b04:	460d      	mov	r5, r1
 8002b06:	4614      	mov	r4, r2
 8002b08:	4698      	mov	r8, r3
 8002b0a:	4606      	mov	r6, r0
 8002b0c:	b09d      	sub	sp, #116	; 0x74
 8002b0e:	b118      	cbz	r0, 8002b18 <_vfiprintf_r+0x18>
 8002b10:	6983      	ldr	r3, [r0, #24]
 8002b12:	b90b      	cbnz	r3, 8002b18 <_vfiprintf_r+0x18>
 8002b14:	f7ff fdea 	bl	80026ec <__sinit>
 8002b18:	4b89      	ldr	r3, [pc, #548]	; (8002d40 <_vfiprintf_r+0x240>)
 8002b1a:	429d      	cmp	r5, r3
 8002b1c:	d11b      	bne.n	8002b56 <_vfiprintf_r+0x56>
 8002b1e:	6875      	ldr	r5, [r6, #4]
 8002b20:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002b22:	07d9      	lsls	r1, r3, #31
 8002b24:	d405      	bmi.n	8002b32 <_vfiprintf_r+0x32>
 8002b26:	89ab      	ldrh	r3, [r5, #12]
 8002b28:	059a      	lsls	r2, r3, #22
 8002b2a:	d402      	bmi.n	8002b32 <_vfiprintf_r+0x32>
 8002b2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002b2e:	f7ff fe7b 	bl	8002828 <__retarget_lock_acquire_recursive>
 8002b32:	89ab      	ldrh	r3, [r5, #12]
 8002b34:	071b      	lsls	r3, r3, #28
 8002b36:	d501      	bpl.n	8002b3c <_vfiprintf_r+0x3c>
 8002b38:	692b      	ldr	r3, [r5, #16]
 8002b3a:	b9eb      	cbnz	r3, 8002b78 <_vfiprintf_r+0x78>
 8002b3c:	4629      	mov	r1, r5
 8002b3e:	4630      	mov	r0, r6
 8002b40:	f7ff fc50 	bl	80023e4 <__swsetup_r>
 8002b44:	b1c0      	cbz	r0, 8002b78 <_vfiprintf_r+0x78>
 8002b46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002b48:	07dc      	lsls	r4, r3, #31
 8002b4a:	d50e      	bpl.n	8002b6a <_vfiprintf_r+0x6a>
 8002b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b50:	b01d      	add	sp, #116	; 0x74
 8002b52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b56:	4b7b      	ldr	r3, [pc, #492]	; (8002d44 <_vfiprintf_r+0x244>)
 8002b58:	429d      	cmp	r5, r3
 8002b5a:	d101      	bne.n	8002b60 <_vfiprintf_r+0x60>
 8002b5c:	68b5      	ldr	r5, [r6, #8]
 8002b5e:	e7df      	b.n	8002b20 <_vfiprintf_r+0x20>
 8002b60:	4b79      	ldr	r3, [pc, #484]	; (8002d48 <_vfiprintf_r+0x248>)
 8002b62:	429d      	cmp	r5, r3
 8002b64:	bf08      	it	eq
 8002b66:	68f5      	ldreq	r5, [r6, #12]
 8002b68:	e7da      	b.n	8002b20 <_vfiprintf_r+0x20>
 8002b6a:	89ab      	ldrh	r3, [r5, #12]
 8002b6c:	0598      	lsls	r0, r3, #22
 8002b6e:	d4ed      	bmi.n	8002b4c <_vfiprintf_r+0x4c>
 8002b70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002b72:	f7ff fe5a 	bl	800282a <__retarget_lock_release_recursive>
 8002b76:	e7e9      	b.n	8002b4c <_vfiprintf_r+0x4c>
 8002b78:	2300      	movs	r3, #0
 8002b7a:	9309      	str	r3, [sp, #36]	; 0x24
 8002b7c:	2320      	movs	r3, #32
 8002b7e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002b82:	2330      	movs	r3, #48	; 0x30
 8002b84:	f04f 0901 	mov.w	r9, #1
 8002b88:	f8cd 800c 	str.w	r8, [sp, #12]
 8002b8c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8002d4c <_vfiprintf_r+0x24c>
 8002b90:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002b94:	4623      	mov	r3, r4
 8002b96:	469a      	mov	sl, r3
 8002b98:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002b9c:	b10a      	cbz	r2, 8002ba2 <_vfiprintf_r+0xa2>
 8002b9e:	2a25      	cmp	r2, #37	; 0x25
 8002ba0:	d1f9      	bne.n	8002b96 <_vfiprintf_r+0x96>
 8002ba2:	ebba 0b04 	subs.w	fp, sl, r4
 8002ba6:	d00b      	beq.n	8002bc0 <_vfiprintf_r+0xc0>
 8002ba8:	465b      	mov	r3, fp
 8002baa:	4622      	mov	r2, r4
 8002bac:	4629      	mov	r1, r5
 8002bae:	4630      	mov	r0, r6
 8002bb0:	f7ff ff93 	bl	8002ada <__sfputs_r>
 8002bb4:	3001      	adds	r0, #1
 8002bb6:	f000 80aa 	beq.w	8002d0e <_vfiprintf_r+0x20e>
 8002bba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002bbc:	445a      	add	r2, fp
 8002bbe:	9209      	str	r2, [sp, #36]	; 0x24
 8002bc0:	f89a 3000 	ldrb.w	r3, [sl]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	f000 80a2 	beq.w	8002d0e <_vfiprintf_r+0x20e>
 8002bca:	2300      	movs	r3, #0
 8002bcc:	f04f 32ff 	mov.w	r2, #4294967295
 8002bd0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002bd4:	f10a 0a01 	add.w	sl, sl, #1
 8002bd8:	9304      	str	r3, [sp, #16]
 8002bda:	9307      	str	r3, [sp, #28]
 8002bdc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002be0:	931a      	str	r3, [sp, #104]	; 0x68
 8002be2:	4654      	mov	r4, sl
 8002be4:	2205      	movs	r2, #5
 8002be6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002bea:	4858      	ldr	r0, [pc, #352]	; (8002d4c <_vfiprintf_r+0x24c>)
 8002bec:	f000 faf8 	bl	80031e0 <memchr>
 8002bf0:	9a04      	ldr	r2, [sp, #16]
 8002bf2:	b9d8      	cbnz	r0, 8002c2c <_vfiprintf_r+0x12c>
 8002bf4:	06d1      	lsls	r1, r2, #27
 8002bf6:	bf44      	itt	mi
 8002bf8:	2320      	movmi	r3, #32
 8002bfa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002bfe:	0713      	lsls	r3, r2, #28
 8002c00:	bf44      	itt	mi
 8002c02:	232b      	movmi	r3, #43	; 0x2b
 8002c04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002c08:	f89a 3000 	ldrb.w	r3, [sl]
 8002c0c:	2b2a      	cmp	r3, #42	; 0x2a
 8002c0e:	d015      	beq.n	8002c3c <_vfiprintf_r+0x13c>
 8002c10:	4654      	mov	r4, sl
 8002c12:	2000      	movs	r0, #0
 8002c14:	f04f 0c0a 	mov.w	ip, #10
 8002c18:	9a07      	ldr	r2, [sp, #28]
 8002c1a:	4621      	mov	r1, r4
 8002c1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002c20:	3b30      	subs	r3, #48	; 0x30
 8002c22:	2b09      	cmp	r3, #9
 8002c24:	d94e      	bls.n	8002cc4 <_vfiprintf_r+0x1c4>
 8002c26:	b1b0      	cbz	r0, 8002c56 <_vfiprintf_r+0x156>
 8002c28:	9207      	str	r2, [sp, #28]
 8002c2a:	e014      	b.n	8002c56 <_vfiprintf_r+0x156>
 8002c2c:	eba0 0308 	sub.w	r3, r0, r8
 8002c30:	fa09 f303 	lsl.w	r3, r9, r3
 8002c34:	4313      	orrs	r3, r2
 8002c36:	46a2      	mov	sl, r4
 8002c38:	9304      	str	r3, [sp, #16]
 8002c3a:	e7d2      	b.n	8002be2 <_vfiprintf_r+0xe2>
 8002c3c:	9b03      	ldr	r3, [sp, #12]
 8002c3e:	1d19      	adds	r1, r3, #4
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	9103      	str	r1, [sp, #12]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	bfbb      	ittet	lt
 8002c48:	425b      	neglt	r3, r3
 8002c4a:	f042 0202 	orrlt.w	r2, r2, #2
 8002c4e:	9307      	strge	r3, [sp, #28]
 8002c50:	9307      	strlt	r3, [sp, #28]
 8002c52:	bfb8      	it	lt
 8002c54:	9204      	strlt	r2, [sp, #16]
 8002c56:	7823      	ldrb	r3, [r4, #0]
 8002c58:	2b2e      	cmp	r3, #46	; 0x2e
 8002c5a:	d10c      	bne.n	8002c76 <_vfiprintf_r+0x176>
 8002c5c:	7863      	ldrb	r3, [r4, #1]
 8002c5e:	2b2a      	cmp	r3, #42	; 0x2a
 8002c60:	d135      	bne.n	8002cce <_vfiprintf_r+0x1ce>
 8002c62:	9b03      	ldr	r3, [sp, #12]
 8002c64:	3402      	adds	r4, #2
 8002c66:	1d1a      	adds	r2, r3, #4
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	9203      	str	r2, [sp, #12]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	bfb8      	it	lt
 8002c70:	f04f 33ff 	movlt.w	r3, #4294967295
 8002c74:	9305      	str	r3, [sp, #20]
 8002c76:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8002d50 <_vfiprintf_r+0x250>
 8002c7a:	2203      	movs	r2, #3
 8002c7c:	4650      	mov	r0, sl
 8002c7e:	7821      	ldrb	r1, [r4, #0]
 8002c80:	f000 faae 	bl	80031e0 <memchr>
 8002c84:	b140      	cbz	r0, 8002c98 <_vfiprintf_r+0x198>
 8002c86:	2340      	movs	r3, #64	; 0x40
 8002c88:	eba0 000a 	sub.w	r0, r0, sl
 8002c8c:	fa03 f000 	lsl.w	r0, r3, r0
 8002c90:	9b04      	ldr	r3, [sp, #16]
 8002c92:	3401      	adds	r4, #1
 8002c94:	4303      	orrs	r3, r0
 8002c96:	9304      	str	r3, [sp, #16]
 8002c98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002c9c:	2206      	movs	r2, #6
 8002c9e:	482d      	ldr	r0, [pc, #180]	; (8002d54 <_vfiprintf_r+0x254>)
 8002ca0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002ca4:	f000 fa9c 	bl	80031e0 <memchr>
 8002ca8:	2800      	cmp	r0, #0
 8002caa:	d03f      	beq.n	8002d2c <_vfiprintf_r+0x22c>
 8002cac:	4b2a      	ldr	r3, [pc, #168]	; (8002d58 <_vfiprintf_r+0x258>)
 8002cae:	bb1b      	cbnz	r3, 8002cf8 <_vfiprintf_r+0x1f8>
 8002cb0:	9b03      	ldr	r3, [sp, #12]
 8002cb2:	3307      	adds	r3, #7
 8002cb4:	f023 0307 	bic.w	r3, r3, #7
 8002cb8:	3308      	adds	r3, #8
 8002cba:	9303      	str	r3, [sp, #12]
 8002cbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002cbe:	443b      	add	r3, r7
 8002cc0:	9309      	str	r3, [sp, #36]	; 0x24
 8002cc2:	e767      	b.n	8002b94 <_vfiprintf_r+0x94>
 8002cc4:	460c      	mov	r4, r1
 8002cc6:	2001      	movs	r0, #1
 8002cc8:	fb0c 3202 	mla	r2, ip, r2, r3
 8002ccc:	e7a5      	b.n	8002c1a <_vfiprintf_r+0x11a>
 8002cce:	2300      	movs	r3, #0
 8002cd0:	f04f 0c0a 	mov.w	ip, #10
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	3401      	adds	r4, #1
 8002cd8:	9305      	str	r3, [sp, #20]
 8002cda:	4620      	mov	r0, r4
 8002cdc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002ce0:	3a30      	subs	r2, #48	; 0x30
 8002ce2:	2a09      	cmp	r2, #9
 8002ce4:	d903      	bls.n	8002cee <_vfiprintf_r+0x1ee>
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d0c5      	beq.n	8002c76 <_vfiprintf_r+0x176>
 8002cea:	9105      	str	r1, [sp, #20]
 8002cec:	e7c3      	b.n	8002c76 <_vfiprintf_r+0x176>
 8002cee:	4604      	mov	r4, r0
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	fb0c 2101 	mla	r1, ip, r1, r2
 8002cf6:	e7f0      	b.n	8002cda <_vfiprintf_r+0x1da>
 8002cf8:	ab03      	add	r3, sp, #12
 8002cfa:	9300      	str	r3, [sp, #0]
 8002cfc:	462a      	mov	r2, r5
 8002cfe:	4630      	mov	r0, r6
 8002d00:	4b16      	ldr	r3, [pc, #88]	; (8002d5c <_vfiprintf_r+0x25c>)
 8002d02:	a904      	add	r1, sp, #16
 8002d04:	f3af 8000 	nop.w
 8002d08:	4607      	mov	r7, r0
 8002d0a:	1c78      	adds	r0, r7, #1
 8002d0c:	d1d6      	bne.n	8002cbc <_vfiprintf_r+0x1bc>
 8002d0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002d10:	07d9      	lsls	r1, r3, #31
 8002d12:	d405      	bmi.n	8002d20 <_vfiprintf_r+0x220>
 8002d14:	89ab      	ldrh	r3, [r5, #12]
 8002d16:	059a      	lsls	r2, r3, #22
 8002d18:	d402      	bmi.n	8002d20 <_vfiprintf_r+0x220>
 8002d1a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002d1c:	f7ff fd85 	bl	800282a <__retarget_lock_release_recursive>
 8002d20:	89ab      	ldrh	r3, [r5, #12]
 8002d22:	065b      	lsls	r3, r3, #25
 8002d24:	f53f af12 	bmi.w	8002b4c <_vfiprintf_r+0x4c>
 8002d28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002d2a:	e711      	b.n	8002b50 <_vfiprintf_r+0x50>
 8002d2c:	ab03      	add	r3, sp, #12
 8002d2e:	9300      	str	r3, [sp, #0]
 8002d30:	462a      	mov	r2, r5
 8002d32:	4630      	mov	r0, r6
 8002d34:	4b09      	ldr	r3, [pc, #36]	; (8002d5c <_vfiprintf_r+0x25c>)
 8002d36:	a904      	add	r1, sp, #16
 8002d38:	f000 f882 	bl	8002e40 <_printf_i>
 8002d3c:	e7e4      	b.n	8002d08 <_vfiprintf_r+0x208>
 8002d3e:	bf00      	nop
 8002d40:	080032c8 	.word	0x080032c8
 8002d44:	080032e8 	.word	0x080032e8
 8002d48:	080032a8 	.word	0x080032a8
 8002d4c:	08003308 	.word	0x08003308
 8002d50:	0800330e 	.word	0x0800330e
 8002d54:	08003312 	.word	0x08003312
 8002d58:	00000000 	.word	0x00000000
 8002d5c:	08002adb 	.word	0x08002adb

08002d60 <_printf_common>:
 8002d60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d64:	4616      	mov	r6, r2
 8002d66:	4699      	mov	r9, r3
 8002d68:	688a      	ldr	r2, [r1, #8]
 8002d6a:	690b      	ldr	r3, [r1, #16]
 8002d6c:	4607      	mov	r7, r0
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	bfb8      	it	lt
 8002d72:	4613      	movlt	r3, r2
 8002d74:	6033      	str	r3, [r6, #0]
 8002d76:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002d7a:	460c      	mov	r4, r1
 8002d7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002d80:	b10a      	cbz	r2, 8002d86 <_printf_common+0x26>
 8002d82:	3301      	adds	r3, #1
 8002d84:	6033      	str	r3, [r6, #0]
 8002d86:	6823      	ldr	r3, [r4, #0]
 8002d88:	0699      	lsls	r1, r3, #26
 8002d8a:	bf42      	ittt	mi
 8002d8c:	6833      	ldrmi	r3, [r6, #0]
 8002d8e:	3302      	addmi	r3, #2
 8002d90:	6033      	strmi	r3, [r6, #0]
 8002d92:	6825      	ldr	r5, [r4, #0]
 8002d94:	f015 0506 	ands.w	r5, r5, #6
 8002d98:	d106      	bne.n	8002da8 <_printf_common+0x48>
 8002d9a:	f104 0a19 	add.w	sl, r4, #25
 8002d9e:	68e3      	ldr	r3, [r4, #12]
 8002da0:	6832      	ldr	r2, [r6, #0]
 8002da2:	1a9b      	subs	r3, r3, r2
 8002da4:	42ab      	cmp	r3, r5
 8002da6:	dc28      	bgt.n	8002dfa <_printf_common+0x9a>
 8002da8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002dac:	1e13      	subs	r3, r2, #0
 8002dae:	6822      	ldr	r2, [r4, #0]
 8002db0:	bf18      	it	ne
 8002db2:	2301      	movne	r3, #1
 8002db4:	0692      	lsls	r2, r2, #26
 8002db6:	d42d      	bmi.n	8002e14 <_printf_common+0xb4>
 8002db8:	4649      	mov	r1, r9
 8002dba:	4638      	mov	r0, r7
 8002dbc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002dc0:	47c0      	blx	r8
 8002dc2:	3001      	adds	r0, #1
 8002dc4:	d020      	beq.n	8002e08 <_printf_common+0xa8>
 8002dc6:	6823      	ldr	r3, [r4, #0]
 8002dc8:	68e5      	ldr	r5, [r4, #12]
 8002dca:	f003 0306 	and.w	r3, r3, #6
 8002dce:	2b04      	cmp	r3, #4
 8002dd0:	bf18      	it	ne
 8002dd2:	2500      	movne	r5, #0
 8002dd4:	6832      	ldr	r2, [r6, #0]
 8002dd6:	f04f 0600 	mov.w	r6, #0
 8002dda:	68a3      	ldr	r3, [r4, #8]
 8002ddc:	bf08      	it	eq
 8002dde:	1aad      	subeq	r5, r5, r2
 8002de0:	6922      	ldr	r2, [r4, #16]
 8002de2:	bf08      	it	eq
 8002de4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002de8:	4293      	cmp	r3, r2
 8002dea:	bfc4      	itt	gt
 8002dec:	1a9b      	subgt	r3, r3, r2
 8002dee:	18ed      	addgt	r5, r5, r3
 8002df0:	341a      	adds	r4, #26
 8002df2:	42b5      	cmp	r5, r6
 8002df4:	d11a      	bne.n	8002e2c <_printf_common+0xcc>
 8002df6:	2000      	movs	r0, #0
 8002df8:	e008      	b.n	8002e0c <_printf_common+0xac>
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	4652      	mov	r2, sl
 8002dfe:	4649      	mov	r1, r9
 8002e00:	4638      	mov	r0, r7
 8002e02:	47c0      	blx	r8
 8002e04:	3001      	adds	r0, #1
 8002e06:	d103      	bne.n	8002e10 <_printf_common+0xb0>
 8002e08:	f04f 30ff 	mov.w	r0, #4294967295
 8002e0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e10:	3501      	adds	r5, #1
 8002e12:	e7c4      	b.n	8002d9e <_printf_common+0x3e>
 8002e14:	2030      	movs	r0, #48	; 0x30
 8002e16:	18e1      	adds	r1, r4, r3
 8002e18:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002e1c:	1c5a      	adds	r2, r3, #1
 8002e1e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002e22:	4422      	add	r2, r4
 8002e24:	3302      	adds	r3, #2
 8002e26:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002e2a:	e7c5      	b.n	8002db8 <_printf_common+0x58>
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	4622      	mov	r2, r4
 8002e30:	4649      	mov	r1, r9
 8002e32:	4638      	mov	r0, r7
 8002e34:	47c0      	blx	r8
 8002e36:	3001      	adds	r0, #1
 8002e38:	d0e6      	beq.n	8002e08 <_printf_common+0xa8>
 8002e3a:	3601      	adds	r6, #1
 8002e3c:	e7d9      	b.n	8002df2 <_printf_common+0x92>
	...

08002e40 <_printf_i>:
 8002e40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002e44:	7e0f      	ldrb	r7, [r1, #24]
 8002e46:	4691      	mov	r9, r2
 8002e48:	2f78      	cmp	r7, #120	; 0x78
 8002e4a:	4680      	mov	r8, r0
 8002e4c:	460c      	mov	r4, r1
 8002e4e:	469a      	mov	sl, r3
 8002e50:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002e52:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002e56:	d807      	bhi.n	8002e68 <_printf_i+0x28>
 8002e58:	2f62      	cmp	r7, #98	; 0x62
 8002e5a:	d80a      	bhi.n	8002e72 <_printf_i+0x32>
 8002e5c:	2f00      	cmp	r7, #0
 8002e5e:	f000 80d9 	beq.w	8003014 <_printf_i+0x1d4>
 8002e62:	2f58      	cmp	r7, #88	; 0x58
 8002e64:	f000 80a4 	beq.w	8002fb0 <_printf_i+0x170>
 8002e68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002e6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002e70:	e03a      	b.n	8002ee8 <_printf_i+0xa8>
 8002e72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002e76:	2b15      	cmp	r3, #21
 8002e78:	d8f6      	bhi.n	8002e68 <_printf_i+0x28>
 8002e7a:	a101      	add	r1, pc, #4	; (adr r1, 8002e80 <_printf_i+0x40>)
 8002e7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002e80:	08002ed9 	.word	0x08002ed9
 8002e84:	08002eed 	.word	0x08002eed
 8002e88:	08002e69 	.word	0x08002e69
 8002e8c:	08002e69 	.word	0x08002e69
 8002e90:	08002e69 	.word	0x08002e69
 8002e94:	08002e69 	.word	0x08002e69
 8002e98:	08002eed 	.word	0x08002eed
 8002e9c:	08002e69 	.word	0x08002e69
 8002ea0:	08002e69 	.word	0x08002e69
 8002ea4:	08002e69 	.word	0x08002e69
 8002ea8:	08002e69 	.word	0x08002e69
 8002eac:	08002ffb 	.word	0x08002ffb
 8002eb0:	08002f1d 	.word	0x08002f1d
 8002eb4:	08002fdd 	.word	0x08002fdd
 8002eb8:	08002e69 	.word	0x08002e69
 8002ebc:	08002e69 	.word	0x08002e69
 8002ec0:	0800301d 	.word	0x0800301d
 8002ec4:	08002e69 	.word	0x08002e69
 8002ec8:	08002f1d 	.word	0x08002f1d
 8002ecc:	08002e69 	.word	0x08002e69
 8002ed0:	08002e69 	.word	0x08002e69
 8002ed4:	08002fe5 	.word	0x08002fe5
 8002ed8:	682b      	ldr	r3, [r5, #0]
 8002eda:	1d1a      	adds	r2, r3, #4
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	602a      	str	r2, [r5, #0]
 8002ee0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002ee4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e0a4      	b.n	8003036 <_printf_i+0x1f6>
 8002eec:	6820      	ldr	r0, [r4, #0]
 8002eee:	6829      	ldr	r1, [r5, #0]
 8002ef0:	0606      	lsls	r6, r0, #24
 8002ef2:	f101 0304 	add.w	r3, r1, #4
 8002ef6:	d50a      	bpl.n	8002f0e <_printf_i+0xce>
 8002ef8:	680e      	ldr	r6, [r1, #0]
 8002efa:	602b      	str	r3, [r5, #0]
 8002efc:	2e00      	cmp	r6, #0
 8002efe:	da03      	bge.n	8002f08 <_printf_i+0xc8>
 8002f00:	232d      	movs	r3, #45	; 0x2d
 8002f02:	4276      	negs	r6, r6
 8002f04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002f08:	230a      	movs	r3, #10
 8002f0a:	485e      	ldr	r0, [pc, #376]	; (8003084 <_printf_i+0x244>)
 8002f0c:	e019      	b.n	8002f42 <_printf_i+0x102>
 8002f0e:	680e      	ldr	r6, [r1, #0]
 8002f10:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002f14:	602b      	str	r3, [r5, #0]
 8002f16:	bf18      	it	ne
 8002f18:	b236      	sxthne	r6, r6
 8002f1a:	e7ef      	b.n	8002efc <_printf_i+0xbc>
 8002f1c:	682b      	ldr	r3, [r5, #0]
 8002f1e:	6820      	ldr	r0, [r4, #0]
 8002f20:	1d19      	adds	r1, r3, #4
 8002f22:	6029      	str	r1, [r5, #0]
 8002f24:	0601      	lsls	r1, r0, #24
 8002f26:	d501      	bpl.n	8002f2c <_printf_i+0xec>
 8002f28:	681e      	ldr	r6, [r3, #0]
 8002f2a:	e002      	b.n	8002f32 <_printf_i+0xf2>
 8002f2c:	0646      	lsls	r6, r0, #25
 8002f2e:	d5fb      	bpl.n	8002f28 <_printf_i+0xe8>
 8002f30:	881e      	ldrh	r6, [r3, #0]
 8002f32:	2f6f      	cmp	r7, #111	; 0x6f
 8002f34:	bf0c      	ite	eq
 8002f36:	2308      	moveq	r3, #8
 8002f38:	230a      	movne	r3, #10
 8002f3a:	4852      	ldr	r0, [pc, #328]	; (8003084 <_printf_i+0x244>)
 8002f3c:	2100      	movs	r1, #0
 8002f3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002f42:	6865      	ldr	r5, [r4, #4]
 8002f44:	2d00      	cmp	r5, #0
 8002f46:	bfa8      	it	ge
 8002f48:	6821      	ldrge	r1, [r4, #0]
 8002f4a:	60a5      	str	r5, [r4, #8]
 8002f4c:	bfa4      	itt	ge
 8002f4e:	f021 0104 	bicge.w	r1, r1, #4
 8002f52:	6021      	strge	r1, [r4, #0]
 8002f54:	b90e      	cbnz	r6, 8002f5a <_printf_i+0x11a>
 8002f56:	2d00      	cmp	r5, #0
 8002f58:	d04d      	beq.n	8002ff6 <_printf_i+0x1b6>
 8002f5a:	4615      	mov	r5, r2
 8002f5c:	fbb6 f1f3 	udiv	r1, r6, r3
 8002f60:	fb03 6711 	mls	r7, r3, r1, r6
 8002f64:	5dc7      	ldrb	r7, [r0, r7]
 8002f66:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002f6a:	4637      	mov	r7, r6
 8002f6c:	42bb      	cmp	r3, r7
 8002f6e:	460e      	mov	r6, r1
 8002f70:	d9f4      	bls.n	8002f5c <_printf_i+0x11c>
 8002f72:	2b08      	cmp	r3, #8
 8002f74:	d10b      	bne.n	8002f8e <_printf_i+0x14e>
 8002f76:	6823      	ldr	r3, [r4, #0]
 8002f78:	07de      	lsls	r6, r3, #31
 8002f7a:	d508      	bpl.n	8002f8e <_printf_i+0x14e>
 8002f7c:	6923      	ldr	r3, [r4, #16]
 8002f7e:	6861      	ldr	r1, [r4, #4]
 8002f80:	4299      	cmp	r1, r3
 8002f82:	bfde      	ittt	le
 8002f84:	2330      	movle	r3, #48	; 0x30
 8002f86:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002f8a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002f8e:	1b52      	subs	r2, r2, r5
 8002f90:	6122      	str	r2, [r4, #16]
 8002f92:	464b      	mov	r3, r9
 8002f94:	4621      	mov	r1, r4
 8002f96:	4640      	mov	r0, r8
 8002f98:	f8cd a000 	str.w	sl, [sp]
 8002f9c:	aa03      	add	r2, sp, #12
 8002f9e:	f7ff fedf 	bl	8002d60 <_printf_common>
 8002fa2:	3001      	adds	r0, #1
 8002fa4:	d14c      	bne.n	8003040 <_printf_i+0x200>
 8002fa6:	f04f 30ff 	mov.w	r0, #4294967295
 8002faa:	b004      	add	sp, #16
 8002fac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002fb0:	4834      	ldr	r0, [pc, #208]	; (8003084 <_printf_i+0x244>)
 8002fb2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002fb6:	6829      	ldr	r1, [r5, #0]
 8002fb8:	6823      	ldr	r3, [r4, #0]
 8002fba:	f851 6b04 	ldr.w	r6, [r1], #4
 8002fbe:	6029      	str	r1, [r5, #0]
 8002fc0:	061d      	lsls	r5, r3, #24
 8002fc2:	d514      	bpl.n	8002fee <_printf_i+0x1ae>
 8002fc4:	07df      	lsls	r7, r3, #31
 8002fc6:	bf44      	itt	mi
 8002fc8:	f043 0320 	orrmi.w	r3, r3, #32
 8002fcc:	6023      	strmi	r3, [r4, #0]
 8002fce:	b91e      	cbnz	r6, 8002fd8 <_printf_i+0x198>
 8002fd0:	6823      	ldr	r3, [r4, #0]
 8002fd2:	f023 0320 	bic.w	r3, r3, #32
 8002fd6:	6023      	str	r3, [r4, #0]
 8002fd8:	2310      	movs	r3, #16
 8002fda:	e7af      	b.n	8002f3c <_printf_i+0xfc>
 8002fdc:	6823      	ldr	r3, [r4, #0]
 8002fde:	f043 0320 	orr.w	r3, r3, #32
 8002fe2:	6023      	str	r3, [r4, #0]
 8002fe4:	2378      	movs	r3, #120	; 0x78
 8002fe6:	4828      	ldr	r0, [pc, #160]	; (8003088 <_printf_i+0x248>)
 8002fe8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002fec:	e7e3      	b.n	8002fb6 <_printf_i+0x176>
 8002fee:	0659      	lsls	r1, r3, #25
 8002ff0:	bf48      	it	mi
 8002ff2:	b2b6      	uxthmi	r6, r6
 8002ff4:	e7e6      	b.n	8002fc4 <_printf_i+0x184>
 8002ff6:	4615      	mov	r5, r2
 8002ff8:	e7bb      	b.n	8002f72 <_printf_i+0x132>
 8002ffa:	682b      	ldr	r3, [r5, #0]
 8002ffc:	6826      	ldr	r6, [r4, #0]
 8002ffe:	1d18      	adds	r0, r3, #4
 8003000:	6961      	ldr	r1, [r4, #20]
 8003002:	6028      	str	r0, [r5, #0]
 8003004:	0635      	lsls	r5, r6, #24
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	d501      	bpl.n	800300e <_printf_i+0x1ce>
 800300a:	6019      	str	r1, [r3, #0]
 800300c:	e002      	b.n	8003014 <_printf_i+0x1d4>
 800300e:	0670      	lsls	r0, r6, #25
 8003010:	d5fb      	bpl.n	800300a <_printf_i+0x1ca>
 8003012:	8019      	strh	r1, [r3, #0]
 8003014:	2300      	movs	r3, #0
 8003016:	4615      	mov	r5, r2
 8003018:	6123      	str	r3, [r4, #16]
 800301a:	e7ba      	b.n	8002f92 <_printf_i+0x152>
 800301c:	682b      	ldr	r3, [r5, #0]
 800301e:	2100      	movs	r1, #0
 8003020:	1d1a      	adds	r2, r3, #4
 8003022:	602a      	str	r2, [r5, #0]
 8003024:	681d      	ldr	r5, [r3, #0]
 8003026:	6862      	ldr	r2, [r4, #4]
 8003028:	4628      	mov	r0, r5
 800302a:	f000 f8d9 	bl	80031e0 <memchr>
 800302e:	b108      	cbz	r0, 8003034 <_printf_i+0x1f4>
 8003030:	1b40      	subs	r0, r0, r5
 8003032:	6060      	str	r0, [r4, #4]
 8003034:	6863      	ldr	r3, [r4, #4]
 8003036:	6123      	str	r3, [r4, #16]
 8003038:	2300      	movs	r3, #0
 800303a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800303e:	e7a8      	b.n	8002f92 <_printf_i+0x152>
 8003040:	462a      	mov	r2, r5
 8003042:	4649      	mov	r1, r9
 8003044:	4640      	mov	r0, r8
 8003046:	6923      	ldr	r3, [r4, #16]
 8003048:	47d0      	blx	sl
 800304a:	3001      	adds	r0, #1
 800304c:	d0ab      	beq.n	8002fa6 <_printf_i+0x166>
 800304e:	6823      	ldr	r3, [r4, #0]
 8003050:	079b      	lsls	r3, r3, #30
 8003052:	d413      	bmi.n	800307c <_printf_i+0x23c>
 8003054:	68e0      	ldr	r0, [r4, #12]
 8003056:	9b03      	ldr	r3, [sp, #12]
 8003058:	4298      	cmp	r0, r3
 800305a:	bfb8      	it	lt
 800305c:	4618      	movlt	r0, r3
 800305e:	e7a4      	b.n	8002faa <_printf_i+0x16a>
 8003060:	2301      	movs	r3, #1
 8003062:	4632      	mov	r2, r6
 8003064:	4649      	mov	r1, r9
 8003066:	4640      	mov	r0, r8
 8003068:	47d0      	blx	sl
 800306a:	3001      	adds	r0, #1
 800306c:	d09b      	beq.n	8002fa6 <_printf_i+0x166>
 800306e:	3501      	adds	r5, #1
 8003070:	68e3      	ldr	r3, [r4, #12]
 8003072:	9903      	ldr	r1, [sp, #12]
 8003074:	1a5b      	subs	r3, r3, r1
 8003076:	42ab      	cmp	r3, r5
 8003078:	dcf2      	bgt.n	8003060 <_printf_i+0x220>
 800307a:	e7eb      	b.n	8003054 <_printf_i+0x214>
 800307c:	2500      	movs	r5, #0
 800307e:	f104 0619 	add.w	r6, r4, #25
 8003082:	e7f5      	b.n	8003070 <_printf_i+0x230>
 8003084:	08003319 	.word	0x08003319
 8003088:	0800332a 	.word	0x0800332a

0800308c <_sbrk_r>:
 800308c:	b538      	push	{r3, r4, r5, lr}
 800308e:	2300      	movs	r3, #0
 8003090:	4d05      	ldr	r5, [pc, #20]	; (80030a8 <_sbrk_r+0x1c>)
 8003092:	4604      	mov	r4, r0
 8003094:	4608      	mov	r0, r1
 8003096:	602b      	str	r3, [r5, #0]
 8003098:	f7fd fb00 	bl	800069c <_sbrk>
 800309c:	1c43      	adds	r3, r0, #1
 800309e:	d102      	bne.n	80030a6 <_sbrk_r+0x1a>
 80030a0:	682b      	ldr	r3, [r5, #0]
 80030a2:	b103      	cbz	r3, 80030a6 <_sbrk_r+0x1a>
 80030a4:	6023      	str	r3, [r4, #0]
 80030a6:	bd38      	pop	{r3, r4, r5, pc}
 80030a8:	20000130 	.word	0x20000130

080030ac <__sread>:
 80030ac:	b510      	push	{r4, lr}
 80030ae:	460c      	mov	r4, r1
 80030b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80030b4:	f000 f8ae 	bl	8003214 <_read_r>
 80030b8:	2800      	cmp	r0, #0
 80030ba:	bfab      	itete	ge
 80030bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80030be:	89a3      	ldrhlt	r3, [r4, #12]
 80030c0:	181b      	addge	r3, r3, r0
 80030c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80030c6:	bfac      	ite	ge
 80030c8:	6563      	strge	r3, [r4, #84]	; 0x54
 80030ca:	81a3      	strhlt	r3, [r4, #12]
 80030cc:	bd10      	pop	{r4, pc}

080030ce <__swrite>:
 80030ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80030d2:	461f      	mov	r7, r3
 80030d4:	898b      	ldrh	r3, [r1, #12]
 80030d6:	4605      	mov	r5, r0
 80030d8:	05db      	lsls	r3, r3, #23
 80030da:	460c      	mov	r4, r1
 80030dc:	4616      	mov	r6, r2
 80030de:	d505      	bpl.n	80030ec <__swrite+0x1e>
 80030e0:	2302      	movs	r3, #2
 80030e2:	2200      	movs	r2, #0
 80030e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80030e8:	f000 f868 	bl	80031bc <_lseek_r>
 80030ec:	89a3      	ldrh	r3, [r4, #12]
 80030ee:	4632      	mov	r2, r6
 80030f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80030f4:	81a3      	strh	r3, [r4, #12]
 80030f6:	4628      	mov	r0, r5
 80030f8:	463b      	mov	r3, r7
 80030fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80030fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003102:	f000 b817 	b.w	8003134 <_write_r>

08003106 <__sseek>:
 8003106:	b510      	push	{r4, lr}
 8003108:	460c      	mov	r4, r1
 800310a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800310e:	f000 f855 	bl	80031bc <_lseek_r>
 8003112:	1c43      	adds	r3, r0, #1
 8003114:	89a3      	ldrh	r3, [r4, #12]
 8003116:	bf15      	itete	ne
 8003118:	6560      	strne	r0, [r4, #84]	; 0x54
 800311a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800311e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003122:	81a3      	strheq	r3, [r4, #12]
 8003124:	bf18      	it	ne
 8003126:	81a3      	strhne	r3, [r4, #12]
 8003128:	bd10      	pop	{r4, pc}

0800312a <__sclose>:
 800312a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800312e:	f000 b813 	b.w	8003158 <_close_r>
	...

08003134 <_write_r>:
 8003134:	b538      	push	{r3, r4, r5, lr}
 8003136:	4604      	mov	r4, r0
 8003138:	4608      	mov	r0, r1
 800313a:	4611      	mov	r1, r2
 800313c:	2200      	movs	r2, #0
 800313e:	4d05      	ldr	r5, [pc, #20]	; (8003154 <_write_r+0x20>)
 8003140:	602a      	str	r2, [r5, #0]
 8003142:	461a      	mov	r2, r3
 8003144:	f7fd f802 	bl	800014c <_write>
 8003148:	1c43      	adds	r3, r0, #1
 800314a:	d102      	bne.n	8003152 <_write_r+0x1e>
 800314c:	682b      	ldr	r3, [r5, #0]
 800314e:	b103      	cbz	r3, 8003152 <_write_r+0x1e>
 8003150:	6023      	str	r3, [r4, #0]
 8003152:	bd38      	pop	{r3, r4, r5, pc}
 8003154:	20000130 	.word	0x20000130

08003158 <_close_r>:
 8003158:	b538      	push	{r3, r4, r5, lr}
 800315a:	2300      	movs	r3, #0
 800315c:	4d05      	ldr	r5, [pc, #20]	; (8003174 <_close_r+0x1c>)
 800315e:	4604      	mov	r4, r0
 8003160:	4608      	mov	r0, r1
 8003162:	602b      	str	r3, [r5, #0]
 8003164:	f7fd fa69 	bl	800063a <_close>
 8003168:	1c43      	adds	r3, r0, #1
 800316a:	d102      	bne.n	8003172 <_close_r+0x1a>
 800316c:	682b      	ldr	r3, [r5, #0]
 800316e:	b103      	cbz	r3, 8003172 <_close_r+0x1a>
 8003170:	6023      	str	r3, [r4, #0]
 8003172:	bd38      	pop	{r3, r4, r5, pc}
 8003174:	20000130 	.word	0x20000130

08003178 <_fstat_r>:
 8003178:	b538      	push	{r3, r4, r5, lr}
 800317a:	2300      	movs	r3, #0
 800317c:	4d06      	ldr	r5, [pc, #24]	; (8003198 <_fstat_r+0x20>)
 800317e:	4604      	mov	r4, r0
 8003180:	4608      	mov	r0, r1
 8003182:	4611      	mov	r1, r2
 8003184:	602b      	str	r3, [r5, #0]
 8003186:	f7fd fa63 	bl	8000650 <_fstat>
 800318a:	1c43      	adds	r3, r0, #1
 800318c:	d102      	bne.n	8003194 <_fstat_r+0x1c>
 800318e:	682b      	ldr	r3, [r5, #0]
 8003190:	b103      	cbz	r3, 8003194 <_fstat_r+0x1c>
 8003192:	6023      	str	r3, [r4, #0]
 8003194:	bd38      	pop	{r3, r4, r5, pc}
 8003196:	bf00      	nop
 8003198:	20000130 	.word	0x20000130

0800319c <_isatty_r>:
 800319c:	b538      	push	{r3, r4, r5, lr}
 800319e:	2300      	movs	r3, #0
 80031a0:	4d05      	ldr	r5, [pc, #20]	; (80031b8 <_isatty_r+0x1c>)
 80031a2:	4604      	mov	r4, r0
 80031a4:	4608      	mov	r0, r1
 80031a6:	602b      	str	r3, [r5, #0]
 80031a8:	f7fd fa61 	bl	800066e <_isatty>
 80031ac:	1c43      	adds	r3, r0, #1
 80031ae:	d102      	bne.n	80031b6 <_isatty_r+0x1a>
 80031b0:	682b      	ldr	r3, [r5, #0]
 80031b2:	b103      	cbz	r3, 80031b6 <_isatty_r+0x1a>
 80031b4:	6023      	str	r3, [r4, #0]
 80031b6:	bd38      	pop	{r3, r4, r5, pc}
 80031b8:	20000130 	.word	0x20000130

080031bc <_lseek_r>:
 80031bc:	b538      	push	{r3, r4, r5, lr}
 80031be:	4604      	mov	r4, r0
 80031c0:	4608      	mov	r0, r1
 80031c2:	4611      	mov	r1, r2
 80031c4:	2200      	movs	r2, #0
 80031c6:	4d05      	ldr	r5, [pc, #20]	; (80031dc <_lseek_r+0x20>)
 80031c8:	602a      	str	r2, [r5, #0]
 80031ca:	461a      	mov	r2, r3
 80031cc:	f7fd fa59 	bl	8000682 <_lseek>
 80031d0:	1c43      	adds	r3, r0, #1
 80031d2:	d102      	bne.n	80031da <_lseek_r+0x1e>
 80031d4:	682b      	ldr	r3, [r5, #0]
 80031d6:	b103      	cbz	r3, 80031da <_lseek_r+0x1e>
 80031d8:	6023      	str	r3, [r4, #0]
 80031da:	bd38      	pop	{r3, r4, r5, pc}
 80031dc:	20000130 	.word	0x20000130

080031e0 <memchr>:
 80031e0:	4603      	mov	r3, r0
 80031e2:	b510      	push	{r4, lr}
 80031e4:	b2c9      	uxtb	r1, r1
 80031e6:	4402      	add	r2, r0
 80031e8:	4293      	cmp	r3, r2
 80031ea:	4618      	mov	r0, r3
 80031ec:	d101      	bne.n	80031f2 <memchr+0x12>
 80031ee:	2000      	movs	r0, #0
 80031f0:	e003      	b.n	80031fa <memchr+0x1a>
 80031f2:	7804      	ldrb	r4, [r0, #0]
 80031f4:	3301      	adds	r3, #1
 80031f6:	428c      	cmp	r4, r1
 80031f8:	d1f6      	bne.n	80031e8 <memchr+0x8>
 80031fa:	bd10      	pop	{r4, pc}

080031fc <__malloc_lock>:
 80031fc:	4801      	ldr	r0, [pc, #4]	; (8003204 <__malloc_lock+0x8>)
 80031fe:	f7ff bb13 	b.w	8002828 <__retarget_lock_acquire_recursive>
 8003202:	bf00      	nop
 8003204:	20000124 	.word	0x20000124

08003208 <__malloc_unlock>:
 8003208:	4801      	ldr	r0, [pc, #4]	; (8003210 <__malloc_unlock+0x8>)
 800320a:	f7ff bb0e 	b.w	800282a <__retarget_lock_release_recursive>
 800320e:	bf00      	nop
 8003210:	20000124 	.word	0x20000124

08003214 <_read_r>:
 8003214:	b538      	push	{r3, r4, r5, lr}
 8003216:	4604      	mov	r4, r0
 8003218:	4608      	mov	r0, r1
 800321a:	4611      	mov	r1, r2
 800321c:	2200      	movs	r2, #0
 800321e:	4d05      	ldr	r5, [pc, #20]	; (8003234 <_read_r+0x20>)
 8003220:	602a      	str	r2, [r5, #0]
 8003222:	461a      	mov	r2, r3
 8003224:	f7fd f9ec 	bl	8000600 <_read>
 8003228:	1c43      	adds	r3, r0, #1
 800322a:	d102      	bne.n	8003232 <_read_r+0x1e>
 800322c:	682b      	ldr	r3, [r5, #0]
 800322e:	b103      	cbz	r3, 8003232 <_read_r+0x1e>
 8003230:	6023      	str	r3, [r4, #0]
 8003232:	bd38      	pop	{r3, r4, r5, pc}
 8003234:	20000130 	.word	0x20000130

08003238 <_init>:
 8003238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800323a:	bf00      	nop
 800323c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800323e:	bc08      	pop	{r3}
 8003240:	469e      	mov	lr, r3
 8003242:	4770      	bx	lr

08003244 <_fini>:
 8003244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003246:	bf00      	nop
 8003248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800324a:	bc08      	pop	{r3}
 800324c:	469e      	mov	lr, r3
 800324e:	4770      	bx	lr
