
CAN_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003438  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  08003544  08003544  00013544  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080036ac  080036ac  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080036ac  080036ac  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080036ac  080036ac  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080036ac  080036ac  000136ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080036b0  080036b0  000136b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080036b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  20000070  08003724  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000015c  08003724  0002015c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007453  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017e9  00000000  00000000  000274ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000830  00000000  00000000  00028cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000798  00000000  00000000  00029508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017adf  00000000  00000000  00029ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008199  00000000  00000000  0004177f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085d78  00000000  00000000  00049918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cf690  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002898  00000000  00000000  000cf6e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	0800352c 	.word	0x0800352c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	0800352c 	.word	0x0800352c

0800014c <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len){
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	60f8      	str	r0, [r7, #12]
 8000154:	60b9      	str	r1, [r7, #8]
 8000156:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (char*)ptr, (uint16_t) len, 100);
 8000158:	687b      	ldr	r3, [r7, #4]
 800015a:	b29a      	uxth	r2, r3
 800015c:	2364      	movs	r3, #100	; 0x64
 800015e:	68b9      	ldr	r1, [r7, #8]
 8000160:	4803      	ldr	r0, [pc, #12]	; (8000170 <_write+0x24>)
 8000162:	f002 f83c 	bl	80021de <HAL_UART_Transmit>
	return(len);
 8000166:	687b      	ldr	r3, [r7, #4]
}
 8000168:	4618      	mov	r0, r3
 800016a:	3710      	adds	r7, #16
 800016c:	46bd      	mov	sp, r7
 800016e:	bd80      	pop	{r7, pc}
 8000170:	200000b4 	.word	0x200000b4

08000174 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *CanHandle){
 8000174:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000176:	b089      	sub	sp, #36	; 0x24
 8000178:	af06      	add	r7, sp, #24
 800017a:	6078      	str	r0, [r7, #4]
	printf("receive success\r\n");
 800017c:	4822      	ldr	r0, [pc, #136]	; (8000208 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 800017e:	f002 fa51 	bl	8002624 <puts>
	if(HAL_CAN_GetRxMessage(CanHandle, CAN_RX_FIFO0, &rxheader, RxData)!=HAL_OK){
 8000182:	4b22      	ldr	r3, [pc, #136]	; (800020c <HAL_CAN_RxFifo0MsgPendingCallback+0x98>)
 8000184:	4a22      	ldr	r2, [pc, #136]	; (8000210 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 8000186:	2100      	movs	r1, #0
 8000188:	6878      	ldr	r0, [r7, #4]
 800018a:	f000 fddf 	bl	8000d4c <HAL_CAN_GetRxMessage>
 800018e:	4603      	mov	r3, r0
 8000190:	2b00      	cmp	r3, #0
 8000192:	d001      	beq.n	8000198 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>
		Error_Handler();
 8000194:	f000 f994 	bl	80004c0 <Error_Handler>
	}

	printf("StdID: %04lx, ExtID: %04lx, IDE:%ld, DLC:%ld\r\n",rxheader.StdId,rxheader.ExtId,rxheader.IDE,rxheader.DLC);
 8000198:	4b1d      	ldr	r3, [pc, #116]	; (8000210 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 800019a:	6819      	ldr	r1, [r3, #0]
 800019c:	4b1c      	ldr	r3, [pc, #112]	; (8000210 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 800019e:	685a      	ldr	r2, [r3, #4]
 80001a0:	4b1b      	ldr	r3, [pc, #108]	; (8000210 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 80001a2:	6898      	ldr	r0, [r3, #8]
 80001a4:	4b1a      	ldr	r3, [pc, #104]	; (8000210 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 80001a6:	691b      	ldr	r3, [r3, #16]
 80001a8:	9300      	str	r3, [sp, #0]
 80001aa:	4603      	mov	r3, r0
 80001ac:	4819      	ldr	r0, [pc, #100]	; (8000214 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 80001ae:	f002 f9b3 	bl	8002518 <iprintf>
	printf("Data:%d %d %d %d %d %d %d %d\r\n\r\n", RxData[0], RxData[1], RxData[2], RxData[3], RxData[4], RxData[5], RxData[6],RxData[7]);
 80001b2:	4b16      	ldr	r3, [pc, #88]	; (800020c <HAL_CAN_RxFifo0MsgPendingCallback+0x98>)
 80001b4:	781b      	ldrb	r3, [r3, #0]
 80001b6:	461d      	mov	r5, r3
 80001b8:	4b14      	ldr	r3, [pc, #80]	; (800020c <HAL_CAN_RxFifo0MsgPendingCallback+0x98>)
 80001ba:	785b      	ldrb	r3, [r3, #1]
 80001bc:	461e      	mov	r6, r3
 80001be:	4b13      	ldr	r3, [pc, #76]	; (800020c <HAL_CAN_RxFifo0MsgPendingCallback+0x98>)
 80001c0:	789b      	ldrb	r3, [r3, #2]
 80001c2:	469c      	mov	ip, r3
 80001c4:	4b11      	ldr	r3, [pc, #68]	; (800020c <HAL_CAN_RxFifo0MsgPendingCallback+0x98>)
 80001c6:	78db      	ldrb	r3, [r3, #3]
 80001c8:	461a      	mov	r2, r3
 80001ca:	4b10      	ldr	r3, [pc, #64]	; (800020c <HAL_CAN_RxFifo0MsgPendingCallback+0x98>)
 80001cc:	791b      	ldrb	r3, [r3, #4]
 80001ce:	4619      	mov	r1, r3
 80001d0:	4b0e      	ldr	r3, [pc, #56]	; (800020c <HAL_CAN_RxFifo0MsgPendingCallback+0x98>)
 80001d2:	795b      	ldrb	r3, [r3, #5]
 80001d4:	4618      	mov	r0, r3
 80001d6:	4b0d      	ldr	r3, [pc, #52]	; (800020c <HAL_CAN_RxFifo0MsgPendingCallback+0x98>)
 80001d8:	799b      	ldrb	r3, [r3, #6]
 80001da:	461c      	mov	r4, r3
 80001dc:	4b0b      	ldr	r3, [pc, #44]	; (800020c <HAL_CAN_RxFifo0MsgPendingCallback+0x98>)
 80001de:	79db      	ldrb	r3, [r3, #7]
 80001e0:	9304      	str	r3, [sp, #16]
 80001e2:	9403      	str	r4, [sp, #12]
 80001e4:	9002      	str	r0, [sp, #8]
 80001e6:	9101      	str	r1, [sp, #4]
 80001e8:	9200      	str	r2, [sp, #0]
 80001ea:	4663      	mov	r3, ip
 80001ec:	4632      	mov	r2, r6
 80001ee:	4629      	mov	r1, r5
 80001f0:	4809      	ldr	r0, [pc, #36]	; (8000218 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 80001f2:	f002 f991 	bl	8002518 <iprintf>
	memset(&rxheader,0x00,sizeof(rxheader));
 80001f6:	221c      	movs	r2, #28
 80001f8:	2100      	movs	r1, #0
 80001fa:	4805      	ldr	r0, [pc, #20]	; (8000210 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 80001fc:	f002 f984 	bl	8002508 <memset>
}
 8000200:	bf00      	nop
 8000202:	370c      	adds	r7, #12
 8000204:	46bd      	mov	sp, r7
 8000206:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000208:	08003544 	.word	0x08003544
 800020c:	2000013c 	.word	0x2000013c
 8000210:	20000120 	.word	0x20000120
 8000214:	08003558 	.word	0x08003558
 8000218:	08003588 	.word	0x08003588

0800021c <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan){
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	6078      	str	r0, [r7, #4]
	printf("%s\r\n",__FUNCTION__);
 8000224:	4903      	ldr	r1, [pc, #12]	; (8000234 <HAL_CAN_ErrorCallback+0x18>)
 8000226:	4804      	ldr	r0, [pc, #16]	; (8000238 <HAL_CAN_ErrorCallback+0x1c>)
 8000228:	f002 f976 	bl	8002518 <iprintf>
}
 800022c:	bf00      	nop
 800022e:	3708      	adds	r7, #8
 8000230:	46bd      	mov	sp, r7
 8000232:	bd80      	pop	{r7, pc}
 8000234:	080035e4 	.word	0x080035e4
 8000238:	080035ac 	.word	0x080035ac

0800023c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000240:	f000 fb1a 	bl	8000878 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000244:	f000 f87a 	bl	800033c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000248:	f000 f918 	bl	800047c <MX_GPIO_Init>
  MX_CAN_Init();
 800024c:	f000 f8b6 	bl	80003bc <MX_CAN_Init>
  MX_USART2_UART_Init();
 8000250:	f000 f8ea 	bl	8000428 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("CAN receive start\r\n");
 8000254:	4835      	ldr	r0, [pc, #212]	; (800032c <main+0xf0>)
 8000256:	f002 f9e5 	bl	8002624 <puts>

  sFilterConfig.FilterBank=0;
 800025a:	4b35      	ldr	r3, [pc, #212]	; (8000330 <main+0xf4>)
 800025c:	2200      	movs	r2, #0
 800025e:	615a      	str	r2, [r3, #20]
  sFilterConfig.FilterMode=CAN_FILTERMODE_IDMASK;
 8000260:	4b33      	ldr	r3, [pc, #204]	; (8000330 <main+0xf4>)
 8000262:	2200      	movs	r2, #0
 8000264:	619a      	str	r2, [r3, #24]
  sFilterConfig.FilterScale=CAN_FILTERSCALE_16BIT;
 8000266:	4b32      	ldr	r3, [pc, #200]	; (8000330 <main+0xf4>)
 8000268:	2200      	movs	r2, #0
 800026a:	61da      	str	r2, [r3, #28]
  sFilterConfig.FilterIdHigh=0x0f<<5;
 800026c:	4b30      	ldr	r3, [pc, #192]	; (8000330 <main+0xf4>)
 800026e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000272:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIdLow=0x00;
 8000274:	4b2e      	ldr	r3, [pc, #184]	; (8000330 <main+0xf4>)
 8000276:	2200      	movs	r2, #0
 8000278:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterMaskIdHigh=0x07f3<<5;
 800027a:	4b2d      	ldr	r3, [pc, #180]	; (8000330 <main+0xf4>)
 800027c:	f64f 6260 	movw	r2, #65120	; 0xfe60
 8000280:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMaskIdLow=0x00;
 8000282:	4b2b      	ldr	r3, [pc, #172]	; (8000330 <main+0xf4>)
 8000284:	2200      	movs	r2, #0
 8000286:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterFIFOAssignment=CAN_RX_FIFO0;
 8000288:	4b29      	ldr	r3, [pc, #164]	; (8000330 <main+0xf4>)
 800028a:	2200      	movs	r2, #0
 800028c:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterActivation=ENABLE;
 800028e:	4b28      	ldr	r3, [pc, #160]	; (8000330 <main+0xf4>)
 8000290:	2201      	movs	r2, #1
 8000292:	621a      	str	r2, [r3, #32]
  sFilterConfig.SlaveStartFilterBank=14;
 8000294:	4b26      	ldr	r3, [pc, #152]	; (8000330 <main+0xf4>)
 8000296:	220e      	movs	r2, #14
 8000298:	625a      	str	r2, [r3, #36]	; 0x24
  if(HAL_CAN_ConfigFilter(&hcan, &sFilterConfig)!=HAL_OK){
 800029a:	4925      	ldr	r1, [pc, #148]	; (8000330 <main+0xf4>)
 800029c:	4825      	ldr	r0, [pc, #148]	; (8000334 <main+0xf8>)
 800029e:	f000 fc48 	bl	8000b32 <HAL_CAN_ConfigFilter>
 80002a2:	4603      	mov	r3, r0
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d001      	beq.n	80002ac <main+0x70>
  	  Error_Handler();
 80002a8:	f000 f90a 	bl	80004c0 <Error_Handler>
    }

  sFilterConfig.FilterBank=1;
 80002ac:	4b20      	ldr	r3, [pc, #128]	; (8000330 <main+0xf4>)
 80002ae:	2201      	movs	r2, #1
 80002b0:	615a      	str	r2, [r3, #20]
  sFilterConfig.FilterMode=CAN_FILTERMODE_IDMASK;
 80002b2:	4b1f      	ldr	r3, [pc, #124]	; (8000330 <main+0xf4>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	619a      	str	r2, [r3, #24]
  sFilterConfig.FilterScale=CAN_FILTERSCALE_32BIT;
 80002b8:	4b1d      	ldr	r3, [pc, #116]	; (8000330 <main+0xf4>)
 80002ba:	2201      	movs	r2, #1
 80002bc:	61da      	str	r2, [r3, #28]
  sFilterConfig.FilterIdHigh=0xff<<5;
 80002be:	4b1c      	ldr	r3, [pc, #112]	; (8000330 <main+0xf4>)
 80002c0:	f44f 52ff 	mov.w	r2, #8160	; 0x1fe0
 80002c4:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIdLow=0x11<<3;
 80002c6:	4b1a      	ldr	r3, [pc, #104]	; (8000330 <main+0xf4>)
 80002c8:	2288      	movs	r2, #136	; 0x88
 80002ca:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterMaskIdHigh=0xff<<5;
 80002cc:	4b18      	ldr	r3, [pc, #96]	; (8000330 <main+0xf4>)
 80002ce:	f44f 52ff 	mov.w	r2, #8160	; 0x1fe0
 80002d2:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMaskIdLow=0xFF<<3;
 80002d4:	4b16      	ldr	r3, [pc, #88]	; (8000330 <main+0xf4>)
 80002d6:	f44f 62ff 	mov.w	r2, #2040	; 0x7f8
 80002da:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterFIFOAssignment=CAN_RX_FIFO0;
 80002dc:	4b14      	ldr	r3, [pc, #80]	; (8000330 <main+0xf4>)
 80002de:	2200      	movs	r2, #0
 80002e0:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterActivation=ENABLE;
 80002e2:	4b13      	ldr	r3, [pc, #76]	; (8000330 <main+0xf4>)
 80002e4:	2201      	movs	r2, #1
 80002e6:	621a      	str	r2, [r3, #32]
  sFilterConfig.SlaveStartFilterBank=14;
 80002e8:	4b11      	ldr	r3, [pc, #68]	; (8000330 <main+0xf4>)
 80002ea:	220e      	movs	r2, #14
 80002ec:	625a      	str	r2, [r3, #36]	; 0x24
  if(HAL_CAN_ConfigFilter(&hcan, &sFilterConfig)!=HAL_OK){
 80002ee:	4910      	ldr	r1, [pc, #64]	; (8000330 <main+0xf4>)
 80002f0:	4810      	ldr	r0, [pc, #64]	; (8000334 <main+0xf8>)
 80002f2:	f000 fc1e 	bl	8000b32 <HAL_CAN_ConfigFilter>
 80002f6:	4603      	mov	r3, r0
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d001      	beq.n	8000300 <main+0xc4>
  	  Error_Handler();
 80002fc:	f000 f8e0 	bl	80004c0 <Error_Handler>
    }



  if(HAL_CAN_Start(&hcan)!=HAL_OK){
 8000300:	480c      	ldr	r0, [pc, #48]	; (8000334 <main+0xf8>)
 8000302:	f000 fcdf 	bl	8000cc4 <HAL_CAN_Start>
 8000306:	4603      	mov	r3, r0
 8000308:	2b00      	cmp	r3, #0
 800030a:	d001      	beq.n	8000310 <main+0xd4>
	  Error_Handler();
 800030c:	f000 f8d8 	bl	80004c0 <Error_Handler>
  }
  if(HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING)!=HAL_OK){
 8000310:	2102      	movs	r1, #2
 8000312:	4808      	ldr	r0, [pc, #32]	; (8000334 <main+0xf8>)
 8000314:	f000 fe2b 	bl	8000f6e <HAL_CAN_ActivateNotification>
 8000318:	4603      	mov	r3, r0
 800031a:	2b00      	cmp	r3, #0
 800031c:	d001      	beq.n	8000322 <main+0xe6>
	  Error_Handler();
 800031e:	f000 f8cf 	bl	80004c0 <Error_Handler>
  }

  printf("Can Ready\r\n");
 8000322:	4805      	ldr	r0, [pc, #20]	; (8000338 <main+0xfc>)
 8000324:	f002 f97e 	bl	8002624 <puts>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000328:	e7fe      	b.n	8000328 <main+0xec>
 800032a:	bf00      	nop
 800032c:	080035b4 	.word	0x080035b4
 8000330:	200000f8 	.word	0x200000f8
 8000334:	2000008c 	.word	0x2000008c
 8000338:	080035c8 	.word	0x080035c8

0800033c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b090      	sub	sp, #64	; 0x40
 8000340:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000342:	f107 0318 	add.w	r3, r7, #24
 8000346:	2228      	movs	r2, #40	; 0x28
 8000348:	2100      	movs	r1, #0
 800034a:	4618      	mov	r0, r3
 800034c:	f002 f8dc 	bl	8002508 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000350:	1d3b      	adds	r3, r7, #4
 8000352:	2200      	movs	r2, #0
 8000354:	601a      	str	r2, [r3, #0]
 8000356:	605a      	str	r2, [r3, #4]
 8000358:	609a      	str	r2, [r3, #8]
 800035a:	60da      	str	r2, [r3, #12]
 800035c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800035e:	2302      	movs	r3, #2
 8000360:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000362:	2301      	movs	r3, #1
 8000364:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000366:	2310      	movs	r3, #16
 8000368:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800036a:	2302      	movs	r3, #2
 800036c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800036e:	2300      	movs	r3, #0
 8000370:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000372:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000376:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000378:	f107 0318 	add.w	r3, r7, #24
 800037c:	4618      	mov	r0, r3
 800037e:	f001 fac7 	bl	8001910 <HAL_RCC_OscConfig>
 8000382:	4603      	mov	r3, r0
 8000384:	2b00      	cmp	r3, #0
 8000386:	d001      	beq.n	800038c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000388:	f000 f89a 	bl	80004c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800038c:	230f      	movs	r3, #15
 800038e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000390:	2302      	movs	r3, #2
 8000392:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000394:	2300      	movs	r3, #0
 8000396:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000398:	2300      	movs	r3, #0
 800039a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800039c:	2300      	movs	r3, #0
 800039e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003a0:	1d3b      	adds	r3, r7, #4
 80003a2:	2101      	movs	r1, #1
 80003a4:	4618      	mov	r0, r3
 80003a6:	f001 fd35 	bl	8001e14 <HAL_RCC_ClockConfig>
 80003aa:	4603      	mov	r3, r0
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d001      	beq.n	80003b4 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80003b0:	f000 f886 	bl	80004c0 <Error_Handler>
  }
}
 80003b4:	bf00      	nop
 80003b6:	3740      	adds	r7, #64	; 0x40
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bd80      	pop	{r7, pc}

080003bc <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80003c0:	4b17      	ldr	r3, [pc, #92]	; (8000420 <MX_CAN_Init+0x64>)
 80003c2:	4a18      	ldr	r2, [pc, #96]	; (8000424 <MX_CAN_Init+0x68>)
 80003c4:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 2;
 80003c6:	4b16      	ldr	r3, [pc, #88]	; (8000420 <MX_CAN_Init+0x64>)
 80003c8:	2202      	movs	r2, #2
 80003ca:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80003cc:	4b14      	ldr	r3, [pc, #80]	; (8000420 <MX_CAN_Init+0x64>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80003d2:	4b13      	ldr	r3, [pc, #76]	; (8000420 <MX_CAN_Init+0x64>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 80003d8:	4b11      	ldr	r3, [pc, #68]	; (8000420 <MX_CAN_Init+0x64>)
 80003da:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80003de:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 80003e0:	4b0f      	ldr	r3, [pc, #60]	; (8000420 <MX_CAN_Init+0x64>)
 80003e2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80003e6:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80003e8:	4b0d      	ldr	r3, [pc, #52]	; (8000420 <MX_CAN_Init+0x64>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80003ee:	4b0c      	ldr	r3, [pc, #48]	; (8000420 <MX_CAN_Init+0x64>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80003f4:	4b0a      	ldr	r3, [pc, #40]	; (8000420 <MX_CAN_Init+0x64>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80003fa:	4b09      	ldr	r3, [pc, #36]	; (8000420 <MX_CAN_Init+0x64>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000400:	4b07      	ldr	r3, [pc, #28]	; (8000420 <MX_CAN_Init+0x64>)
 8000402:	2200      	movs	r2, #0
 8000404:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000406:	4b06      	ldr	r3, [pc, #24]	; (8000420 <MX_CAN_Init+0x64>)
 8000408:	2200      	movs	r2, #0
 800040a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800040c:	4804      	ldr	r0, [pc, #16]	; (8000420 <MX_CAN_Init+0x64>)
 800040e:	f000 fa95 	bl	800093c <HAL_CAN_Init>
 8000412:	4603      	mov	r3, r0
 8000414:	2b00      	cmp	r3, #0
 8000416:	d001      	beq.n	800041c <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000418:	f000 f852 	bl	80004c0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 800041c:	bf00      	nop
 800041e:	bd80      	pop	{r7, pc}
 8000420:	2000008c 	.word	0x2000008c
 8000424:	40006400 	.word	0x40006400

08000428 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800042c:	4b11      	ldr	r3, [pc, #68]	; (8000474 <MX_USART2_UART_Init+0x4c>)
 800042e:	4a12      	ldr	r2, [pc, #72]	; (8000478 <MX_USART2_UART_Init+0x50>)
 8000430:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000432:	4b10      	ldr	r3, [pc, #64]	; (8000474 <MX_USART2_UART_Init+0x4c>)
 8000434:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000438:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800043a:	4b0e      	ldr	r3, [pc, #56]	; (8000474 <MX_USART2_UART_Init+0x4c>)
 800043c:	2200      	movs	r2, #0
 800043e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000440:	4b0c      	ldr	r3, [pc, #48]	; (8000474 <MX_USART2_UART_Init+0x4c>)
 8000442:	2200      	movs	r2, #0
 8000444:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000446:	4b0b      	ldr	r3, [pc, #44]	; (8000474 <MX_USART2_UART_Init+0x4c>)
 8000448:	2200      	movs	r2, #0
 800044a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800044c:	4b09      	ldr	r3, [pc, #36]	; (8000474 <MX_USART2_UART_Init+0x4c>)
 800044e:	220c      	movs	r2, #12
 8000450:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000452:	4b08      	ldr	r3, [pc, #32]	; (8000474 <MX_USART2_UART_Init+0x4c>)
 8000454:	2200      	movs	r2, #0
 8000456:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000458:	4b06      	ldr	r3, [pc, #24]	; (8000474 <MX_USART2_UART_Init+0x4c>)
 800045a:	2200      	movs	r2, #0
 800045c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800045e:	4805      	ldr	r0, [pc, #20]	; (8000474 <MX_USART2_UART_Init+0x4c>)
 8000460:	f001 fe70 	bl	8002144 <HAL_UART_Init>
 8000464:	4603      	mov	r3, r0
 8000466:	2b00      	cmp	r3, #0
 8000468:	d001      	beq.n	800046e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800046a:	f000 f829 	bl	80004c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800046e:	bf00      	nop
 8000470:	bd80      	pop	{r7, pc}
 8000472:	bf00      	nop
 8000474:	200000b4 	.word	0x200000b4
 8000478:	40004400 	.word	0x40004400

0800047c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800047c:	b480      	push	{r7}
 800047e:	b083      	sub	sp, #12
 8000480:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000482:	4b0e      	ldr	r3, [pc, #56]	; (80004bc <MX_GPIO_Init+0x40>)
 8000484:	699b      	ldr	r3, [r3, #24]
 8000486:	4a0d      	ldr	r2, [pc, #52]	; (80004bc <MX_GPIO_Init+0x40>)
 8000488:	f043 0310 	orr.w	r3, r3, #16
 800048c:	6193      	str	r3, [r2, #24]
 800048e:	4b0b      	ldr	r3, [pc, #44]	; (80004bc <MX_GPIO_Init+0x40>)
 8000490:	699b      	ldr	r3, [r3, #24]
 8000492:	f003 0310 	and.w	r3, r3, #16
 8000496:	607b      	str	r3, [r7, #4]
 8000498:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800049a:	4b08      	ldr	r3, [pc, #32]	; (80004bc <MX_GPIO_Init+0x40>)
 800049c:	699b      	ldr	r3, [r3, #24]
 800049e:	4a07      	ldr	r2, [pc, #28]	; (80004bc <MX_GPIO_Init+0x40>)
 80004a0:	f043 0304 	orr.w	r3, r3, #4
 80004a4:	6193      	str	r3, [r2, #24]
 80004a6:	4b05      	ldr	r3, [pc, #20]	; (80004bc <MX_GPIO_Init+0x40>)
 80004a8:	699b      	ldr	r3, [r3, #24]
 80004aa:	f003 0304 	and.w	r3, r3, #4
 80004ae:	603b      	str	r3, [r7, #0]
 80004b0:	683b      	ldr	r3, [r7, #0]

}
 80004b2:	bf00      	nop
 80004b4:	370c      	adds	r7, #12
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bc80      	pop	{r7}
 80004ba:	4770      	bx	lr
 80004bc:	40021000 	.word	0x40021000

080004c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004c4:	b672      	cpsid	i
}
 80004c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004c8:	e7fe      	b.n	80004c8 <Error_Handler+0x8>
	...

080004cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b085      	sub	sp, #20
 80004d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004d2:	4b15      	ldr	r3, [pc, #84]	; (8000528 <HAL_MspInit+0x5c>)
 80004d4:	699b      	ldr	r3, [r3, #24]
 80004d6:	4a14      	ldr	r2, [pc, #80]	; (8000528 <HAL_MspInit+0x5c>)
 80004d8:	f043 0301 	orr.w	r3, r3, #1
 80004dc:	6193      	str	r3, [r2, #24]
 80004de:	4b12      	ldr	r3, [pc, #72]	; (8000528 <HAL_MspInit+0x5c>)
 80004e0:	699b      	ldr	r3, [r3, #24]
 80004e2:	f003 0301 	and.w	r3, r3, #1
 80004e6:	60bb      	str	r3, [r7, #8]
 80004e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004ea:	4b0f      	ldr	r3, [pc, #60]	; (8000528 <HAL_MspInit+0x5c>)
 80004ec:	69db      	ldr	r3, [r3, #28]
 80004ee:	4a0e      	ldr	r2, [pc, #56]	; (8000528 <HAL_MspInit+0x5c>)
 80004f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004f4:	61d3      	str	r3, [r2, #28]
 80004f6:	4b0c      	ldr	r3, [pc, #48]	; (8000528 <HAL_MspInit+0x5c>)
 80004f8:	69db      	ldr	r3, [r3, #28]
 80004fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004fe:	607b      	str	r3, [r7, #4]
 8000500:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000502:	4b0a      	ldr	r3, [pc, #40]	; (800052c <HAL_MspInit+0x60>)
 8000504:	685b      	ldr	r3, [r3, #4]
 8000506:	60fb      	str	r3, [r7, #12]
 8000508:	68fb      	ldr	r3, [r7, #12]
 800050a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800050e:	60fb      	str	r3, [r7, #12]
 8000510:	68fb      	ldr	r3, [r7, #12]
 8000512:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000516:	60fb      	str	r3, [r7, #12]
 8000518:	4a04      	ldr	r2, [pc, #16]	; (800052c <HAL_MspInit+0x60>)
 800051a:	68fb      	ldr	r3, [r7, #12]
 800051c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800051e:	bf00      	nop
 8000520:	3714      	adds	r7, #20
 8000522:	46bd      	mov	sp, r7
 8000524:	bc80      	pop	{r7}
 8000526:	4770      	bx	lr
 8000528:	40021000 	.word	0x40021000
 800052c:	40010000 	.word	0x40010000

08000530 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b088      	sub	sp, #32
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000538:	f107 0310 	add.w	r3, r7, #16
 800053c:	2200      	movs	r2, #0
 800053e:	601a      	str	r2, [r3, #0]
 8000540:	605a      	str	r2, [r3, #4]
 8000542:	609a      	str	r2, [r3, #8]
 8000544:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	4a28      	ldr	r2, [pc, #160]	; (80005ec <HAL_CAN_MspInit+0xbc>)
 800054c:	4293      	cmp	r3, r2
 800054e:	d149      	bne.n	80005e4 <HAL_CAN_MspInit+0xb4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000550:	4b27      	ldr	r3, [pc, #156]	; (80005f0 <HAL_CAN_MspInit+0xc0>)
 8000552:	69db      	ldr	r3, [r3, #28]
 8000554:	4a26      	ldr	r2, [pc, #152]	; (80005f0 <HAL_CAN_MspInit+0xc0>)
 8000556:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800055a:	61d3      	str	r3, [r2, #28]
 800055c:	4b24      	ldr	r3, [pc, #144]	; (80005f0 <HAL_CAN_MspInit+0xc0>)
 800055e:	69db      	ldr	r3, [r3, #28]
 8000560:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000564:	60fb      	str	r3, [r7, #12]
 8000566:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000568:	4b21      	ldr	r3, [pc, #132]	; (80005f0 <HAL_CAN_MspInit+0xc0>)
 800056a:	699b      	ldr	r3, [r3, #24]
 800056c:	4a20      	ldr	r2, [pc, #128]	; (80005f0 <HAL_CAN_MspInit+0xc0>)
 800056e:	f043 0304 	orr.w	r3, r3, #4
 8000572:	6193      	str	r3, [r2, #24]
 8000574:	4b1e      	ldr	r3, [pc, #120]	; (80005f0 <HAL_CAN_MspInit+0xc0>)
 8000576:	699b      	ldr	r3, [r3, #24]
 8000578:	f003 0304 	and.w	r3, r3, #4
 800057c:	60bb      	str	r3, [r7, #8]
 800057e:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000580:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000584:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000586:	2300      	movs	r3, #0
 8000588:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800058a:	2300      	movs	r3, #0
 800058c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800058e:	f107 0310 	add.w	r3, r7, #16
 8000592:	4619      	mov	r1, r3
 8000594:	4817      	ldr	r0, [pc, #92]	; (80005f4 <HAL_CAN_MspInit+0xc4>)
 8000596:	f001 f837 	bl	8001608 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800059a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800059e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005a0:	2302      	movs	r3, #2
 80005a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005a4:	2303      	movs	r3, #3
 80005a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005a8:	f107 0310 	add.w	r3, r7, #16
 80005ac:	4619      	mov	r1, r3
 80005ae:	4811      	ldr	r0, [pc, #68]	; (80005f4 <HAL_CAN_MspInit+0xc4>)
 80005b0:	f001 f82a 	bl	8001608 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 80005b4:	2200      	movs	r2, #0
 80005b6:	2100      	movs	r1, #0
 80005b8:	2013      	movs	r0, #19
 80005ba:	f000 ffee 	bl	800159a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 80005be:	2013      	movs	r0, #19
 80005c0:	f001 f807 	bl	80015d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80005c4:	2200      	movs	r2, #0
 80005c6:	2100      	movs	r1, #0
 80005c8:	2014      	movs	r0, #20
 80005ca:	f000 ffe6 	bl	800159a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80005ce:	2014      	movs	r0, #20
 80005d0:	f000 ffff 	bl	80015d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 80005d4:	2200      	movs	r2, #0
 80005d6:	2100      	movs	r1, #0
 80005d8:	2015      	movs	r0, #21
 80005da:	f000 ffde 	bl	800159a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80005de:	2015      	movs	r0, #21
 80005e0:	f000 fff7 	bl	80015d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80005e4:	bf00      	nop
 80005e6:	3720      	adds	r7, #32
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	40006400 	.word	0x40006400
 80005f0:	40021000 	.word	0x40021000
 80005f4:	40010800 	.word	0x40010800

080005f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b088      	sub	sp, #32
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000600:	f107 0310 	add.w	r3, r7, #16
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	605a      	str	r2, [r3, #4]
 800060a:	609a      	str	r2, [r3, #8]
 800060c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	4a1b      	ldr	r2, [pc, #108]	; (8000680 <HAL_UART_MspInit+0x88>)
 8000614:	4293      	cmp	r3, r2
 8000616:	d12f      	bne.n	8000678 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000618:	4b1a      	ldr	r3, [pc, #104]	; (8000684 <HAL_UART_MspInit+0x8c>)
 800061a:	69db      	ldr	r3, [r3, #28]
 800061c:	4a19      	ldr	r2, [pc, #100]	; (8000684 <HAL_UART_MspInit+0x8c>)
 800061e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000622:	61d3      	str	r3, [r2, #28]
 8000624:	4b17      	ldr	r3, [pc, #92]	; (8000684 <HAL_UART_MspInit+0x8c>)
 8000626:	69db      	ldr	r3, [r3, #28]
 8000628:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800062c:	60fb      	str	r3, [r7, #12]
 800062e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000630:	4b14      	ldr	r3, [pc, #80]	; (8000684 <HAL_UART_MspInit+0x8c>)
 8000632:	699b      	ldr	r3, [r3, #24]
 8000634:	4a13      	ldr	r2, [pc, #76]	; (8000684 <HAL_UART_MspInit+0x8c>)
 8000636:	f043 0304 	orr.w	r3, r3, #4
 800063a:	6193      	str	r3, [r2, #24]
 800063c:	4b11      	ldr	r3, [pc, #68]	; (8000684 <HAL_UART_MspInit+0x8c>)
 800063e:	699b      	ldr	r3, [r3, #24]
 8000640:	f003 0304 	and.w	r3, r3, #4
 8000644:	60bb      	str	r3, [r7, #8]
 8000646:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000648:	2304      	movs	r3, #4
 800064a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800064c:	2302      	movs	r3, #2
 800064e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000650:	2303      	movs	r3, #3
 8000652:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000654:	f107 0310 	add.w	r3, r7, #16
 8000658:	4619      	mov	r1, r3
 800065a:	480b      	ldr	r0, [pc, #44]	; (8000688 <HAL_UART_MspInit+0x90>)
 800065c:	f000 ffd4 	bl	8001608 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000660:	2308      	movs	r3, #8
 8000662:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000664:	2300      	movs	r3, #0
 8000666:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000668:	2300      	movs	r3, #0
 800066a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800066c:	f107 0310 	add.w	r3, r7, #16
 8000670:	4619      	mov	r1, r3
 8000672:	4805      	ldr	r0, [pc, #20]	; (8000688 <HAL_UART_MspInit+0x90>)
 8000674:	f000 ffc8 	bl	8001608 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000678:	bf00      	nop
 800067a:	3720      	adds	r7, #32
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	40004400 	.word	0x40004400
 8000684:	40021000 	.word	0x40021000
 8000688:	40010800 	.word	0x40010800

0800068c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000690:	e7fe      	b.n	8000690 <NMI_Handler+0x4>

08000692 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000692:	b480      	push	{r7}
 8000694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000696:	e7fe      	b.n	8000696 <HardFault_Handler+0x4>

08000698 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800069c:	e7fe      	b.n	800069c <MemManage_Handler+0x4>

0800069e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800069e:	b480      	push	{r7}
 80006a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006a2:	e7fe      	b.n	80006a2 <BusFault_Handler+0x4>

080006a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006a8:	e7fe      	b.n	80006a8 <UsageFault_Handler+0x4>

080006aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006aa:	b480      	push	{r7}
 80006ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006ae:	bf00      	nop
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bc80      	pop	{r7}
 80006b4:	4770      	bx	lr

080006b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006b6:	b480      	push	{r7}
 80006b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006ba:	bf00      	nop
 80006bc:	46bd      	mov	sp, r7
 80006be:	bc80      	pop	{r7}
 80006c0:	4770      	bx	lr

080006c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006c2:	b480      	push	{r7}
 80006c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006c6:	bf00      	nop
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bc80      	pop	{r7}
 80006cc:	4770      	bx	lr

080006ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006ce:	b580      	push	{r7, lr}
 80006d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006d2:	f000 f917 	bl	8000904 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006d6:	bf00      	nop
 80006d8:	bd80      	pop	{r7, pc}
	...

080006dc <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80006e0:	4802      	ldr	r0, [pc, #8]	; (80006ec <USB_HP_CAN1_TX_IRQHandler+0x10>)
 80006e2:	f000 fc69 	bl	8000fb8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 80006e6:	bf00      	nop
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	2000008c 	.word	0x2000008c

080006f0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80006f4:	4802      	ldr	r0, [pc, #8]	; (8000700 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80006f6:	f000 fc5f 	bl	8000fb8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80006fa:	bf00      	nop
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	2000008c 	.word	0x2000008c

08000704 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000708:	4802      	ldr	r0, [pc, #8]	; (8000714 <CAN1_RX1_IRQHandler+0x10>)
 800070a:	f000 fc55 	bl	8000fb8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800070e:	bf00      	nop
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	2000008c 	.word	0x2000008c

08000718 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b086      	sub	sp, #24
 800071c:	af00      	add	r7, sp, #0
 800071e:	60f8      	str	r0, [r7, #12]
 8000720:	60b9      	str	r1, [r7, #8]
 8000722:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000724:	2300      	movs	r3, #0
 8000726:	617b      	str	r3, [r7, #20]
 8000728:	e00a      	b.n	8000740 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800072a:	f3af 8000 	nop.w
 800072e:	4601      	mov	r1, r0
 8000730:	68bb      	ldr	r3, [r7, #8]
 8000732:	1c5a      	adds	r2, r3, #1
 8000734:	60ba      	str	r2, [r7, #8]
 8000736:	b2ca      	uxtb	r2, r1
 8000738:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800073a:	697b      	ldr	r3, [r7, #20]
 800073c:	3301      	adds	r3, #1
 800073e:	617b      	str	r3, [r7, #20]
 8000740:	697a      	ldr	r2, [r7, #20]
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	429a      	cmp	r2, r3
 8000746:	dbf0      	blt.n	800072a <_read+0x12>
	}

return len;
 8000748:	687b      	ldr	r3, [r7, #4]
}
 800074a:	4618      	mov	r0, r3
 800074c:	3718      	adds	r7, #24
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}

08000752 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000752:	b480      	push	{r7}
 8000754:	b083      	sub	sp, #12
 8000756:	af00      	add	r7, sp, #0
 8000758:	6078      	str	r0, [r7, #4]
	return -1;
 800075a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800075e:	4618      	mov	r0, r3
 8000760:	370c      	adds	r7, #12
 8000762:	46bd      	mov	sp, r7
 8000764:	bc80      	pop	{r7}
 8000766:	4770      	bx	lr

08000768 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000768:	b480      	push	{r7}
 800076a:	b083      	sub	sp, #12
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
 8000770:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000772:	683b      	ldr	r3, [r7, #0]
 8000774:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000778:	605a      	str	r2, [r3, #4]
	return 0;
 800077a:	2300      	movs	r3, #0
}
 800077c:	4618      	mov	r0, r3
 800077e:	370c      	adds	r7, #12
 8000780:	46bd      	mov	sp, r7
 8000782:	bc80      	pop	{r7}
 8000784:	4770      	bx	lr

08000786 <_isatty>:

int _isatty(int file)
{
 8000786:	b480      	push	{r7}
 8000788:	b083      	sub	sp, #12
 800078a:	af00      	add	r7, sp, #0
 800078c:	6078      	str	r0, [r7, #4]
	return 1;
 800078e:	2301      	movs	r3, #1
}
 8000790:	4618      	mov	r0, r3
 8000792:	370c      	adds	r7, #12
 8000794:	46bd      	mov	sp, r7
 8000796:	bc80      	pop	{r7}
 8000798:	4770      	bx	lr

0800079a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800079a:	b480      	push	{r7}
 800079c:	b085      	sub	sp, #20
 800079e:	af00      	add	r7, sp, #0
 80007a0:	60f8      	str	r0, [r7, #12]
 80007a2:	60b9      	str	r1, [r7, #8]
 80007a4:	607a      	str	r2, [r7, #4]
	return 0;
 80007a6:	2300      	movs	r3, #0
}
 80007a8:	4618      	mov	r0, r3
 80007aa:	3714      	adds	r7, #20
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bc80      	pop	{r7}
 80007b0:	4770      	bx	lr
	...

080007b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b086      	sub	sp, #24
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007bc:	4a14      	ldr	r2, [pc, #80]	; (8000810 <_sbrk+0x5c>)
 80007be:	4b15      	ldr	r3, [pc, #84]	; (8000814 <_sbrk+0x60>)
 80007c0:	1ad3      	subs	r3, r2, r3
 80007c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007c4:	697b      	ldr	r3, [r7, #20]
 80007c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007c8:	4b13      	ldr	r3, [pc, #76]	; (8000818 <_sbrk+0x64>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d102      	bne.n	80007d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007d0:	4b11      	ldr	r3, [pc, #68]	; (8000818 <_sbrk+0x64>)
 80007d2:	4a12      	ldr	r2, [pc, #72]	; (800081c <_sbrk+0x68>)
 80007d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007d6:	4b10      	ldr	r3, [pc, #64]	; (8000818 <_sbrk+0x64>)
 80007d8:	681a      	ldr	r2, [r3, #0]
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	4413      	add	r3, r2
 80007de:	693a      	ldr	r2, [r7, #16]
 80007e0:	429a      	cmp	r2, r3
 80007e2:	d207      	bcs.n	80007f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007e4:	f001 fe66 	bl	80024b4 <__errno>
 80007e8:	4603      	mov	r3, r0
 80007ea:	220c      	movs	r2, #12
 80007ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007ee:	f04f 33ff 	mov.w	r3, #4294967295
 80007f2:	e009      	b.n	8000808 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007f4:	4b08      	ldr	r3, [pc, #32]	; (8000818 <_sbrk+0x64>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007fa:	4b07      	ldr	r3, [pc, #28]	; (8000818 <_sbrk+0x64>)
 80007fc:	681a      	ldr	r2, [r3, #0]
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	4413      	add	r3, r2
 8000802:	4a05      	ldr	r2, [pc, #20]	; (8000818 <_sbrk+0x64>)
 8000804:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000806:	68fb      	ldr	r3, [r7, #12]
}
 8000808:	4618      	mov	r0, r3
 800080a:	3718      	adds	r7, #24
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	20005000 	.word	0x20005000
 8000814:	00000400 	.word	0x00000400
 8000818:	20000144 	.word	0x20000144
 800081c:	20000160 	.word	0x20000160

08000820 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000824:	bf00      	nop
 8000826:	46bd      	mov	sp, r7
 8000828:	bc80      	pop	{r7}
 800082a:	4770      	bx	lr

0800082c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800082c:	480c      	ldr	r0, [pc, #48]	; (8000860 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800082e:	490d      	ldr	r1, [pc, #52]	; (8000864 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000830:	4a0d      	ldr	r2, [pc, #52]	; (8000868 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000832:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000834:	e002      	b.n	800083c <LoopCopyDataInit>

08000836 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000836:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000838:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800083a:	3304      	adds	r3, #4

0800083c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800083c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800083e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000840:	d3f9      	bcc.n	8000836 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000842:	4a0a      	ldr	r2, [pc, #40]	; (800086c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000844:	4c0a      	ldr	r4, [pc, #40]	; (8000870 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000846:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000848:	e001      	b.n	800084e <LoopFillZerobss>

0800084a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800084a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800084c:	3204      	adds	r2, #4

0800084e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800084e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000850:	d3fb      	bcc.n	800084a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000852:	f7ff ffe5 	bl	8000820 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000856:	f001 fe33 	bl	80024c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800085a:	f7ff fcef 	bl	800023c <main>
  bx lr
 800085e:	4770      	bx	lr
  ldr r0, =_sdata
 8000860:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000864:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000868:	080036b4 	.word	0x080036b4
  ldr r2, =_sbss
 800086c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000870:	2000015c 	.word	0x2000015c

08000874 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000874:	e7fe      	b.n	8000874 <ADC1_2_IRQHandler>
	...

08000878 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800087c:	4b08      	ldr	r3, [pc, #32]	; (80008a0 <HAL_Init+0x28>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a07      	ldr	r2, [pc, #28]	; (80008a0 <HAL_Init+0x28>)
 8000882:	f043 0310 	orr.w	r3, r3, #16
 8000886:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000888:	2003      	movs	r0, #3
 800088a:	f000 fe7b 	bl	8001584 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800088e:	200f      	movs	r0, #15
 8000890:	f000 f808 	bl	80008a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000894:	f7ff fe1a 	bl	80004cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000898:	2300      	movs	r3, #0
}
 800089a:	4618      	mov	r0, r3
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	40022000 	.word	0x40022000

080008a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008ac:	4b12      	ldr	r3, [pc, #72]	; (80008f8 <HAL_InitTick+0x54>)
 80008ae:	681a      	ldr	r2, [r3, #0]
 80008b0:	4b12      	ldr	r3, [pc, #72]	; (80008fc <HAL_InitTick+0x58>)
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	4619      	mov	r1, r3
 80008b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80008be:	fbb2 f3f3 	udiv	r3, r2, r3
 80008c2:	4618      	mov	r0, r3
 80008c4:	f000 fe93 	bl	80015ee <HAL_SYSTICK_Config>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008ce:	2301      	movs	r3, #1
 80008d0:	e00e      	b.n	80008f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	2b0f      	cmp	r3, #15
 80008d6:	d80a      	bhi.n	80008ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008d8:	2200      	movs	r2, #0
 80008da:	6879      	ldr	r1, [r7, #4]
 80008dc:	f04f 30ff 	mov.w	r0, #4294967295
 80008e0:	f000 fe5b 	bl	800159a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008e4:	4a06      	ldr	r2, [pc, #24]	; (8000900 <HAL_InitTick+0x5c>)
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008ea:	2300      	movs	r3, #0
 80008ec:	e000      	b.n	80008f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008ee:	2301      	movs	r3, #1
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	3708      	adds	r7, #8
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	20000000 	.word	0x20000000
 80008fc:	20000008 	.word	0x20000008
 8000900:	20000004 	.word	0x20000004

08000904 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000908:	4b05      	ldr	r3, [pc, #20]	; (8000920 <HAL_IncTick+0x1c>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	461a      	mov	r2, r3
 800090e:	4b05      	ldr	r3, [pc, #20]	; (8000924 <HAL_IncTick+0x20>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	4413      	add	r3, r2
 8000914:	4a03      	ldr	r2, [pc, #12]	; (8000924 <HAL_IncTick+0x20>)
 8000916:	6013      	str	r3, [r2, #0]
}
 8000918:	bf00      	nop
 800091a:	46bd      	mov	sp, r7
 800091c:	bc80      	pop	{r7}
 800091e:	4770      	bx	lr
 8000920:	20000008 	.word	0x20000008
 8000924:	20000148 	.word	0x20000148

08000928 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  return uwTick;
 800092c:	4b02      	ldr	r3, [pc, #8]	; (8000938 <HAL_GetTick+0x10>)
 800092e:	681b      	ldr	r3, [r3, #0]
}
 8000930:	4618      	mov	r0, r3
 8000932:	46bd      	mov	sp, r7
 8000934:	bc80      	pop	{r7}
 8000936:	4770      	bx	lr
 8000938:	20000148 	.word	0x20000148

0800093c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b084      	sub	sp, #16
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	2b00      	cmp	r3, #0
 8000948:	d101      	bne.n	800094e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800094a:	2301      	movs	r3, #1
 800094c:	e0ed      	b.n	8000b2a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000954:	b2db      	uxtb	r3, r3
 8000956:	2b00      	cmp	r3, #0
 8000958:	d102      	bne.n	8000960 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800095a:	6878      	ldr	r0, [r7, #4]
 800095c:	f7ff fde8 	bl	8000530 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	681a      	ldr	r2, [r3, #0]
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	f042 0201 	orr.w	r2, r2, #1
 800096e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000970:	f7ff ffda 	bl	8000928 <HAL_GetTick>
 8000974:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000976:	e012      	b.n	800099e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000978:	f7ff ffd6 	bl	8000928 <HAL_GetTick>
 800097c:	4602      	mov	r2, r0
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	1ad3      	subs	r3, r2, r3
 8000982:	2b0a      	cmp	r3, #10
 8000984:	d90b      	bls.n	800099e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800098a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	2205      	movs	r2, #5
 8000996:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800099a:	2301      	movs	r3, #1
 800099c:	e0c5      	b.n	8000b2a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	685b      	ldr	r3, [r3, #4]
 80009a4:	f003 0301 	and.w	r3, r3, #1
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d0e5      	beq.n	8000978 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	681a      	ldr	r2, [r3, #0]
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	f022 0202 	bic.w	r2, r2, #2
 80009ba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80009bc:	f7ff ffb4 	bl	8000928 <HAL_GetTick>
 80009c0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80009c2:	e012      	b.n	80009ea <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80009c4:	f7ff ffb0 	bl	8000928 <HAL_GetTick>
 80009c8:	4602      	mov	r2, r0
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	1ad3      	subs	r3, r2, r3
 80009ce:	2b0a      	cmp	r3, #10
 80009d0:	d90b      	bls.n	80009ea <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009d6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	2205      	movs	r2, #5
 80009e2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80009e6:	2301      	movs	r3, #1
 80009e8:	e09f      	b.n	8000b2a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	685b      	ldr	r3, [r3, #4]
 80009f0:	f003 0302 	and.w	r3, r3, #2
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d1e5      	bne.n	80009c4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	7e1b      	ldrb	r3, [r3, #24]
 80009fc:	2b01      	cmp	r3, #1
 80009fe:	d108      	bne.n	8000a12 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	681a      	ldr	r2, [r3, #0]
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	e007      	b.n	8000a22 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	681a      	ldr	r2, [r3, #0]
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000a20:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	7e5b      	ldrb	r3, [r3, #25]
 8000a26:	2b01      	cmp	r3, #1
 8000a28:	d108      	bne.n	8000a3c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	681a      	ldr	r2, [r3, #0]
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000a38:	601a      	str	r2, [r3, #0]
 8000a3a:	e007      	b.n	8000a4c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	681a      	ldr	r2, [r3, #0]
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000a4a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	7e9b      	ldrb	r3, [r3, #26]
 8000a50:	2b01      	cmp	r3, #1
 8000a52:	d108      	bne.n	8000a66 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	681a      	ldr	r2, [r3, #0]
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	f042 0220 	orr.w	r2, r2, #32
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	e007      	b.n	8000a76 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	681a      	ldr	r2, [r3, #0]
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	f022 0220 	bic.w	r2, r2, #32
 8000a74:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	7edb      	ldrb	r3, [r3, #27]
 8000a7a:	2b01      	cmp	r3, #1
 8000a7c:	d108      	bne.n	8000a90 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	681a      	ldr	r2, [r3, #0]
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	f022 0210 	bic.w	r2, r2, #16
 8000a8c:	601a      	str	r2, [r3, #0]
 8000a8e:	e007      	b.n	8000aa0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	681a      	ldr	r2, [r3, #0]
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	f042 0210 	orr.w	r2, r2, #16
 8000a9e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	7f1b      	ldrb	r3, [r3, #28]
 8000aa4:	2b01      	cmp	r3, #1
 8000aa6:	d108      	bne.n	8000aba <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	681a      	ldr	r2, [r3, #0]
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	f042 0208 	orr.w	r2, r2, #8
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	e007      	b.n	8000aca <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	681a      	ldr	r2, [r3, #0]
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	f022 0208 	bic.w	r2, r2, #8
 8000ac8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	7f5b      	ldrb	r3, [r3, #29]
 8000ace:	2b01      	cmp	r3, #1
 8000ad0:	d108      	bne.n	8000ae4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	681a      	ldr	r2, [r3, #0]
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	f042 0204 	orr.w	r2, r2, #4
 8000ae0:	601a      	str	r2, [r3, #0]
 8000ae2:	e007      	b.n	8000af4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	681a      	ldr	r2, [r3, #0]
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	f022 0204 	bic.w	r2, r2, #4
 8000af2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	689a      	ldr	r2, [r3, #8]
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	68db      	ldr	r3, [r3, #12]
 8000afc:	431a      	orrs	r2, r3
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	691b      	ldr	r3, [r3, #16]
 8000b02:	431a      	orrs	r2, r3
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	695b      	ldr	r3, [r3, #20]
 8000b08:	ea42 0103 	orr.w	r1, r2, r3
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	685b      	ldr	r3, [r3, #4]
 8000b10:	1e5a      	subs	r2, r3, #1
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	430a      	orrs	r2, r1
 8000b18:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	2201      	movs	r2, #1
 8000b24:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000b28:	2300      	movs	r3, #0
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3710      	adds	r7, #16
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}

08000b32 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000b32:	b480      	push	{r7}
 8000b34:	b087      	sub	sp, #28
 8000b36:	af00      	add	r7, sp, #0
 8000b38:	6078      	str	r0, [r7, #4]
 8000b3a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b48:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000b4a:	7cfb      	ldrb	r3, [r7, #19]
 8000b4c:	2b01      	cmp	r3, #1
 8000b4e:	d003      	beq.n	8000b58 <HAL_CAN_ConfigFilter+0x26>
 8000b50:	7cfb      	ldrb	r3, [r7, #19]
 8000b52:	2b02      	cmp	r3, #2
 8000b54:	f040 80aa 	bne.w	8000cac <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000b5e:	f043 0201 	orr.w	r2, r3, #1
 8000b62:	697b      	ldr	r3, [r7, #20]
 8000b64:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	695b      	ldr	r3, [r3, #20]
 8000b6c:	f003 031f 	and.w	r3, r3, #31
 8000b70:	2201      	movs	r2, #1
 8000b72:	fa02 f303 	lsl.w	r3, r2, r3
 8000b76:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	43db      	mvns	r3, r3
 8000b82:	401a      	ands	r2, r3
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	69db      	ldr	r3, [r3, #28]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d123      	bne.n	8000bda <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	43db      	mvns	r3, r3
 8000b9c:	401a      	ands	r2, r3
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	68db      	ldr	r3, [r3, #12]
 8000ba8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	685b      	ldr	r3, [r3, #4]
 8000bae:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000bb0:	683a      	ldr	r2, [r7, #0]
 8000bb2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000bb4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	3248      	adds	r2, #72	; 0x48
 8000bba:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	689b      	ldr	r3, [r3, #8]
 8000bc2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000bce:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000bd0:	6979      	ldr	r1, [r7, #20]
 8000bd2:	3348      	adds	r3, #72	; 0x48
 8000bd4:	00db      	lsls	r3, r3, #3
 8000bd6:	440b      	add	r3, r1
 8000bd8:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	69db      	ldr	r3, [r3, #28]
 8000bde:	2b01      	cmp	r3, #1
 8000be0:	d122      	bne.n	8000c28 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	431a      	orrs	r2, r3
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000bfe:	683a      	ldr	r2, [r7, #0]
 8000c00:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000c02:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	3248      	adds	r2, #72	; 0x48
 8000c08:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	689b      	ldr	r3, [r3, #8]
 8000c10:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	68db      	ldr	r3, [r3, #12]
 8000c16:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000c1c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000c1e:	6979      	ldr	r1, [r7, #20]
 8000c20:	3348      	adds	r3, #72	; 0x48
 8000c22:	00db      	lsls	r3, r3, #3
 8000c24:	440b      	add	r3, r1
 8000c26:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	699b      	ldr	r3, [r3, #24]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d109      	bne.n	8000c44 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	43db      	mvns	r3, r3
 8000c3a:	401a      	ands	r2, r3
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000c42:	e007      	b.n	8000c54 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	431a      	orrs	r2, r3
 8000c4e:	697b      	ldr	r3, [r7, #20]
 8000c50:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	691b      	ldr	r3, [r3, #16]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d109      	bne.n	8000c70 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	43db      	mvns	r3, r3
 8000c66:	401a      	ands	r2, r3
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000c6e:	e007      	b.n	8000c80 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	431a      	orrs	r2, r3
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	6a1b      	ldr	r3, [r3, #32]
 8000c84:	2b01      	cmp	r3, #1
 8000c86:	d107      	bne.n	8000c98 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	431a      	orrs	r2, r3
 8000c92:	697b      	ldr	r3, [r7, #20]
 8000c94:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000c9e:	f023 0201 	bic.w	r2, r3, #1
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	e006      	b.n	8000cba <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cb0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000cb8:	2301      	movs	r3, #1
  }
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	371c      	adds	r7, #28
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bc80      	pop	{r7}
 8000cc2:	4770      	bx	lr

08000cc4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000cd2:	b2db      	uxtb	r3, r3
 8000cd4:	2b01      	cmp	r3, #1
 8000cd6:	d12e      	bne.n	8000d36 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	2202      	movs	r2, #2
 8000cdc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	681a      	ldr	r2, [r3, #0]
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f022 0201 	bic.w	r2, r2, #1
 8000cee:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000cf0:	f7ff fe1a 	bl	8000928 <HAL_GetTick>
 8000cf4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000cf6:	e012      	b.n	8000d1e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000cf8:	f7ff fe16 	bl	8000928 <HAL_GetTick>
 8000cfc:	4602      	mov	r2, r0
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	1ad3      	subs	r3, r2, r3
 8000d02:	2b0a      	cmp	r3, #10
 8000d04:	d90b      	bls.n	8000d1e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d0a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	2205      	movs	r2, #5
 8000d16:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	e012      	b.n	8000d44 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	f003 0301 	and.w	r3, r3, #1
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d1e5      	bne.n	8000cf8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	2200      	movs	r2, #0
 8000d30:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000d32:	2300      	movs	r3, #0
 8000d34:	e006      	b.n	8000d44 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d3a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000d42:	2301      	movs	r3, #1
  }
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	3710      	adds	r7, #16
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}

08000d4c <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b087      	sub	sp, #28
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	60f8      	str	r0, [r7, #12]
 8000d54:	60b9      	str	r1, [r7, #8]
 8000d56:	607a      	str	r2, [r7, #4]
 8000d58:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d60:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000d62:	7dfb      	ldrb	r3, [r7, #23]
 8000d64:	2b01      	cmp	r3, #1
 8000d66:	d003      	beq.n	8000d70 <HAL_CAN_GetRxMessage+0x24>
 8000d68:	7dfb      	ldrb	r3, [r7, #23]
 8000d6a:	2b02      	cmp	r3, #2
 8000d6c:	f040 80f3 	bne.w	8000f56 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d10e      	bne.n	8000d94 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	68db      	ldr	r3, [r3, #12]
 8000d7c:	f003 0303 	and.w	r3, r3, #3
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d116      	bne.n	8000db2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d88:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000d90:	2301      	movs	r3, #1
 8000d92:	e0e7      	b.n	8000f64 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	691b      	ldr	r3, [r3, #16]
 8000d9a:	f003 0303 	and.w	r3, r3, #3
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d107      	bne.n	8000db2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000da6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000dae:	2301      	movs	r3, #1
 8000db0:	e0d8      	b.n	8000f64 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	681a      	ldr	r2, [r3, #0]
 8000db6:	68bb      	ldr	r3, [r7, #8]
 8000db8:	331b      	adds	r3, #27
 8000dba:	011b      	lsls	r3, r3, #4
 8000dbc:	4413      	add	r3, r2
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f003 0204 	and.w	r2, r3, #4
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	689b      	ldr	r3, [r3, #8]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d10c      	bne.n	8000dea <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	331b      	adds	r3, #27
 8000dd8:	011b      	lsls	r3, r3, #4
 8000dda:	4413      	add	r3, r2
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	0d5b      	lsrs	r3, r3, #21
 8000de0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	e00b      	b.n	8000e02 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	68bb      	ldr	r3, [r7, #8]
 8000df0:	331b      	adds	r3, #27
 8000df2:	011b      	lsls	r3, r3, #4
 8000df4:	4413      	add	r3, r2
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	08db      	lsrs	r3, r3, #3
 8000dfa:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	68bb      	ldr	r3, [r7, #8]
 8000e08:	331b      	adds	r3, #27
 8000e0a:	011b      	lsls	r3, r3, #4
 8000e0c:	4413      	add	r3, r2
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f003 0202 	and.w	r2, r3, #2
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	331b      	adds	r3, #27
 8000e20:	011b      	lsls	r3, r3, #4
 8000e22:	4413      	add	r3, r2
 8000e24:	3304      	adds	r3, #4
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f003 020f 	and.w	r2, r3, #15
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	331b      	adds	r3, #27
 8000e38:	011b      	lsls	r3, r3, #4
 8000e3a:	4413      	add	r3, r2
 8000e3c:	3304      	adds	r3, #4
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	0a1b      	lsrs	r3, r3, #8
 8000e42:	b2da      	uxtb	r2, r3
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	331b      	adds	r3, #27
 8000e50:	011b      	lsls	r3, r3, #4
 8000e52:	4413      	add	r3, r2
 8000e54:	3304      	adds	r3, #4
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	0c1b      	lsrs	r3, r3, #16
 8000e5a:	b29a      	uxth	r2, r3
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	011b      	lsls	r3, r3, #4
 8000e68:	4413      	add	r3, r2
 8000e6a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	b2da      	uxtb	r2, r3
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	681a      	ldr	r2, [r3, #0]
 8000e7a:	68bb      	ldr	r3, [r7, #8]
 8000e7c:	011b      	lsls	r3, r3, #4
 8000e7e:	4413      	add	r3, r2
 8000e80:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	0a1a      	lsrs	r2, r3, #8
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	3301      	adds	r3, #1
 8000e8c:	b2d2      	uxtb	r2, r2
 8000e8e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	011b      	lsls	r3, r3, #4
 8000e98:	4413      	add	r3, r2
 8000e9a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	0c1a      	lsrs	r2, r3, #16
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	3302      	adds	r3, #2
 8000ea6:	b2d2      	uxtb	r2, r2
 8000ea8:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	681a      	ldr	r2, [r3, #0]
 8000eae:	68bb      	ldr	r3, [r7, #8]
 8000eb0:	011b      	lsls	r3, r3, #4
 8000eb2:	4413      	add	r3, r2
 8000eb4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	0e1a      	lsrs	r2, r3, #24
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	3303      	adds	r3, #3
 8000ec0:	b2d2      	uxtb	r2, r2
 8000ec2:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	011b      	lsls	r3, r3, #4
 8000ecc:	4413      	add	r3, r2
 8000ece:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	3304      	adds	r3, #4
 8000ed8:	b2d2      	uxtb	r2, r2
 8000eda:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	011b      	lsls	r3, r3, #4
 8000ee4:	4413      	add	r3, r2
 8000ee6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	0a1a      	lsrs	r2, r3, #8
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	3305      	adds	r3, #5
 8000ef2:	b2d2      	uxtb	r2, r2
 8000ef4:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	68bb      	ldr	r3, [r7, #8]
 8000efc:	011b      	lsls	r3, r3, #4
 8000efe:	4413      	add	r3, r2
 8000f00:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	0c1a      	lsrs	r2, r3, #16
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	3306      	adds	r3, #6
 8000f0c:	b2d2      	uxtb	r2, r2
 8000f0e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	011b      	lsls	r3, r3, #4
 8000f18:	4413      	add	r3, r2
 8000f1a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	0e1a      	lsrs	r2, r3, #24
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	3307      	adds	r3, #7
 8000f26:	b2d2      	uxtb	r2, r2
 8000f28:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000f2a:	68bb      	ldr	r3, [r7, #8]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d108      	bne.n	8000f42 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	68da      	ldr	r2, [r3, #12]
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f042 0220 	orr.w	r2, r2, #32
 8000f3e:	60da      	str	r2, [r3, #12]
 8000f40:	e007      	b.n	8000f52 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	691a      	ldr	r2, [r3, #16]
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f042 0220 	orr.w	r2, r2, #32
 8000f50:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8000f52:	2300      	movs	r3, #0
 8000f54:	e006      	b.n	8000f64 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f5a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000f62:	2301      	movs	r3, #1
  }
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	371c      	adds	r7, #28
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bc80      	pop	{r7}
 8000f6c:	4770      	bx	lr

08000f6e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	b085      	sub	sp, #20
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	6078      	str	r0, [r7, #4]
 8000f76:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f7e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8000f80:	7bfb      	ldrb	r3, [r7, #15]
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	d002      	beq.n	8000f8c <HAL_CAN_ActivateNotification+0x1e>
 8000f86:	7bfb      	ldrb	r3, [r7, #15]
 8000f88:	2b02      	cmp	r3, #2
 8000f8a:	d109      	bne.n	8000fa0 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	6959      	ldr	r1, [r3, #20]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	683a      	ldr	r2, [r7, #0]
 8000f98:	430a      	orrs	r2, r1
 8000f9a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	e006      	b.n	8000fae <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fa4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000fac:	2301      	movs	r3, #1
  }
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3714      	adds	r7, #20
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bc80      	pop	{r7}
 8000fb6:	4770      	bx	lr

08000fb8 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b08a      	sub	sp, #40	; 0x28
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	695b      	ldr	r3, [r3, #20]
 8000fca:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	689b      	ldr	r3, [r3, #8]
 8000fda:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	68db      	ldr	r3, [r3, #12]
 8000fe2:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	691b      	ldr	r3, [r3, #16]
 8000fea:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	699b      	ldr	r3, [r3, #24]
 8000ff2:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000ff4:	6a3b      	ldr	r3, [r7, #32]
 8000ff6:	f003 0301 	and.w	r3, r3, #1
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d07c      	beq.n	80010f8 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000ffe:	69bb      	ldr	r3, [r7, #24]
 8001000:	f003 0301 	and.w	r3, r3, #1
 8001004:	2b00      	cmp	r3, #0
 8001006:	d023      	beq.n	8001050 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	2201      	movs	r2, #1
 800100e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001010:	69bb      	ldr	r3, [r7, #24]
 8001012:	f003 0302 	and.w	r3, r3, #2
 8001016:	2b00      	cmp	r3, #0
 8001018:	d003      	beq.n	8001022 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f000 f983 	bl	8001326 <HAL_CAN_TxMailbox0CompleteCallback>
 8001020:	e016      	b.n	8001050 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001022:	69bb      	ldr	r3, [r7, #24]
 8001024:	f003 0304 	and.w	r3, r3, #4
 8001028:	2b00      	cmp	r3, #0
 800102a:	d004      	beq.n	8001036 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800102c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800102e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001032:	627b      	str	r3, [r7, #36]	; 0x24
 8001034:	e00c      	b.n	8001050 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001036:	69bb      	ldr	r3, [r7, #24]
 8001038:	f003 0308 	and.w	r3, r3, #8
 800103c:	2b00      	cmp	r3, #0
 800103e:	d004      	beq.n	800104a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001042:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001046:	627b      	str	r3, [r7, #36]	; 0x24
 8001048:	e002      	b.n	8001050 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f000 f986 	bl	800135c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001050:	69bb      	ldr	r3, [r7, #24]
 8001052:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001056:	2b00      	cmp	r3, #0
 8001058:	d024      	beq.n	80010a4 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001062:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001064:	69bb      	ldr	r3, [r7, #24]
 8001066:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800106a:	2b00      	cmp	r3, #0
 800106c:	d003      	beq.n	8001076 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800106e:	6878      	ldr	r0, [r7, #4]
 8001070:	f000 f962 	bl	8001338 <HAL_CAN_TxMailbox1CompleteCallback>
 8001074:	e016      	b.n	80010a4 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001076:	69bb      	ldr	r3, [r7, #24]
 8001078:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800107c:	2b00      	cmp	r3, #0
 800107e:	d004      	beq.n	800108a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001082:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001086:	627b      	str	r3, [r7, #36]	; 0x24
 8001088:	e00c      	b.n	80010a4 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800108a:	69bb      	ldr	r3, [r7, #24]
 800108c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001090:	2b00      	cmp	r3, #0
 8001092:	d004      	beq.n	800109e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001096:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800109a:	627b      	str	r3, [r7, #36]	; 0x24
 800109c:	e002      	b.n	80010a4 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f000 f965 	bl	800136e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80010a4:	69bb      	ldr	r3, [r7, #24]
 80010a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d024      	beq.n	80010f8 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80010b6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80010b8:	69bb      	ldr	r3, [r7, #24]
 80010ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d003      	beq.n	80010ca <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f000 f941 	bl	800134a <HAL_CAN_TxMailbox2CompleteCallback>
 80010c8:	e016      	b.n	80010f8 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80010ca:	69bb      	ldr	r3, [r7, #24]
 80010cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d004      	beq.n	80010de <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80010d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010da:	627b      	str	r3, [r7, #36]	; 0x24
 80010dc:	e00c      	b.n	80010f8 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80010de:	69bb      	ldr	r3, [r7, #24]
 80010e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d004      	beq.n	80010f2 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80010e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010ee:	627b      	str	r3, [r7, #36]	; 0x24
 80010f0:	e002      	b.n	80010f8 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f000 f944 	bl	8001380 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80010f8:	6a3b      	ldr	r3, [r7, #32]
 80010fa:	f003 0308 	and.w	r3, r3, #8
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d00c      	beq.n	800111c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	f003 0310 	and.w	r3, r3, #16
 8001108:	2b00      	cmp	r3, #0
 800110a:	d007      	beq.n	800111c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800110c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800110e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001112:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	2210      	movs	r2, #16
 800111a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800111c:	6a3b      	ldr	r3, [r7, #32]
 800111e:	f003 0304 	and.w	r3, r3, #4
 8001122:	2b00      	cmp	r3, #0
 8001124:	d00b      	beq.n	800113e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	f003 0308 	and.w	r3, r3, #8
 800112c:	2b00      	cmp	r3, #0
 800112e:	d006      	beq.n	800113e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	2208      	movs	r2, #8
 8001136:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	f000 f92a 	bl	8001392 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800113e:	6a3b      	ldr	r3, [r7, #32]
 8001140:	f003 0302 	and.w	r3, r3, #2
 8001144:	2b00      	cmp	r3, #0
 8001146:	d009      	beq.n	800115c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	68db      	ldr	r3, [r3, #12]
 800114e:	f003 0303 	and.w	r3, r3, #3
 8001152:	2b00      	cmp	r3, #0
 8001154:	d002      	beq.n	800115c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f7ff f80c 	bl	8000174 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800115c:	6a3b      	ldr	r3, [r7, #32]
 800115e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001162:	2b00      	cmp	r3, #0
 8001164:	d00c      	beq.n	8001180 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	f003 0310 	and.w	r3, r3, #16
 800116c:	2b00      	cmp	r3, #0
 800116e:	d007      	beq.n	8001180 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001172:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001176:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	2210      	movs	r2, #16
 800117e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001180:	6a3b      	ldr	r3, [r7, #32]
 8001182:	f003 0320 	and.w	r3, r3, #32
 8001186:	2b00      	cmp	r3, #0
 8001188:	d00b      	beq.n	80011a2 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	f003 0308 	and.w	r3, r3, #8
 8001190:	2b00      	cmp	r3, #0
 8001192:	d006      	beq.n	80011a2 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	2208      	movs	r2, #8
 800119a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800119c:	6878      	ldr	r0, [r7, #4]
 800119e:	f000 f90a 	bl	80013b6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80011a2:	6a3b      	ldr	r3, [r7, #32]
 80011a4:	f003 0310 	and.w	r3, r3, #16
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d009      	beq.n	80011c0 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	691b      	ldr	r3, [r3, #16]
 80011b2:	f003 0303 	and.w	r3, r3, #3
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d002      	beq.n	80011c0 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80011ba:	6878      	ldr	r0, [r7, #4]
 80011bc:	f000 f8f2 	bl	80013a4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80011c0:	6a3b      	ldr	r3, [r7, #32]
 80011c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d00b      	beq.n	80011e2 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	f003 0310 	and.w	r3, r3, #16
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d006      	beq.n	80011e2 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2210      	movs	r2, #16
 80011da:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80011dc:	6878      	ldr	r0, [r7, #4]
 80011de:	f000 f8f3 	bl	80013c8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80011e2:	6a3b      	ldr	r3, [r7, #32]
 80011e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d00b      	beq.n	8001204 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	f003 0308 	and.w	r3, r3, #8
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d006      	beq.n	8001204 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	2208      	movs	r2, #8
 80011fc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f000 f8eb 	bl	80013da <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001204:	6a3b      	ldr	r3, [r7, #32]
 8001206:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800120a:	2b00      	cmp	r3, #0
 800120c:	d07b      	beq.n	8001306 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	f003 0304 	and.w	r3, r3, #4
 8001214:	2b00      	cmp	r3, #0
 8001216:	d072      	beq.n	80012fe <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001218:	6a3b      	ldr	r3, [r7, #32]
 800121a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800121e:	2b00      	cmp	r3, #0
 8001220:	d008      	beq.n	8001234 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001228:	2b00      	cmp	r3, #0
 800122a:	d003      	beq.n	8001234 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800122c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800122e:	f043 0301 	orr.w	r3, r3, #1
 8001232:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001234:	6a3b      	ldr	r3, [r7, #32]
 8001236:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800123a:	2b00      	cmp	r3, #0
 800123c:	d008      	beq.n	8001250 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001244:	2b00      	cmp	r3, #0
 8001246:	d003      	beq.n	8001250 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800124a:	f043 0302 	orr.w	r3, r3, #2
 800124e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001250:	6a3b      	ldr	r3, [r7, #32]
 8001252:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001256:	2b00      	cmp	r3, #0
 8001258:	d008      	beq.n	800126c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001260:	2b00      	cmp	r3, #0
 8001262:	d003      	beq.n	800126c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001266:	f043 0304 	orr.w	r3, r3, #4
 800126a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800126c:	6a3b      	ldr	r3, [r7, #32]
 800126e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001272:	2b00      	cmp	r3, #0
 8001274:	d043      	beq.n	80012fe <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800127c:	2b00      	cmp	r3, #0
 800127e:	d03e      	beq.n	80012fe <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001286:	2b60      	cmp	r3, #96	; 0x60
 8001288:	d02b      	beq.n	80012e2 <HAL_CAN_IRQHandler+0x32a>
 800128a:	2b60      	cmp	r3, #96	; 0x60
 800128c:	d82e      	bhi.n	80012ec <HAL_CAN_IRQHandler+0x334>
 800128e:	2b50      	cmp	r3, #80	; 0x50
 8001290:	d022      	beq.n	80012d8 <HAL_CAN_IRQHandler+0x320>
 8001292:	2b50      	cmp	r3, #80	; 0x50
 8001294:	d82a      	bhi.n	80012ec <HAL_CAN_IRQHandler+0x334>
 8001296:	2b40      	cmp	r3, #64	; 0x40
 8001298:	d019      	beq.n	80012ce <HAL_CAN_IRQHandler+0x316>
 800129a:	2b40      	cmp	r3, #64	; 0x40
 800129c:	d826      	bhi.n	80012ec <HAL_CAN_IRQHandler+0x334>
 800129e:	2b30      	cmp	r3, #48	; 0x30
 80012a0:	d010      	beq.n	80012c4 <HAL_CAN_IRQHandler+0x30c>
 80012a2:	2b30      	cmp	r3, #48	; 0x30
 80012a4:	d822      	bhi.n	80012ec <HAL_CAN_IRQHandler+0x334>
 80012a6:	2b10      	cmp	r3, #16
 80012a8:	d002      	beq.n	80012b0 <HAL_CAN_IRQHandler+0x2f8>
 80012aa:	2b20      	cmp	r3, #32
 80012ac:	d005      	beq.n	80012ba <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80012ae:	e01d      	b.n	80012ec <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80012b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b2:	f043 0308 	orr.w	r3, r3, #8
 80012b6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80012b8:	e019      	b.n	80012ee <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80012ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012bc:	f043 0310 	orr.w	r3, r3, #16
 80012c0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80012c2:	e014      	b.n	80012ee <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80012c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c6:	f043 0320 	orr.w	r3, r3, #32
 80012ca:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80012cc:	e00f      	b.n	80012ee <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80012ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012d4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80012d6:	e00a      	b.n	80012ee <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80012d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012de:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80012e0:	e005      	b.n	80012ee <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80012e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012e8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80012ea:	e000      	b.n	80012ee <HAL_CAN_IRQHandler+0x336>
            break;
 80012ec:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	699a      	ldr	r2, [r3, #24]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80012fc:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	2204      	movs	r2, #4
 8001304:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001308:	2b00      	cmp	r3, #0
 800130a:	d008      	beq.n	800131e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001312:	431a      	orrs	r2, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001318:	6878      	ldr	r0, [r7, #4]
 800131a:	f7fe ff7f 	bl	800021c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800131e:	bf00      	nop
 8001320:	3728      	adds	r7, #40	; 0x28
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}

08001326 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001326:	b480      	push	{r7}
 8001328:	b083      	sub	sp, #12
 800132a:	af00      	add	r7, sp, #0
 800132c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800132e:	bf00      	nop
 8001330:	370c      	adds	r7, #12
 8001332:	46bd      	mov	sp, r7
 8001334:	bc80      	pop	{r7}
 8001336:	4770      	bx	lr

08001338 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001340:	bf00      	nop
 8001342:	370c      	adds	r7, #12
 8001344:	46bd      	mov	sp, r7
 8001346:	bc80      	pop	{r7}
 8001348:	4770      	bx	lr

0800134a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800134a:	b480      	push	{r7}
 800134c:	b083      	sub	sp, #12
 800134e:	af00      	add	r7, sp, #0
 8001350:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001352:	bf00      	nop
 8001354:	370c      	adds	r7, #12
 8001356:	46bd      	mov	sp, r7
 8001358:	bc80      	pop	{r7}
 800135a:	4770      	bx	lr

0800135c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001364:	bf00      	nop
 8001366:	370c      	adds	r7, #12
 8001368:	46bd      	mov	sp, r7
 800136a:	bc80      	pop	{r7}
 800136c:	4770      	bx	lr

0800136e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800136e:	b480      	push	{r7}
 8001370:	b083      	sub	sp, #12
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001376:	bf00      	nop
 8001378:	370c      	adds	r7, #12
 800137a:	46bd      	mov	sp, r7
 800137c:	bc80      	pop	{r7}
 800137e:	4770      	bx	lr

08001380 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001388:	bf00      	nop
 800138a:	370c      	adds	r7, #12
 800138c:	46bd      	mov	sp, r7
 800138e:	bc80      	pop	{r7}
 8001390:	4770      	bx	lr

08001392 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001392:	b480      	push	{r7}
 8001394:	b083      	sub	sp, #12
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800139a:	bf00      	nop
 800139c:	370c      	adds	r7, #12
 800139e:	46bd      	mov	sp, r7
 80013a0:	bc80      	pop	{r7}
 80013a2:	4770      	bx	lr

080013a4 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80013ac:	bf00      	nop
 80013ae:	370c      	adds	r7, #12
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bc80      	pop	{r7}
 80013b4:	4770      	bx	lr

080013b6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80013b6:	b480      	push	{r7}
 80013b8:	b083      	sub	sp, #12
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80013be:	bf00      	nop
 80013c0:	370c      	adds	r7, #12
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bc80      	pop	{r7}
 80013c6:	4770      	bx	lr

080013c8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80013d0:	bf00      	nop
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bc80      	pop	{r7}
 80013d8:	4770      	bx	lr

080013da <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80013da:	b480      	push	{r7}
 80013dc:	b083      	sub	sp, #12
 80013de:	af00      	add	r7, sp, #0
 80013e0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80013e2:	bf00      	nop
 80013e4:	370c      	adds	r7, #12
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bc80      	pop	{r7}
 80013ea:	4770      	bx	lr

080013ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b085      	sub	sp, #20
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f003 0307 	and.w	r3, r3, #7
 80013fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013fc:	4b0c      	ldr	r3, [pc, #48]	; (8001430 <__NVIC_SetPriorityGrouping+0x44>)
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001402:	68ba      	ldr	r2, [r7, #8]
 8001404:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001408:	4013      	ands	r3, r2
 800140a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001414:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001418:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800141c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800141e:	4a04      	ldr	r2, [pc, #16]	; (8001430 <__NVIC_SetPriorityGrouping+0x44>)
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	60d3      	str	r3, [r2, #12]
}
 8001424:	bf00      	nop
 8001426:	3714      	adds	r7, #20
 8001428:	46bd      	mov	sp, r7
 800142a:	bc80      	pop	{r7}
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	e000ed00 	.word	0xe000ed00

08001434 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001438:	4b04      	ldr	r3, [pc, #16]	; (800144c <__NVIC_GetPriorityGrouping+0x18>)
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	0a1b      	lsrs	r3, r3, #8
 800143e:	f003 0307 	and.w	r3, r3, #7
}
 8001442:	4618      	mov	r0, r3
 8001444:	46bd      	mov	sp, r7
 8001446:	bc80      	pop	{r7}
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	e000ed00 	.word	0xe000ed00

08001450 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	4603      	mov	r3, r0
 8001458:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800145a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800145e:	2b00      	cmp	r3, #0
 8001460:	db0b      	blt.n	800147a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001462:	79fb      	ldrb	r3, [r7, #7]
 8001464:	f003 021f 	and.w	r2, r3, #31
 8001468:	4906      	ldr	r1, [pc, #24]	; (8001484 <__NVIC_EnableIRQ+0x34>)
 800146a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146e:	095b      	lsrs	r3, r3, #5
 8001470:	2001      	movs	r0, #1
 8001472:	fa00 f202 	lsl.w	r2, r0, r2
 8001476:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800147a:	bf00      	nop
 800147c:	370c      	adds	r7, #12
 800147e:	46bd      	mov	sp, r7
 8001480:	bc80      	pop	{r7}
 8001482:	4770      	bx	lr
 8001484:	e000e100 	.word	0xe000e100

08001488 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	4603      	mov	r3, r0
 8001490:	6039      	str	r1, [r7, #0]
 8001492:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001494:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001498:	2b00      	cmp	r3, #0
 800149a:	db0a      	blt.n	80014b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	b2da      	uxtb	r2, r3
 80014a0:	490c      	ldr	r1, [pc, #48]	; (80014d4 <__NVIC_SetPriority+0x4c>)
 80014a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a6:	0112      	lsls	r2, r2, #4
 80014a8:	b2d2      	uxtb	r2, r2
 80014aa:	440b      	add	r3, r1
 80014ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014b0:	e00a      	b.n	80014c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	b2da      	uxtb	r2, r3
 80014b6:	4908      	ldr	r1, [pc, #32]	; (80014d8 <__NVIC_SetPriority+0x50>)
 80014b8:	79fb      	ldrb	r3, [r7, #7]
 80014ba:	f003 030f 	and.w	r3, r3, #15
 80014be:	3b04      	subs	r3, #4
 80014c0:	0112      	lsls	r2, r2, #4
 80014c2:	b2d2      	uxtb	r2, r2
 80014c4:	440b      	add	r3, r1
 80014c6:	761a      	strb	r2, [r3, #24]
}
 80014c8:	bf00      	nop
 80014ca:	370c      	adds	r7, #12
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bc80      	pop	{r7}
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	e000e100 	.word	0xe000e100
 80014d8:	e000ed00 	.word	0xe000ed00

080014dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014dc:	b480      	push	{r7}
 80014de:	b089      	sub	sp, #36	; 0x24
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	60f8      	str	r0, [r7, #12]
 80014e4:	60b9      	str	r1, [r7, #8]
 80014e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	f003 0307 	and.w	r3, r3, #7
 80014ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	f1c3 0307 	rsb	r3, r3, #7
 80014f6:	2b04      	cmp	r3, #4
 80014f8:	bf28      	it	cs
 80014fa:	2304      	movcs	r3, #4
 80014fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	3304      	adds	r3, #4
 8001502:	2b06      	cmp	r3, #6
 8001504:	d902      	bls.n	800150c <NVIC_EncodePriority+0x30>
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	3b03      	subs	r3, #3
 800150a:	e000      	b.n	800150e <NVIC_EncodePriority+0x32>
 800150c:	2300      	movs	r3, #0
 800150e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001510:	f04f 32ff 	mov.w	r2, #4294967295
 8001514:	69bb      	ldr	r3, [r7, #24]
 8001516:	fa02 f303 	lsl.w	r3, r2, r3
 800151a:	43da      	mvns	r2, r3
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	401a      	ands	r2, r3
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001524:	f04f 31ff 	mov.w	r1, #4294967295
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	fa01 f303 	lsl.w	r3, r1, r3
 800152e:	43d9      	mvns	r1, r3
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001534:	4313      	orrs	r3, r2
         );
}
 8001536:	4618      	mov	r0, r3
 8001538:	3724      	adds	r7, #36	; 0x24
 800153a:	46bd      	mov	sp, r7
 800153c:	bc80      	pop	{r7}
 800153e:	4770      	bx	lr

08001540 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	3b01      	subs	r3, #1
 800154c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001550:	d301      	bcc.n	8001556 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001552:	2301      	movs	r3, #1
 8001554:	e00f      	b.n	8001576 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001556:	4a0a      	ldr	r2, [pc, #40]	; (8001580 <SysTick_Config+0x40>)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	3b01      	subs	r3, #1
 800155c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800155e:	210f      	movs	r1, #15
 8001560:	f04f 30ff 	mov.w	r0, #4294967295
 8001564:	f7ff ff90 	bl	8001488 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001568:	4b05      	ldr	r3, [pc, #20]	; (8001580 <SysTick_Config+0x40>)
 800156a:	2200      	movs	r2, #0
 800156c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800156e:	4b04      	ldr	r3, [pc, #16]	; (8001580 <SysTick_Config+0x40>)
 8001570:	2207      	movs	r2, #7
 8001572:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001574:	2300      	movs	r3, #0
}
 8001576:	4618      	mov	r0, r3
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	e000e010 	.word	0xe000e010

08001584 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	f7ff ff2d 	bl	80013ec <__NVIC_SetPriorityGrouping>
}
 8001592:	bf00      	nop
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}

0800159a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800159a:	b580      	push	{r7, lr}
 800159c:	b086      	sub	sp, #24
 800159e:	af00      	add	r7, sp, #0
 80015a0:	4603      	mov	r3, r0
 80015a2:	60b9      	str	r1, [r7, #8]
 80015a4:	607a      	str	r2, [r7, #4]
 80015a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015a8:	2300      	movs	r3, #0
 80015aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015ac:	f7ff ff42 	bl	8001434 <__NVIC_GetPriorityGrouping>
 80015b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	68b9      	ldr	r1, [r7, #8]
 80015b6:	6978      	ldr	r0, [r7, #20]
 80015b8:	f7ff ff90 	bl	80014dc <NVIC_EncodePriority>
 80015bc:	4602      	mov	r2, r0
 80015be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015c2:	4611      	mov	r1, r2
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7ff ff5f 	bl	8001488 <__NVIC_SetPriority>
}
 80015ca:	bf00      	nop
 80015cc:	3718      	adds	r7, #24
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b082      	sub	sp, #8
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	4603      	mov	r3, r0
 80015da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7ff ff35 	bl	8001450 <__NVIC_EnableIRQ>
}
 80015e6:	bf00      	nop
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}

080015ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015ee:	b580      	push	{r7, lr}
 80015f0:	b082      	sub	sp, #8
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f7ff ffa2 	bl	8001540 <SysTick_Config>
 80015fc:	4603      	mov	r3, r0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
	...

08001608 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001608:	b480      	push	{r7}
 800160a:	b08b      	sub	sp, #44	; 0x2c
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001612:	2300      	movs	r3, #0
 8001614:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001616:	2300      	movs	r3, #0
 8001618:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800161a:	e169      	b.n	80018f0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800161c:	2201      	movs	r2, #1
 800161e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001620:	fa02 f303 	lsl.w	r3, r2, r3
 8001624:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	69fa      	ldr	r2, [r7, #28]
 800162c:	4013      	ands	r3, r2
 800162e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001630:	69ba      	ldr	r2, [r7, #24]
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	429a      	cmp	r2, r3
 8001636:	f040 8158 	bne.w	80018ea <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	4a9a      	ldr	r2, [pc, #616]	; (80018a8 <HAL_GPIO_Init+0x2a0>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d05e      	beq.n	8001702 <HAL_GPIO_Init+0xfa>
 8001644:	4a98      	ldr	r2, [pc, #608]	; (80018a8 <HAL_GPIO_Init+0x2a0>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d875      	bhi.n	8001736 <HAL_GPIO_Init+0x12e>
 800164a:	4a98      	ldr	r2, [pc, #608]	; (80018ac <HAL_GPIO_Init+0x2a4>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d058      	beq.n	8001702 <HAL_GPIO_Init+0xfa>
 8001650:	4a96      	ldr	r2, [pc, #600]	; (80018ac <HAL_GPIO_Init+0x2a4>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d86f      	bhi.n	8001736 <HAL_GPIO_Init+0x12e>
 8001656:	4a96      	ldr	r2, [pc, #600]	; (80018b0 <HAL_GPIO_Init+0x2a8>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d052      	beq.n	8001702 <HAL_GPIO_Init+0xfa>
 800165c:	4a94      	ldr	r2, [pc, #592]	; (80018b0 <HAL_GPIO_Init+0x2a8>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d869      	bhi.n	8001736 <HAL_GPIO_Init+0x12e>
 8001662:	4a94      	ldr	r2, [pc, #592]	; (80018b4 <HAL_GPIO_Init+0x2ac>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d04c      	beq.n	8001702 <HAL_GPIO_Init+0xfa>
 8001668:	4a92      	ldr	r2, [pc, #584]	; (80018b4 <HAL_GPIO_Init+0x2ac>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d863      	bhi.n	8001736 <HAL_GPIO_Init+0x12e>
 800166e:	4a92      	ldr	r2, [pc, #584]	; (80018b8 <HAL_GPIO_Init+0x2b0>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d046      	beq.n	8001702 <HAL_GPIO_Init+0xfa>
 8001674:	4a90      	ldr	r2, [pc, #576]	; (80018b8 <HAL_GPIO_Init+0x2b0>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d85d      	bhi.n	8001736 <HAL_GPIO_Init+0x12e>
 800167a:	2b12      	cmp	r3, #18
 800167c:	d82a      	bhi.n	80016d4 <HAL_GPIO_Init+0xcc>
 800167e:	2b12      	cmp	r3, #18
 8001680:	d859      	bhi.n	8001736 <HAL_GPIO_Init+0x12e>
 8001682:	a201      	add	r2, pc, #4	; (adr r2, 8001688 <HAL_GPIO_Init+0x80>)
 8001684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001688:	08001703 	.word	0x08001703
 800168c:	080016dd 	.word	0x080016dd
 8001690:	080016ef 	.word	0x080016ef
 8001694:	08001731 	.word	0x08001731
 8001698:	08001737 	.word	0x08001737
 800169c:	08001737 	.word	0x08001737
 80016a0:	08001737 	.word	0x08001737
 80016a4:	08001737 	.word	0x08001737
 80016a8:	08001737 	.word	0x08001737
 80016ac:	08001737 	.word	0x08001737
 80016b0:	08001737 	.word	0x08001737
 80016b4:	08001737 	.word	0x08001737
 80016b8:	08001737 	.word	0x08001737
 80016bc:	08001737 	.word	0x08001737
 80016c0:	08001737 	.word	0x08001737
 80016c4:	08001737 	.word	0x08001737
 80016c8:	08001737 	.word	0x08001737
 80016cc:	080016e5 	.word	0x080016e5
 80016d0:	080016f9 	.word	0x080016f9
 80016d4:	4a79      	ldr	r2, [pc, #484]	; (80018bc <HAL_GPIO_Init+0x2b4>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d013      	beq.n	8001702 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80016da:	e02c      	b.n	8001736 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	623b      	str	r3, [r7, #32]
          break;
 80016e2:	e029      	b.n	8001738 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	3304      	adds	r3, #4
 80016ea:	623b      	str	r3, [r7, #32]
          break;
 80016ec:	e024      	b.n	8001738 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	68db      	ldr	r3, [r3, #12]
 80016f2:	3308      	adds	r3, #8
 80016f4:	623b      	str	r3, [r7, #32]
          break;
 80016f6:	e01f      	b.n	8001738 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	330c      	adds	r3, #12
 80016fe:	623b      	str	r3, [r7, #32]
          break;
 8001700:	e01a      	b.n	8001738 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d102      	bne.n	8001710 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800170a:	2304      	movs	r3, #4
 800170c:	623b      	str	r3, [r7, #32]
          break;
 800170e:	e013      	b.n	8001738 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	2b01      	cmp	r3, #1
 8001716:	d105      	bne.n	8001724 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001718:	2308      	movs	r3, #8
 800171a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	69fa      	ldr	r2, [r7, #28]
 8001720:	611a      	str	r2, [r3, #16]
          break;
 8001722:	e009      	b.n	8001738 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001724:	2308      	movs	r3, #8
 8001726:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	69fa      	ldr	r2, [r7, #28]
 800172c:	615a      	str	r2, [r3, #20]
          break;
 800172e:	e003      	b.n	8001738 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001730:	2300      	movs	r3, #0
 8001732:	623b      	str	r3, [r7, #32]
          break;
 8001734:	e000      	b.n	8001738 <HAL_GPIO_Init+0x130>
          break;
 8001736:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001738:	69bb      	ldr	r3, [r7, #24]
 800173a:	2bff      	cmp	r3, #255	; 0xff
 800173c:	d801      	bhi.n	8001742 <HAL_GPIO_Init+0x13a>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	e001      	b.n	8001746 <HAL_GPIO_Init+0x13e>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	3304      	adds	r3, #4
 8001746:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001748:	69bb      	ldr	r3, [r7, #24]
 800174a:	2bff      	cmp	r3, #255	; 0xff
 800174c:	d802      	bhi.n	8001754 <HAL_GPIO_Init+0x14c>
 800174e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	e002      	b.n	800175a <HAL_GPIO_Init+0x152>
 8001754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001756:	3b08      	subs	r3, #8
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	210f      	movs	r1, #15
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	fa01 f303 	lsl.w	r3, r1, r3
 8001768:	43db      	mvns	r3, r3
 800176a:	401a      	ands	r2, r3
 800176c:	6a39      	ldr	r1, [r7, #32]
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	fa01 f303 	lsl.w	r3, r1, r3
 8001774:	431a      	orrs	r2, r3
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001782:	2b00      	cmp	r3, #0
 8001784:	f000 80b1 	beq.w	80018ea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001788:	4b4d      	ldr	r3, [pc, #308]	; (80018c0 <HAL_GPIO_Init+0x2b8>)
 800178a:	699b      	ldr	r3, [r3, #24]
 800178c:	4a4c      	ldr	r2, [pc, #304]	; (80018c0 <HAL_GPIO_Init+0x2b8>)
 800178e:	f043 0301 	orr.w	r3, r3, #1
 8001792:	6193      	str	r3, [r2, #24]
 8001794:	4b4a      	ldr	r3, [pc, #296]	; (80018c0 <HAL_GPIO_Init+0x2b8>)
 8001796:	699b      	ldr	r3, [r3, #24]
 8001798:	f003 0301 	and.w	r3, r3, #1
 800179c:	60bb      	str	r3, [r7, #8]
 800179e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80017a0:	4a48      	ldr	r2, [pc, #288]	; (80018c4 <HAL_GPIO_Init+0x2bc>)
 80017a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a4:	089b      	lsrs	r3, r3, #2
 80017a6:	3302      	adds	r3, #2
 80017a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017ac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80017ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b0:	f003 0303 	and.w	r3, r3, #3
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	220f      	movs	r2, #15
 80017b8:	fa02 f303 	lsl.w	r3, r2, r3
 80017bc:	43db      	mvns	r3, r3
 80017be:	68fa      	ldr	r2, [r7, #12]
 80017c0:	4013      	ands	r3, r2
 80017c2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	4a40      	ldr	r2, [pc, #256]	; (80018c8 <HAL_GPIO_Init+0x2c0>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d013      	beq.n	80017f4 <HAL_GPIO_Init+0x1ec>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	4a3f      	ldr	r2, [pc, #252]	; (80018cc <HAL_GPIO_Init+0x2c4>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d00d      	beq.n	80017f0 <HAL_GPIO_Init+0x1e8>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	4a3e      	ldr	r2, [pc, #248]	; (80018d0 <HAL_GPIO_Init+0x2c8>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d007      	beq.n	80017ec <HAL_GPIO_Init+0x1e4>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	4a3d      	ldr	r2, [pc, #244]	; (80018d4 <HAL_GPIO_Init+0x2cc>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d101      	bne.n	80017e8 <HAL_GPIO_Init+0x1e0>
 80017e4:	2303      	movs	r3, #3
 80017e6:	e006      	b.n	80017f6 <HAL_GPIO_Init+0x1ee>
 80017e8:	2304      	movs	r3, #4
 80017ea:	e004      	b.n	80017f6 <HAL_GPIO_Init+0x1ee>
 80017ec:	2302      	movs	r3, #2
 80017ee:	e002      	b.n	80017f6 <HAL_GPIO_Init+0x1ee>
 80017f0:	2301      	movs	r3, #1
 80017f2:	e000      	b.n	80017f6 <HAL_GPIO_Init+0x1ee>
 80017f4:	2300      	movs	r3, #0
 80017f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017f8:	f002 0203 	and.w	r2, r2, #3
 80017fc:	0092      	lsls	r2, r2, #2
 80017fe:	4093      	lsls	r3, r2
 8001800:	68fa      	ldr	r2, [r7, #12]
 8001802:	4313      	orrs	r3, r2
 8001804:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001806:	492f      	ldr	r1, [pc, #188]	; (80018c4 <HAL_GPIO_Init+0x2bc>)
 8001808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180a:	089b      	lsrs	r3, r3, #2
 800180c:	3302      	adds	r3, #2
 800180e:	68fa      	ldr	r2, [r7, #12]
 8001810:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800181c:	2b00      	cmp	r3, #0
 800181e:	d006      	beq.n	800182e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001820:	4b2d      	ldr	r3, [pc, #180]	; (80018d8 <HAL_GPIO_Init+0x2d0>)
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	492c      	ldr	r1, [pc, #176]	; (80018d8 <HAL_GPIO_Init+0x2d0>)
 8001826:	69bb      	ldr	r3, [r7, #24]
 8001828:	4313      	orrs	r3, r2
 800182a:	600b      	str	r3, [r1, #0]
 800182c:	e006      	b.n	800183c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800182e:	4b2a      	ldr	r3, [pc, #168]	; (80018d8 <HAL_GPIO_Init+0x2d0>)
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	69bb      	ldr	r3, [r7, #24]
 8001834:	43db      	mvns	r3, r3
 8001836:	4928      	ldr	r1, [pc, #160]	; (80018d8 <HAL_GPIO_Init+0x2d0>)
 8001838:	4013      	ands	r3, r2
 800183a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001844:	2b00      	cmp	r3, #0
 8001846:	d006      	beq.n	8001856 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001848:	4b23      	ldr	r3, [pc, #140]	; (80018d8 <HAL_GPIO_Init+0x2d0>)
 800184a:	685a      	ldr	r2, [r3, #4]
 800184c:	4922      	ldr	r1, [pc, #136]	; (80018d8 <HAL_GPIO_Init+0x2d0>)
 800184e:	69bb      	ldr	r3, [r7, #24]
 8001850:	4313      	orrs	r3, r2
 8001852:	604b      	str	r3, [r1, #4]
 8001854:	e006      	b.n	8001864 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001856:	4b20      	ldr	r3, [pc, #128]	; (80018d8 <HAL_GPIO_Init+0x2d0>)
 8001858:	685a      	ldr	r2, [r3, #4]
 800185a:	69bb      	ldr	r3, [r7, #24]
 800185c:	43db      	mvns	r3, r3
 800185e:	491e      	ldr	r1, [pc, #120]	; (80018d8 <HAL_GPIO_Init+0x2d0>)
 8001860:	4013      	ands	r3, r2
 8001862:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800186c:	2b00      	cmp	r3, #0
 800186e:	d006      	beq.n	800187e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001870:	4b19      	ldr	r3, [pc, #100]	; (80018d8 <HAL_GPIO_Init+0x2d0>)
 8001872:	689a      	ldr	r2, [r3, #8]
 8001874:	4918      	ldr	r1, [pc, #96]	; (80018d8 <HAL_GPIO_Init+0x2d0>)
 8001876:	69bb      	ldr	r3, [r7, #24]
 8001878:	4313      	orrs	r3, r2
 800187a:	608b      	str	r3, [r1, #8]
 800187c:	e006      	b.n	800188c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800187e:	4b16      	ldr	r3, [pc, #88]	; (80018d8 <HAL_GPIO_Init+0x2d0>)
 8001880:	689a      	ldr	r2, [r3, #8]
 8001882:	69bb      	ldr	r3, [r7, #24]
 8001884:	43db      	mvns	r3, r3
 8001886:	4914      	ldr	r1, [pc, #80]	; (80018d8 <HAL_GPIO_Init+0x2d0>)
 8001888:	4013      	ands	r3, r2
 800188a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001894:	2b00      	cmp	r3, #0
 8001896:	d021      	beq.n	80018dc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001898:	4b0f      	ldr	r3, [pc, #60]	; (80018d8 <HAL_GPIO_Init+0x2d0>)
 800189a:	68da      	ldr	r2, [r3, #12]
 800189c:	490e      	ldr	r1, [pc, #56]	; (80018d8 <HAL_GPIO_Init+0x2d0>)
 800189e:	69bb      	ldr	r3, [r7, #24]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	60cb      	str	r3, [r1, #12]
 80018a4:	e021      	b.n	80018ea <HAL_GPIO_Init+0x2e2>
 80018a6:	bf00      	nop
 80018a8:	10320000 	.word	0x10320000
 80018ac:	10310000 	.word	0x10310000
 80018b0:	10220000 	.word	0x10220000
 80018b4:	10210000 	.word	0x10210000
 80018b8:	10120000 	.word	0x10120000
 80018bc:	10110000 	.word	0x10110000
 80018c0:	40021000 	.word	0x40021000
 80018c4:	40010000 	.word	0x40010000
 80018c8:	40010800 	.word	0x40010800
 80018cc:	40010c00 	.word	0x40010c00
 80018d0:	40011000 	.word	0x40011000
 80018d4:	40011400 	.word	0x40011400
 80018d8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80018dc:	4b0b      	ldr	r3, [pc, #44]	; (800190c <HAL_GPIO_Init+0x304>)
 80018de:	68da      	ldr	r2, [r3, #12]
 80018e0:	69bb      	ldr	r3, [r7, #24]
 80018e2:	43db      	mvns	r3, r3
 80018e4:	4909      	ldr	r1, [pc, #36]	; (800190c <HAL_GPIO_Init+0x304>)
 80018e6:	4013      	ands	r3, r2
 80018e8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80018ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ec:	3301      	adds	r3, #1
 80018ee:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f6:	fa22 f303 	lsr.w	r3, r2, r3
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	f47f ae8e 	bne.w	800161c <HAL_GPIO_Init+0x14>
  }
}
 8001900:	bf00      	nop
 8001902:	bf00      	nop
 8001904:	372c      	adds	r7, #44	; 0x2c
 8001906:	46bd      	mov	sp, r7
 8001908:	bc80      	pop	{r7}
 800190a:	4770      	bx	lr
 800190c:	40010400 	.word	0x40010400

08001910 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b086      	sub	sp, #24
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d101      	bne.n	8001922 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e272      	b.n	8001e08 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 0301 	and.w	r3, r3, #1
 800192a:	2b00      	cmp	r3, #0
 800192c:	f000 8087 	beq.w	8001a3e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001930:	4b92      	ldr	r3, [pc, #584]	; (8001b7c <HAL_RCC_OscConfig+0x26c>)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f003 030c 	and.w	r3, r3, #12
 8001938:	2b04      	cmp	r3, #4
 800193a:	d00c      	beq.n	8001956 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800193c:	4b8f      	ldr	r3, [pc, #572]	; (8001b7c <HAL_RCC_OscConfig+0x26c>)
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f003 030c 	and.w	r3, r3, #12
 8001944:	2b08      	cmp	r3, #8
 8001946:	d112      	bne.n	800196e <HAL_RCC_OscConfig+0x5e>
 8001948:	4b8c      	ldr	r3, [pc, #560]	; (8001b7c <HAL_RCC_OscConfig+0x26c>)
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001950:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001954:	d10b      	bne.n	800196e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001956:	4b89      	ldr	r3, [pc, #548]	; (8001b7c <HAL_RCC_OscConfig+0x26c>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d06c      	beq.n	8001a3c <HAL_RCC_OscConfig+0x12c>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d168      	bne.n	8001a3c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e24c      	b.n	8001e08 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001976:	d106      	bne.n	8001986 <HAL_RCC_OscConfig+0x76>
 8001978:	4b80      	ldr	r3, [pc, #512]	; (8001b7c <HAL_RCC_OscConfig+0x26c>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a7f      	ldr	r2, [pc, #508]	; (8001b7c <HAL_RCC_OscConfig+0x26c>)
 800197e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001982:	6013      	str	r3, [r2, #0]
 8001984:	e02e      	b.n	80019e4 <HAL_RCC_OscConfig+0xd4>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d10c      	bne.n	80019a8 <HAL_RCC_OscConfig+0x98>
 800198e:	4b7b      	ldr	r3, [pc, #492]	; (8001b7c <HAL_RCC_OscConfig+0x26c>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a7a      	ldr	r2, [pc, #488]	; (8001b7c <HAL_RCC_OscConfig+0x26c>)
 8001994:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001998:	6013      	str	r3, [r2, #0]
 800199a:	4b78      	ldr	r3, [pc, #480]	; (8001b7c <HAL_RCC_OscConfig+0x26c>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a77      	ldr	r2, [pc, #476]	; (8001b7c <HAL_RCC_OscConfig+0x26c>)
 80019a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019a4:	6013      	str	r3, [r2, #0]
 80019a6:	e01d      	b.n	80019e4 <HAL_RCC_OscConfig+0xd4>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019b0:	d10c      	bne.n	80019cc <HAL_RCC_OscConfig+0xbc>
 80019b2:	4b72      	ldr	r3, [pc, #456]	; (8001b7c <HAL_RCC_OscConfig+0x26c>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a71      	ldr	r2, [pc, #452]	; (8001b7c <HAL_RCC_OscConfig+0x26c>)
 80019b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019bc:	6013      	str	r3, [r2, #0]
 80019be:	4b6f      	ldr	r3, [pc, #444]	; (8001b7c <HAL_RCC_OscConfig+0x26c>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a6e      	ldr	r2, [pc, #440]	; (8001b7c <HAL_RCC_OscConfig+0x26c>)
 80019c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019c8:	6013      	str	r3, [r2, #0]
 80019ca:	e00b      	b.n	80019e4 <HAL_RCC_OscConfig+0xd4>
 80019cc:	4b6b      	ldr	r3, [pc, #428]	; (8001b7c <HAL_RCC_OscConfig+0x26c>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a6a      	ldr	r2, [pc, #424]	; (8001b7c <HAL_RCC_OscConfig+0x26c>)
 80019d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019d6:	6013      	str	r3, [r2, #0]
 80019d8:	4b68      	ldr	r3, [pc, #416]	; (8001b7c <HAL_RCC_OscConfig+0x26c>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a67      	ldr	r2, [pc, #412]	; (8001b7c <HAL_RCC_OscConfig+0x26c>)
 80019de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019e2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d013      	beq.n	8001a14 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ec:	f7fe ff9c 	bl	8000928 <HAL_GetTick>
 80019f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019f2:	e008      	b.n	8001a06 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019f4:	f7fe ff98 	bl	8000928 <HAL_GetTick>
 80019f8:	4602      	mov	r2, r0
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	2b64      	cmp	r3, #100	; 0x64
 8001a00:	d901      	bls.n	8001a06 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a02:	2303      	movs	r3, #3
 8001a04:	e200      	b.n	8001e08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a06:	4b5d      	ldr	r3, [pc, #372]	; (8001b7c <HAL_RCC_OscConfig+0x26c>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d0f0      	beq.n	80019f4 <HAL_RCC_OscConfig+0xe4>
 8001a12:	e014      	b.n	8001a3e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a14:	f7fe ff88 	bl	8000928 <HAL_GetTick>
 8001a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a1a:	e008      	b.n	8001a2e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a1c:	f7fe ff84 	bl	8000928 <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	2b64      	cmp	r3, #100	; 0x64
 8001a28:	d901      	bls.n	8001a2e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	e1ec      	b.n	8001e08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a2e:	4b53      	ldr	r3, [pc, #332]	; (8001b7c <HAL_RCC_OscConfig+0x26c>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d1f0      	bne.n	8001a1c <HAL_RCC_OscConfig+0x10c>
 8001a3a:	e000      	b.n	8001a3e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 0302 	and.w	r3, r3, #2
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d063      	beq.n	8001b12 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a4a:	4b4c      	ldr	r3, [pc, #304]	; (8001b7c <HAL_RCC_OscConfig+0x26c>)
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f003 030c 	and.w	r3, r3, #12
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d00b      	beq.n	8001a6e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001a56:	4b49      	ldr	r3, [pc, #292]	; (8001b7c <HAL_RCC_OscConfig+0x26c>)
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	f003 030c 	and.w	r3, r3, #12
 8001a5e:	2b08      	cmp	r3, #8
 8001a60:	d11c      	bne.n	8001a9c <HAL_RCC_OscConfig+0x18c>
 8001a62:	4b46      	ldr	r3, [pc, #280]	; (8001b7c <HAL_RCC_OscConfig+0x26c>)
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d116      	bne.n	8001a9c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a6e:	4b43      	ldr	r3, [pc, #268]	; (8001b7c <HAL_RCC_OscConfig+0x26c>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0302 	and.w	r3, r3, #2
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d005      	beq.n	8001a86 <HAL_RCC_OscConfig+0x176>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	691b      	ldr	r3, [r3, #16]
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d001      	beq.n	8001a86 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e1c0      	b.n	8001e08 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a86:	4b3d      	ldr	r3, [pc, #244]	; (8001b7c <HAL_RCC_OscConfig+0x26c>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	695b      	ldr	r3, [r3, #20]
 8001a92:	00db      	lsls	r3, r3, #3
 8001a94:	4939      	ldr	r1, [pc, #228]	; (8001b7c <HAL_RCC_OscConfig+0x26c>)
 8001a96:	4313      	orrs	r3, r2
 8001a98:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a9a:	e03a      	b.n	8001b12 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	691b      	ldr	r3, [r3, #16]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d020      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001aa4:	4b36      	ldr	r3, [pc, #216]	; (8001b80 <HAL_RCC_OscConfig+0x270>)
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aaa:	f7fe ff3d 	bl	8000928 <HAL_GetTick>
 8001aae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ab0:	e008      	b.n	8001ac4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ab2:	f7fe ff39 	bl	8000928 <HAL_GetTick>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	1ad3      	subs	r3, r2, r3
 8001abc:	2b02      	cmp	r3, #2
 8001abe:	d901      	bls.n	8001ac4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	e1a1      	b.n	8001e08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ac4:	4b2d      	ldr	r3, [pc, #180]	; (8001b7c <HAL_RCC_OscConfig+0x26c>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 0302 	and.w	r3, r3, #2
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d0f0      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ad0:	4b2a      	ldr	r3, [pc, #168]	; (8001b7c <HAL_RCC_OscConfig+0x26c>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	695b      	ldr	r3, [r3, #20]
 8001adc:	00db      	lsls	r3, r3, #3
 8001ade:	4927      	ldr	r1, [pc, #156]	; (8001b7c <HAL_RCC_OscConfig+0x26c>)
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	600b      	str	r3, [r1, #0]
 8001ae4:	e015      	b.n	8001b12 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ae6:	4b26      	ldr	r3, [pc, #152]	; (8001b80 <HAL_RCC_OscConfig+0x270>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aec:	f7fe ff1c 	bl	8000928 <HAL_GetTick>
 8001af0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001af2:	e008      	b.n	8001b06 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001af4:	f7fe ff18 	bl	8000928 <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d901      	bls.n	8001b06 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	e180      	b.n	8001e08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b06:	4b1d      	ldr	r3, [pc, #116]	; (8001b7c <HAL_RCC_OscConfig+0x26c>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0302 	and.w	r3, r3, #2
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d1f0      	bne.n	8001af4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0308 	and.w	r3, r3, #8
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d03a      	beq.n	8001b94 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	699b      	ldr	r3, [r3, #24]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d019      	beq.n	8001b5a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b26:	4b17      	ldr	r3, [pc, #92]	; (8001b84 <HAL_RCC_OscConfig+0x274>)
 8001b28:	2201      	movs	r2, #1
 8001b2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b2c:	f7fe fefc 	bl	8000928 <HAL_GetTick>
 8001b30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b32:	e008      	b.n	8001b46 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b34:	f7fe fef8 	bl	8000928 <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d901      	bls.n	8001b46 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e160      	b.n	8001e08 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b46:	4b0d      	ldr	r3, [pc, #52]	; (8001b7c <HAL_RCC_OscConfig+0x26c>)
 8001b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b4a:	f003 0302 	and.w	r3, r3, #2
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d0f0      	beq.n	8001b34 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001b52:	2001      	movs	r0, #1
 8001b54:	f000 fad8 	bl	8002108 <RCC_Delay>
 8001b58:	e01c      	b.n	8001b94 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b5a:	4b0a      	ldr	r3, [pc, #40]	; (8001b84 <HAL_RCC_OscConfig+0x274>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b60:	f7fe fee2 	bl	8000928 <HAL_GetTick>
 8001b64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b66:	e00f      	b.n	8001b88 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b68:	f7fe fede 	bl	8000928 <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d908      	bls.n	8001b88 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e146      	b.n	8001e08 <HAL_RCC_OscConfig+0x4f8>
 8001b7a:	bf00      	nop
 8001b7c:	40021000 	.word	0x40021000
 8001b80:	42420000 	.word	0x42420000
 8001b84:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b88:	4b92      	ldr	r3, [pc, #584]	; (8001dd4 <HAL_RCC_OscConfig+0x4c4>)
 8001b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b8c:	f003 0302 	and.w	r3, r3, #2
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d1e9      	bne.n	8001b68 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 0304 	and.w	r3, r3, #4
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	f000 80a6 	beq.w	8001cee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ba6:	4b8b      	ldr	r3, [pc, #556]	; (8001dd4 <HAL_RCC_OscConfig+0x4c4>)
 8001ba8:	69db      	ldr	r3, [r3, #28]
 8001baa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d10d      	bne.n	8001bce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bb2:	4b88      	ldr	r3, [pc, #544]	; (8001dd4 <HAL_RCC_OscConfig+0x4c4>)
 8001bb4:	69db      	ldr	r3, [r3, #28]
 8001bb6:	4a87      	ldr	r2, [pc, #540]	; (8001dd4 <HAL_RCC_OscConfig+0x4c4>)
 8001bb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bbc:	61d3      	str	r3, [r2, #28]
 8001bbe:	4b85      	ldr	r3, [pc, #532]	; (8001dd4 <HAL_RCC_OscConfig+0x4c4>)
 8001bc0:	69db      	ldr	r3, [r3, #28]
 8001bc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bc6:	60bb      	str	r3, [r7, #8]
 8001bc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bce:	4b82      	ldr	r3, [pc, #520]	; (8001dd8 <HAL_RCC_OscConfig+0x4c8>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d118      	bne.n	8001c0c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bda:	4b7f      	ldr	r3, [pc, #508]	; (8001dd8 <HAL_RCC_OscConfig+0x4c8>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a7e      	ldr	r2, [pc, #504]	; (8001dd8 <HAL_RCC_OscConfig+0x4c8>)
 8001be0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001be4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001be6:	f7fe fe9f 	bl	8000928 <HAL_GetTick>
 8001bea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bec:	e008      	b.n	8001c00 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bee:	f7fe fe9b 	bl	8000928 <HAL_GetTick>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	2b64      	cmp	r3, #100	; 0x64
 8001bfa:	d901      	bls.n	8001c00 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	e103      	b.n	8001e08 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c00:	4b75      	ldr	r3, [pc, #468]	; (8001dd8 <HAL_RCC_OscConfig+0x4c8>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d0f0      	beq.n	8001bee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d106      	bne.n	8001c22 <HAL_RCC_OscConfig+0x312>
 8001c14:	4b6f      	ldr	r3, [pc, #444]	; (8001dd4 <HAL_RCC_OscConfig+0x4c4>)
 8001c16:	6a1b      	ldr	r3, [r3, #32]
 8001c18:	4a6e      	ldr	r2, [pc, #440]	; (8001dd4 <HAL_RCC_OscConfig+0x4c4>)
 8001c1a:	f043 0301 	orr.w	r3, r3, #1
 8001c1e:	6213      	str	r3, [r2, #32]
 8001c20:	e02d      	b.n	8001c7e <HAL_RCC_OscConfig+0x36e>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	68db      	ldr	r3, [r3, #12]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d10c      	bne.n	8001c44 <HAL_RCC_OscConfig+0x334>
 8001c2a:	4b6a      	ldr	r3, [pc, #424]	; (8001dd4 <HAL_RCC_OscConfig+0x4c4>)
 8001c2c:	6a1b      	ldr	r3, [r3, #32]
 8001c2e:	4a69      	ldr	r2, [pc, #420]	; (8001dd4 <HAL_RCC_OscConfig+0x4c4>)
 8001c30:	f023 0301 	bic.w	r3, r3, #1
 8001c34:	6213      	str	r3, [r2, #32]
 8001c36:	4b67      	ldr	r3, [pc, #412]	; (8001dd4 <HAL_RCC_OscConfig+0x4c4>)
 8001c38:	6a1b      	ldr	r3, [r3, #32]
 8001c3a:	4a66      	ldr	r2, [pc, #408]	; (8001dd4 <HAL_RCC_OscConfig+0x4c4>)
 8001c3c:	f023 0304 	bic.w	r3, r3, #4
 8001c40:	6213      	str	r3, [r2, #32]
 8001c42:	e01c      	b.n	8001c7e <HAL_RCC_OscConfig+0x36e>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	2b05      	cmp	r3, #5
 8001c4a:	d10c      	bne.n	8001c66 <HAL_RCC_OscConfig+0x356>
 8001c4c:	4b61      	ldr	r3, [pc, #388]	; (8001dd4 <HAL_RCC_OscConfig+0x4c4>)
 8001c4e:	6a1b      	ldr	r3, [r3, #32]
 8001c50:	4a60      	ldr	r2, [pc, #384]	; (8001dd4 <HAL_RCC_OscConfig+0x4c4>)
 8001c52:	f043 0304 	orr.w	r3, r3, #4
 8001c56:	6213      	str	r3, [r2, #32]
 8001c58:	4b5e      	ldr	r3, [pc, #376]	; (8001dd4 <HAL_RCC_OscConfig+0x4c4>)
 8001c5a:	6a1b      	ldr	r3, [r3, #32]
 8001c5c:	4a5d      	ldr	r2, [pc, #372]	; (8001dd4 <HAL_RCC_OscConfig+0x4c4>)
 8001c5e:	f043 0301 	orr.w	r3, r3, #1
 8001c62:	6213      	str	r3, [r2, #32]
 8001c64:	e00b      	b.n	8001c7e <HAL_RCC_OscConfig+0x36e>
 8001c66:	4b5b      	ldr	r3, [pc, #364]	; (8001dd4 <HAL_RCC_OscConfig+0x4c4>)
 8001c68:	6a1b      	ldr	r3, [r3, #32]
 8001c6a:	4a5a      	ldr	r2, [pc, #360]	; (8001dd4 <HAL_RCC_OscConfig+0x4c4>)
 8001c6c:	f023 0301 	bic.w	r3, r3, #1
 8001c70:	6213      	str	r3, [r2, #32]
 8001c72:	4b58      	ldr	r3, [pc, #352]	; (8001dd4 <HAL_RCC_OscConfig+0x4c4>)
 8001c74:	6a1b      	ldr	r3, [r3, #32]
 8001c76:	4a57      	ldr	r2, [pc, #348]	; (8001dd4 <HAL_RCC_OscConfig+0x4c4>)
 8001c78:	f023 0304 	bic.w	r3, r3, #4
 8001c7c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	68db      	ldr	r3, [r3, #12]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d015      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c86:	f7fe fe4f 	bl	8000928 <HAL_GetTick>
 8001c8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c8c:	e00a      	b.n	8001ca4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c8e:	f7fe fe4b 	bl	8000928 <HAL_GetTick>
 8001c92:	4602      	mov	r2, r0
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d901      	bls.n	8001ca4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	e0b1      	b.n	8001e08 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ca4:	4b4b      	ldr	r3, [pc, #300]	; (8001dd4 <HAL_RCC_OscConfig+0x4c4>)
 8001ca6:	6a1b      	ldr	r3, [r3, #32]
 8001ca8:	f003 0302 	and.w	r3, r3, #2
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d0ee      	beq.n	8001c8e <HAL_RCC_OscConfig+0x37e>
 8001cb0:	e014      	b.n	8001cdc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cb2:	f7fe fe39 	bl	8000928 <HAL_GetTick>
 8001cb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cb8:	e00a      	b.n	8001cd0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cba:	f7fe fe35 	bl	8000928 <HAL_GetTick>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d901      	bls.n	8001cd0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	e09b      	b.n	8001e08 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cd0:	4b40      	ldr	r3, [pc, #256]	; (8001dd4 <HAL_RCC_OscConfig+0x4c4>)
 8001cd2:	6a1b      	ldr	r3, [r3, #32]
 8001cd4:	f003 0302 	and.w	r3, r3, #2
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d1ee      	bne.n	8001cba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001cdc:	7dfb      	ldrb	r3, [r7, #23]
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	d105      	bne.n	8001cee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ce2:	4b3c      	ldr	r3, [pc, #240]	; (8001dd4 <HAL_RCC_OscConfig+0x4c4>)
 8001ce4:	69db      	ldr	r3, [r3, #28]
 8001ce6:	4a3b      	ldr	r2, [pc, #236]	; (8001dd4 <HAL_RCC_OscConfig+0x4c4>)
 8001ce8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	69db      	ldr	r3, [r3, #28]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	f000 8087 	beq.w	8001e06 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cf8:	4b36      	ldr	r3, [pc, #216]	; (8001dd4 <HAL_RCC_OscConfig+0x4c4>)
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f003 030c 	and.w	r3, r3, #12
 8001d00:	2b08      	cmp	r3, #8
 8001d02:	d061      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	69db      	ldr	r3, [r3, #28]
 8001d08:	2b02      	cmp	r3, #2
 8001d0a:	d146      	bne.n	8001d9a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d0c:	4b33      	ldr	r3, [pc, #204]	; (8001ddc <HAL_RCC_OscConfig+0x4cc>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d12:	f7fe fe09 	bl	8000928 <HAL_GetTick>
 8001d16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d18:	e008      	b.n	8001d2c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d1a:	f7fe fe05 	bl	8000928 <HAL_GetTick>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	d901      	bls.n	8001d2c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	e06d      	b.n	8001e08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d2c:	4b29      	ldr	r3, [pc, #164]	; (8001dd4 <HAL_RCC_OscConfig+0x4c4>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d1f0      	bne.n	8001d1a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6a1b      	ldr	r3, [r3, #32]
 8001d3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d40:	d108      	bne.n	8001d54 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d42:	4b24      	ldr	r3, [pc, #144]	; (8001dd4 <HAL_RCC_OscConfig+0x4c4>)
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	4921      	ldr	r1, [pc, #132]	; (8001dd4 <HAL_RCC_OscConfig+0x4c4>)
 8001d50:	4313      	orrs	r3, r2
 8001d52:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d54:	4b1f      	ldr	r3, [pc, #124]	; (8001dd4 <HAL_RCC_OscConfig+0x4c4>)
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6a19      	ldr	r1, [r3, #32]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d64:	430b      	orrs	r3, r1
 8001d66:	491b      	ldr	r1, [pc, #108]	; (8001dd4 <HAL_RCC_OscConfig+0x4c4>)
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d6c:	4b1b      	ldr	r3, [pc, #108]	; (8001ddc <HAL_RCC_OscConfig+0x4cc>)
 8001d6e:	2201      	movs	r2, #1
 8001d70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d72:	f7fe fdd9 	bl	8000928 <HAL_GetTick>
 8001d76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d78:	e008      	b.n	8001d8c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d7a:	f7fe fdd5 	bl	8000928 <HAL_GetTick>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	d901      	bls.n	8001d8c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	e03d      	b.n	8001e08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d8c:	4b11      	ldr	r3, [pc, #68]	; (8001dd4 <HAL_RCC_OscConfig+0x4c4>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d0f0      	beq.n	8001d7a <HAL_RCC_OscConfig+0x46a>
 8001d98:	e035      	b.n	8001e06 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d9a:	4b10      	ldr	r3, [pc, #64]	; (8001ddc <HAL_RCC_OscConfig+0x4cc>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da0:	f7fe fdc2 	bl	8000928 <HAL_GetTick>
 8001da4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001da6:	e008      	b.n	8001dba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001da8:	f7fe fdbe 	bl	8000928 <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d901      	bls.n	8001dba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e026      	b.n	8001e08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dba:	4b06      	ldr	r3, [pc, #24]	; (8001dd4 <HAL_RCC_OscConfig+0x4c4>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d1f0      	bne.n	8001da8 <HAL_RCC_OscConfig+0x498>
 8001dc6:	e01e      	b.n	8001e06 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	69db      	ldr	r3, [r3, #28]
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d107      	bne.n	8001de0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e019      	b.n	8001e08 <HAL_RCC_OscConfig+0x4f8>
 8001dd4:	40021000 	.word	0x40021000
 8001dd8:	40007000 	.word	0x40007000
 8001ddc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001de0:	4b0b      	ldr	r3, [pc, #44]	; (8001e10 <HAL_RCC_OscConfig+0x500>)
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6a1b      	ldr	r3, [r3, #32]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d106      	bne.n	8001e02 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	d001      	beq.n	8001e06 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e000      	b.n	8001e08 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001e06:	2300      	movs	r3, #0
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3718      	adds	r7, #24
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	40021000 	.word	0x40021000

08001e14 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b084      	sub	sp, #16
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d101      	bne.n	8001e28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e0d0      	b.n	8001fca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e28:	4b6a      	ldr	r3, [pc, #424]	; (8001fd4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0307 	and.w	r3, r3, #7
 8001e30:	683a      	ldr	r2, [r7, #0]
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d910      	bls.n	8001e58 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e36:	4b67      	ldr	r3, [pc, #412]	; (8001fd4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f023 0207 	bic.w	r2, r3, #7
 8001e3e:	4965      	ldr	r1, [pc, #404]	; (8001fd4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e46:	4b63      	ldr	r3, [pc, #396]	; (8001fd4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0307 	and.w	r3, r3, #7
 8001e4e:	683a      	ldr	r2, [r7, #0]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d001      	beq.n	8001e58 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e0b8      	b.n	8001fca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0302 	and.w	r3, r3, #2
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d020      	beq.n	8001ea6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 0304 	and.w	r3, r3, #4
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d005      	beq.n	8001e7c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e70:	4b59      	ldr	r3, [pc, #356]	; (8001fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	4a58      	ldr	r2, [pc, #352]	; (8001fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e76:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e7a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 0308 	and.w	r3, r3, #8
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d005      	beq.n	8001e94 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e88:	4b53      	ldr	r3, [pc, #332]	; (8001fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	4a52      	ldr	r2, [pc, #328]	; (8001fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e8e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001e92:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e94:	4b50      	ldr	r3, [pc, #320]	; (8001fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	494d      	ldr	r1, [pc, #308]	; (8001fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d040      	beq.n	8001f34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d107      	bne.n	8001eca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eba:	4b47      	ldr	r3, [pc, #284]	; (8001fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d115      	bne.n	8001ef2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e07f      	b.n	8001fca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d107      	bne.n	8001ee2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ed2:	4b41      	ldr	r3, [pc, #260]	; (8001fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d109      	bne.n	8001ef2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e073      	b.n	8001fca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ee2:	4b3d      	ldr	r3, [pc, #244]	; (8001fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0302 	and.w	r3, r3, #2
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d101      	bne.n	8001ef2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e06b      	b.n	8001fca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ef2:	4b39      	ldr	r3, [pc, #228]	; (8001fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	f023 0203 	bic.w	r2, r3, #3
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	4936      	ldr	r1, [pc, #216]	; (8001fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f00:	4313      	orrs	r3, r2
 8001f02:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f04:	f7fe fd10 	bl	8000928 <HAL_GetTick>
 8001f08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f0a:	e00a      	b.n	8001f22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f0c:	f7fe fd0c 	bl	8000928 <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e053      	b.n	8001fca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f22:	4b2d      	ldr	r3, [pc, #180]	; (8001fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f003 020c 	and.w	r2, r3, #12
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d1eb      	bne.n	8001f0c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f34:	4b27      	ldr	r3, [pc, #156]	; (8001fd4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0307 	and.w	r3, r3, #7
 8001f3c:	683a      	ldr	r2, [r7, #0]
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d210      	bcs.n	8001f64 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f42:	4b24      	ldr	r3, [pc, #144]	; (8001fd4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f023 0207 	bic.w	r2, r3, #7
 8001f4a:	4922      	ldr	r1, [pc, #136]	; (8001fd4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f52:	4b20      	ldr	r3, [pc, #128]	; (8001fd4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0307 	and.w	r3, r3, #7
 8001f5a:	683a      	ldr	r2, [r7, #0]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d001      	beq.n	8001f64 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e032      	b.n	8001fca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0304 	and.w	r3, r3, #4
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d008      	beq.n	8001f82 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f70:	4b19      	ldr	r3, [pc, #100]	; (8001fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	4916      	ldr	r1, [pc, #88]	; (8001fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0308 	and.w	r3, r3, #8
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d009      	beq.n	8001fa2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f8e:	4b12      	ldr	r3, [pc, #72]	; (8001fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	691b      	ldr	r3, [r3, #16]
 8001f9a:	00db      	lsls	r3, r3, #3
 8001f9c:	490e      	ldr	r1, [pc, #56]	; (8001fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001fa2:	f000 f821 	bl	8001fe8 <HAL_RCC_GetSysClockFreq>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	4b0b      	ldr	r3, [pc, #44]	; (8001fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	091b      	lsrs	r3, r3, #4
 8001fae:	f003 030f 	and.w	r3, r3, #15
 8001fb2:	490a      	ldr	r1, [pc, #40]	; (8001fdc <HAL_RCC_ClockConfig+0x1c8>)
 8001fb4:	5ccb      	ldrb	r3, [r1, r3]
 8001fb6:	fa22 f303 	lsr.w	r3, r2, r3
 8001fba:	4a09      	ldr	r2, [pc, #36]	; (8001fe0 <HAL_RCC_ClockConfig+0x1cc>)
 8001fbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001fbe:	4b09      	ldr	r3, [pc, #36]	; (8001fe4 <HAL_RCC_ClockConfig+0x1d0>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f7fe fc6e 	bl	80008a4 <HAL_InitTick>

  return HAL_OK;
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3710      	adds	r7, #16
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	40022000 	.word	0x40022000
 8001fd8:	40021000 	.word	0x40021000
 8001fdc:	080035fc 	.word	0x080035fc
 8001fe0:	20000000 	.word	0x20000000
 8001fe4:	20000004 	.word	0x20000004

08001fe8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fe8:	b490      	push	{r4, r7}
 8001fea:	b08a      	sub	sp, #40	; 0x28
 8001fec:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001fee:	4b29      	ldr	r3, [pc, #164]	; (8002094 <HAL_RCC_GetSysClockFreq+0xac>)
 8001ff0:	1d3c      	adds	r4, r7, #4
 8001ff2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ff4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001ff8:	f240 2301 	movw	r3, #513	; 0x201
 8001ffc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ffe:	2300      	movs	r3, #0
 8002000:	61fb      	str	r3, [r7, #28]
 8002002:	2300      	movs	r3, #0
 8002004:	61bb      	str	r3, [r7, #24]
 8002006:	2300      	movs	r3, #0
 8002008:	627b      	str	r3, [r7, #36]	; 0x24
 800200a:	2300      	movs	r3, #0
 800200c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800200e:	2300      	movs	r3, #0
 8002010:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002012:	4b21      	ldr	r3, [pc, #132]	; (8002098 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	f003 030c 	and.w	r3, r3, #12
 800201e:	2b04      	cmp	r3, #4
 8002020:	d002      	beq.n	8002028 <HAL_RCC_GetSysClockFreq+0x40>
 8002022:	2b08      	cmp	r3, #8
 8002024:	d003      	beq.n	800202e <HAL_RCC_GetSysClockFreq+0x46>
 8002026:	e02b      	b.n	8002080 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002028:	4b1c      	ldr	r3, [pc, #112]	; (800209c <HAL_RCC_GetSysClockFreq+0xb4>)
 800202a:	623b      	str	r3, [r7, #32]
      break;
 800202c:	e02b      	b.n	8002086 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	0c9b      	lsrs	r3, r3, #18
 8002032:	f003 030f 	and.w	r3, r3, #15
 8002036:	3328      	adds	r3, #40	; 0x28
 8002038:	443b      	add	r3, r7
 800203a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800203e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d012      	beq.n	8002070 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800204a:	4b13      	ldr	r3, [pc, #76]	; (8002098 <HAL_RCC_GetSysClockFreq+0xb0>)
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	0c5b      	lsrs	r3, r3, #17
 8002050:	f003 0301 	and.w	r3, r3, #1
 8002054:	3328      	adds	r3, #40	; 0x28
 8002056:	443b      	add	r3, r7
 8002058:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800205c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	4a0e      	ldr	r2, [pc, #56]	; (800209c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002062:	fb03 f202 	mul.w	r2, r3, r2
 8002066:	69bb      	ldr	r3, [r7, #24]
 8002068:	fbb2 f3f3 	udiv	r3, r2, r3
 800206c:	627b      	str	r3, [r7, #36]	; 0x24
 800206e:	e004      	b.n	800207a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	4a0b      	ldr	r2, [pc, #44]	; (80020a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002074:	fb02 f303 	mul.w	r3, r2, r3
 8002078:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800207a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207c:	623b      	str	r3, [r7, #32]
      break;
 800207e:	e002      	b.n	8002086 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002080:	4b06      	ldr	r3, [pc, #24]	; (800209c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002082:	623b      	str	r3, [r7, #32]
      break;
 8002084:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002086:	6a3b      	ldr	r3, [r7, #32]
}
 8002088:	4618      	mov	r0, r3
 800208a:	3728      	adds	r7, #40	; 0x28
 800208c:	46bd      	mov	sp, r7
 800208e:	bc90      	pop	{r4, r7}
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	080035d4 	.word	0x080035d4
 8002098:	40021000 	.word	0x40021000
 800209c:	007a1200 	.word	0x007a1200
 80020a0:	003d0900 	.word	0x003d0900

080020a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020a8:	4b02      	ldr	r3, [pc, #8]	; (80020b4 <HAL_RCC_GetHCLKFreq+0x10>)
 80020aa:	681b      	ldr	r3, [r3, #0]
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bc80      	pop	{r7}
 80020b2:	4770      	bx	lr
 80020b4:	20000000 	.word	0x20000000

080020b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80020bc:	f7ff fff2 	bl	80020a4 <HAL_RCC_GetHCLKFreq>
 80020c0:	4602      	mov	r2, r0
 80020c2:	4b05      	ldr	r3, [pc, #20]	; (80020d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	0a1b      	lsrs	r3, r3, #8
 80020c8:	f003 0307 	and.w	r3, r3, #7
 80020cc:	4903      	ldr	r1, [pc, #12]	; (80020dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80020ce:	5ccb      	ldrb	r3, [r1, r3]
 80020d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	40021000 	.word	0x40021000
 80020dc:	0800360c 	.word	0x0800360c

080020e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80020e4:	f7ff ffde 	bl	80020a4 <HAL_RCC_GetHCLKFreq>
 80020e8:	4602      	mov	r2, r0
 80020ea:	4b05      	ldr	r3, [pc, #20]	; (8002100 <HAL_RCC_GetPCLK2Freq+0x20>)
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	0adb      	lsrs	r3, r3, #11
 80020f0:	f003 0307 	and.w	r3, r3, #7
 80020f4:	4903      	ldr	r1, [pc, #12]	; (8002104 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020f6:	5ccb      	ldrb	r3, [r1, r3]
 80020f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	40021000 	.word	0x40021000
 8002104:	0800360c 	.word	0x0800360c

08002108 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002108:	b480      	push	{r7}
 800210a:	b085      	sub	sp, #20
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002110:	4b0a      	ldr	r3, [pc, #40]	; (800213c <RCC_Delay+0x34>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a0a      	ldr	r2, [pc, #40]	; (8002140 <RCC_Delay+0x38>)
 8002116:	fba2 2303 	umull	r2, r3, r2, r3
 800211a:	0a5b      	lsrs	r3, r3, #9
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	fb02 f303 	mul.w	r3, r2, r3
 8002122:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002124:	bf00      	nop
  }
  while (Delay --);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	1e5a      	subs	r2, r3, #1
 800212a:	60fa      	str	r2, [r7, #12]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d1f9      	bne.n	8002124 <RCC_Delay+0x1c>
}
 8002130:	bf00      	nop
 8002132:	bf00      	nop
 8002134:	3714      	adds	r7, #20
 8002136:	46bd      	mov	sp, r7
 8002138:	bc80      	pop	{r7}
 800213a:	4770      	bx	lr
 800213c:	20000000 	.word	0x20000000
 8002140:	10624dd3 	.word	0x10624dd3

08002144 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d101      	bne.n	8002156 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e03f      	b.n	80021d6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800215c:	b2db      	uxtb	r3, r3
 800215e:	2b00      	cmp	r3, #0
 8002160:	d106      	bne.n	8002170 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2200      	movs	r2, #0
 8002166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f7fe fa44 	bl	80005f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2224      	movs	r2, #36	; 0x24
 8002174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	68da      	ldr	r2, [r3, #12]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002186:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	f000 f905 	bl	8002398 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	691a      	ldr	r2, [r3, #16]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800219c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	695a      	ldr	r2, [r3, #20]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80021ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	68da      	ldr	r2, [r3, #12]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80021bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2200      	movs	r2, #0
 80021c2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2220      	movs	r2, #32
 80021c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2220      	movs	r2, #32
 80021d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021de:	b580      	push	{r7, lr}
 80021e0:	b08a      	sub	sp, #40	; 0x28
 80021e2:	af02      	add	r7, sp, #8
 80021e4:	60f8      	str	r0, [r7, #12]
 80021e6:	60b9      	str	r1, [r7, #8]
 80021e8:	603b      	str	r3, [r7, #0]
 80021ea:	4613      	mov	r3, r2
 80021ec:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80021ee:	2300      	movs	r3, #0
 80021f0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	2b20      	cmp	r3, #32
 80021fc:	d17c      	bne.n	80022f8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d002      	beq.n	800220a <HAL_UART_Transmit+0x2c>
 8002204:	88fb      	ldrh	r3, [r7, #6]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d101      	bne.n	800220e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e075      	b.n	80022fa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002214:	2b01      	cmp	r3, #1
 8002216:	d101      	bne.n	800221c <HAL_UART_Transmit+0x3e>
 8002218:	2302      	movs	r3, #2
 800221a:	e06e      	b.n	80022fa <HAL_UART_Transmit+0x11c>
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2201      	movs	r2, #1
 8002220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2200      	movs	r2, #0
 8002228:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2221      	movs	r2, #33	; 0x21
 800222e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002232:	f7fe fb79 	bl	8000928 <HAL_GetTick>
 8002236:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	88fa      	ldrh	r2, [r7, #6]
 800223c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	88fa      	ldrh	r2, [r7, #6]
 8002242:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800224c:	d108      	bne.n	8002260 <HAL_UART_Transmit+0x82>
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	691b      	ldr	r3, [r3, #16]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d104      	bne.n	8002260 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002256:	2300      	movs	r3, #0
 8002258:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	61bb      	str	r3, [r7, #24]
 800225e:	e003      	b.n	8002268 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002264:	2300      	movs	r3, #0
 8002266:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2200      	movs	r2, #0
 800226c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002270:	e02a      	b.n	80022c8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	9300      	str	r3, [sp, #0]
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	2200      	movs	r2, #0
 800227a:	2180      	movs	r1, #128	; 0x80
 800227c:	68f8      	ldr	r0, [r7, #12]
 800227e:	f000 f840 	bl	8002302 <UART_WaitOnFlagUntilTimeout>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d001      	beq.n	800228c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002288:	2303      	movs	r3, #3
 800228a:	e036      	b.n	80022fa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d10b      	bne.n	80022aa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002292:	69bb      	ldr	r3, [r7, #24]
 8002294:	881b      	ldrh	r3, [r3, #0]
 8002296:	461a      	mov	r2, r3
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80022a0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80022a2:	69bb      	ldr	r3, [r7, #24]
 80022a4:	3302      	adds	r3, #2
 80022a6:	61bb      	str	r3, [r7, #24]
 80022a8:	e007      	b.n	80022ba <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	781a      	ldrb	r2, [r3, #0]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	3301      	adds	r3, #1
 80022b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80022be:	b29b      	uxth	r3, r3
 80022c0:	3b01      	subs	r3, #1
 80022c2:	b29a      	uxth	r2, r3
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d1cf      	bne.n	8002272 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	9300      	str	r3, [sp, #0]
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	2200      	movs	r2, #0
 80022da:	2140      	movs	r1, #64	; 0x40
 80022dc:	68f8      	ldr	r0, [r7, #12]
 80022de:	f000 f810 	bl	8002302 <UART_WaitOnFlagUntilTimeout>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d001      	beq.n	80022ec <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80022e8:	2303      	movs	r3, #3
 80022ea:	e006      	b.n	80022fa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2220      	movs	r2, #32
 80022f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80022f4:	2300      	movs	r3, #0
 80022f6:	e000      	b.n	80022fa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80022f8:	2302      	movs	r3, #2
  }
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3720      	adds	r7, #32
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}

08002302 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002302:	b580      	push	{r7, lr}
 8002304:	b084      	sub	sp, #16
 8002306:	af00      	add	r7, sp, #0
 8002308:	60f8      	str	r0, [r7, #12]
 800230a:	60b9      	str	r1, [r7, #8]
 800230c:	603b      	str	r3, [r7, #0]
 800230e:	4613      	mov	r3, r2
 8002310:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002312:	e02c      	b.n	800236e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002314:	69bb      	ldr	r3, [r7, #24]
 8002316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800231a:	d028      	beq.n	800236e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d007      	beq.n	8002332 <UART_WaitOnFlagUntilTimeout+0x30>
 8002322:	f7fe fb01 	bl	8000928 <HAL_GetTick>
 8002326:	4602      	mov	r2, r0
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	429a      	cmp	r2, r3
 8002330:	d21d      	bcs.n	800236e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	68da      	ldr	r2, [r3, #12]
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002340:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	695a      	ldr	r2, [r3, #20]
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f022 0201 	bic.w	r2, r2, #1
 8002350:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2220      	movs	r2, #32
 8002356:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2220      	movs	r2, #32
 800235e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2200      	movs	r2, #0
 8002366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800236a:	2303      	movs	r3, #3
 800236c:	e00f      	b.n	800238e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	4013      	ands	r3, r2
 8002378:	68ba      	ldr	r2, [r7, #8]
 800237a:	429a      	cmp	r2, r3
 800237c:	bf0c      	ite	eq
 800237e:	2301      	moveq	r3, #1
 8002380:	2300      	movne	r3, #0
 8002382:	b2db      	uxtb	r3, r3
 8002384:	461a      	mov	r2, r3
 8002386:	79fb      	ldrb	r3, [r7, #7]
 8002388:	429a      	cmp	r2, r3
 800238a:	d0c3      	beq.n	8002314 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800238c:	2300      	movs	r3, #0
}
 800238e:	4618      	mov	r0, r3
 8002390:	3710      	adds	r7, #16
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
	...

08002398 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	691b      	ldr	r3, [r3, #16]
 80023a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	68da      	ldr	r2, [r3, #12]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	430a      	orrs	r2, r1
 80023b4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	689a      	ldr	r2, [r3, #8]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	691b      	ldr	r3, [r3, #16]
 80023be:	431a      	orrs	r2, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	695b      	ldr	r3, [r3, #20]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80023d2:	f023 030c 	bic.w	r3, r3, #12
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	6812      	ldr	r2, [r2, #0]
 80023da:	68b9      	ldr	r1, [r7, #8]
 80023dc:	430b      	orrs	r3, r1
 80023de:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	695b      	ldr	r3, [r3, #20]
 80023e6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	699a      	ldr	r2, [r3, #24]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	430a      	orrs	r2, r1
 80023f4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a2c      	ldr	r2, [pc, #176]	; (80024ac <UART_SetConfig+0x114>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d103      	bne.n	8002408 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002400:	f7ff fe6e 	bl	80020e0 <HAL_RCC_GetPCLK2Freq>
 8002404:	60f8      	str	r0, [r7, #12]
 8002406:	e002      	b.n	800240e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002408:	f7ff fe56 	bl	80020b8 <HAL_RCC_GetPCLK1Freq>
 800240c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800240e:	68fa      	ldr	r2, [r7, #12]
 8002410:	4613      	mov	r3, r2
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	4413      	add	r3, r2
 8002416:	009a      	lsls	r2, r3, #2
 8002418:	441a      	add	r2, r3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	fbb2 f3f3 	udiv	r3, r2, r3
 8002424:	4a22      	ldr	r2, [pc, #136]	; (80024b0 <UART_SetConfig+0x118>)
 8002426:	fba2 2303 	umull	r2, r3, r2, r3
 800242a:	095b      	lsrs	r3, r3, #5
 800242c:	0119      	lsls	r1, r3, #4
 800242e:	68fa      	ldr	r2, [r7, #12]
 8002430:	4613      	mov	r3, r2
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	4413      	add	r3, r2
 8002436:	009a      	lsls	r2, r3, #2
 8002438:	441a      	add	r2, r3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	fbb2 f2f3 	udiv	r2, r2, r3
 8002444:	4b1a      	ldr	r3, [pc, #104]	; (80024b0 <UART_SetConfig+0x118>)
 8002446:	fba3 0302 	umull	r0, r3, r3, r2
 800244a:	095b      	lsrs	r3, r3, #5
 800244c:	2064      	movs	r0, #100	; 0x64
 800244e:	fb00 f303 	mul.w	r3, r0, r3
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	011b      	lsls	r3, r3, #4
 8002456:	3332      	adds	r3, #50	; 0x32
 8002458:	4a15      	ldr	r2, [pc, #84]	; (80024b0 <UART_SetConfig+0x118>)
 800245a:	fba2 2303 	umull	r2, r3, r2, r3
 800245e:	095b      	lsrs	r3, r3, #5
 8002460:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002464:	4419      	add	r1, r3
 8002466:	68fa      	ldr	r2, [r7, #12]
 8002468:	4613      	mov	r3, r2
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	4413      	add	r3, r2
 800246e:	009a      	lsls	r2, r3, #2
 8002470:	441a      	add	r2, r3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	fbb2 f2f3 	udiv	r2, r2, r3
 800247c:	4b0c      	ldr	r3, [pc, #48]	; (80024b0 <UART_SetConfig+0x118>)
 800247e:	fba3 0302 	umull	r0, r3, r3, r2
 8002482:	095b      	lsrs	r3, r3, #5
 8002484:	2064      	movs	r0, #100	; 0x64
 8002486:	fb00 f303 	mul.w	r3, r0, r3
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	011b      	lsls	r3, r3, #4
 800248e:	3332      	adds	r3, #50	; 0x32
 8002490:	4a07      	ldr	r2, [pc, #28]	; (80024b0 <UART_SetConfig+0x118>)
 8002492:	fba2 2303 	umull	r2, r3, r2, r3
 8002496:	095b      	lsrs	r3, r3, #5
 8002498:	f003 020f 	and.w	r2, r3, #15
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	440a      	add	r2, r1
 80024a2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80024a4:	bf00      	nop
 80024a6:	3710      	adds	r7, #16
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	40013800 	.word	0x40013800
 80024b0:	51eb851f 	.word	0x51eb851f

080024b4 <__errno>:
 80024b4:	4b01      	ldr	r3, [pc, #4]	; (80024bc <__errno+0x8>)
 80024b6:	6818      	ldr	r0, [r3, #0]
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	2000000c 	.word	0x2000000c

080024c0 <__libc_init_array>:
 80024c0:	b570      	push	{r4, r5, r6, lr}
 80024c2:	2600      	movs	r6, #0
 80024c4:	4d0c      	ldr	r5, [pc, #48]	; (80024f8 <__libc_init_array+0x38>)
 80024c6:	4c0d      	ldr	r4, [pc, #52]	; (80024fc <__libc_init_array+0x3c>)
 80024c8:	1b64      	subs	r4, r4, r5
 80024ca:	10a4      	asrs	r4, r4, #2
 80024cc:	42a6      	cmp	r6, r4
 80024ce:	d109      	bne.n	80024e4 <__libc_init_array+0x24>
 80024d0:	f001 f82c 	bl	800352c <_init>
 80024d4:	2600      	movs	r6, #0
 80024d6:	4d0a      	ldr	r5, [pc, #40]	; (8002500 <__libc_init_array+0x40>)
 80024d8:	4c0a      	ldr	r4, [pc, #40]	; (8002504 <__libc_init_array+0x44>)
 80024da:	1b64      	subs	r4, r4, r5
 80024dc:	10a4      	asrs	r4, r4, #2
 80024de:	42a6      	cmp	r6, r4
 80024e0:	d105      	bne.n	80024ee <__libc_init_array+0x2e>
 80024e2:	bd70      	pop	{r4, r5, r6, pc}
 80024e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80024e8:	4798      	blx	r3
 80024ea:	3601      	adds	r6, #1
 80024ec:	e7ee      	b.n	80024cc <__libc_init_array+0xc>
 80024ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80024f2:	4798      	blx	r3
 80024f4:	3601      	adds	r6, #1
 80024f6:	e7f2      	b.n	80024de <__libc_init_array+0x1e>
 80024f8:	080036ac 	.word	0x080036ac
 80024fc:	080036ac 	.word	0x080036ac
 8002500:	080036ac 	.word	0x080036ac
 8002504:	080036b0 	.word	0x080036b0

08002508 <memset>:
 8002508:	4603      	mov	r3, r0
 800250a:	4402      	add	r2, r0
 800250c:	4293      	cmp	r3, r2
 800250e:	d100      	bne.n	8002512 <memset+0xa>
 8002510:	4770      	bx	lr
 8002512:	f803 1b01 	strb.w	r1, [r3], #1
 8002516:	e7f9      	b.n	800250c <memset+0x4>

08002518 <iprintf>:
 8002518:	b40f      	push	{r0, r1, r2, r3}
 800251a:	4b0a      	ldr	r3, [pc, #40]	; (8002544 <iprintf+0x2c>)
 800251c:	b513      	push	{r0, r1, r4, lr}
 800251e:	681c      	ldr	r4, [r3, #0]
 8002520:	b124      	cbz	r4, 800252c <iprintf+0x14>
 8002522:	69a3      	ldr	r3, [r4, #24]
 8002524:	b913      	cbnz	r3, 800252c <iprintf+0x14>
 8002526:	4620      	mov	r0, r4
 8002528:	f000 fa5a 	bl	80029e0 <__sinit>
 800252c:	ab05      	add	r3, sp, #20
 800252e:	4620      	mov	r0, r4
 8002530:	9a04      	ldr	r2, [sp, #16]
 8002532:	68a1      	ldr	r1, [r4, #8]
 8002534:	9301      	str	r3, [sp, #4]
 8002536:	f000 fc5d 	bl	8002df4 <_vfiprintf_r>
 800253a:	b002      	add	sp, #8
 800253c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002540:	b004      	add	sp, #16
 8002542:	4770      	bx	lr
 8002544:	2000000c 	.word	0x2000000c

08002548 <_puts_r>:
 8002548:	b570      	push	{r4, r5, r6, lr}
 800254a:	460e      	mov	r6, r1
 800254c:	4605      	mov	r5, r0
 800254e:	b118      	cbz	r0, 8002558 <_puts_r+0x10>
 8002550:	6983      	ldr	r3, [r0, #24]
 8002552:	b90b      	cbnz	r3, 8002558 <_puts_r+0x10>
 8002554:	f000 fa44 	bl	80029e0 <__sinit>
 8002558:	69ab      	ldr	r3, [r5, #24]
 800255a:	68ac      	ldr	r4, [r5, #8]
 800255c:	b913      	cbnz	r3, 8002564 <_puts_r+0x1c>
 800255e:	4628      	mov	r0, r5
 8002560:	f000 fa3e 	bl	80029e0 <__sinit>
 8002564:	4b2c      	ldr	r3, [pc, #176]	; (8002618 <_puts_r+0xd0>)
 8002566:	429c      	cmp	r4, r3
 8002568:	d120      	bne.n	80025ac <_puts_r+0x64>
 800256a:	686c      	ldr	r4, [r5, #4]
 800256c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800256e:	07db      	lsls	r3, r3, #31
 8002570:	d405      	bmi.n	800257e <_puts_r+0x36>
 8002572:	89a3      	ldrh	r3, [r4, #12]
 8002574:	0598      	lsls	r0, r3, #22
 8002576:	d402      	bmi.n	800257e <_puts_r+0x36>
 8002578:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800257a:	f000 facf 	bl	8002b1c <__retarget_lock_acquire_recursive>
 800257e:	89a3      	ldrh	r3, [r4, #12]
 8002580:	0719      	lsls	r1, r3, #28
 8002582:	d51d      	bpl.n	80025c0 <_puts_r+0x78>
 8002584:	6923      	ldr	r3, [r4, #16]
 8002586:	b1db      	cbz	r3, 80025c0 <_puts_r+0x78>
 8002588:	3e01      	subs	r6, #1
 800258a:	68a3      	ldr	r3, [r4, #8]
 800258c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002590:	3b01      	subs	r3, #1
 8002592:	60a3      	str	r3, [r4, #8]
 8002594:	bb39      	cbnz	r1, 80025e6 <_puts_r+0x9e>
 8002596:	2b00      	cmp	r3, #0
 8002598:	da38      	bge.n	800260c <_puts_r+0xc4>
 800259a:	4622      	mov	r2, r4
 800259c:	210a      	movs	r1, #10
 800259e:	4628      	mov	r0, r5
 80025a0:	f000 f848 	bl	8002634 <__swbuf_r>
 80025a4:	3001      	adds	r0, #1
 80025a6:	d011      	beq.n	80025cc <_puts_r+0x84>
 80025a8:	250a      	movs	r5, #10
 80025aa:	e011      	b.n	80025d0 <_puts_r+0x88>
 80025ac:	4b1b      	ldr	r3, [pc, #108]	; (800261c <_puts_r+0xd4>)
 80025ae:	429c      	cmp	r4, r3
 80025b0:	d101      	bne.n	80025b6 <_puts_r+0x6e>
 80025b2:	68ac      	ldr	r4, [r5, #8]
 80025b4:	e7da      	b.n	800256c <_puts_r+0x24>
 80025b6:	4b1a      	ldr	r3, [pc, #104]	; (8002620 <_puts_r+0xd8>)
 80025b8:	429c      	cmp	r4, r3
 80025ba:	bf08      	it	eq
 80025bc:	68ec      	ldreq	r4, [r5, #12]
 80025be:	e7d5      	b.n	800256c <_puts_r+0x24>
 80025c0:	4621      	mov	r1, r4
 80025c2:	4628      	mov	r0, r5
 80025c4:	f000 f888 	bl	80026d8 <__swsetup_r>
 80025c8:	2800      	cmp	r0, #0
 80025ca:	d0dd      	beq.n	8002588 <_puts_r+0x40>
 80025cc:	f04f 35ff 	mov.w	r5, #4294967295
 80025d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80025d2:	07da      	lsls	r2, r3, #31
 80025d4:	d405      	bmi.n	80025e2 <_puts_r+0x9a>
 80025d6:	89a3      	ldrh	r3, [r4, #12]
 80025d8:	059b      	lsls	r3, r3, #22
 80025da:	d402      	bmi.n	80025e2 <_puts_r+0x9a>
 80025dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80025de:	f000 fa9e 	bl	8002b1e <__retarget_lock_release_recursive>
 80025e2:	4628      	mov	r0, r5
 80025e4:	bd70      	pop	{r4, r5, r6, pc}
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	da04      	bge.n	80025f4 <_puts_r+0xac>
 80025ea:	69a2      	ldr	r2, [r4, #24]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	dc06      	bgt.n	80025fe <_puts_r+0xb6>
 80025f0:	290a      	cmp	r1, #10
 80025f2:	d004      	beq.n	80025fe <_puts_r+0xb6>
 80025f4:	6823      	ldr	r3, [r4, #0]
 80025f6:	1c5a      	adds	r2, r3, #1
 80025f8:	6022      	str	r2, [r4, #0]
 80025fa:	7019      	strb	r1, [r3, #0]
 80025fc:	e7c5      	b.n	800258a <_puts_r+0x42>
 80025fe:	4622      	mov	r2, r4
 8002600:	4628      	mov	r0, r5
 8002602:	f000 f817 	bl	8002634 <__swbuf_r>
 8002606:	3001      	adds	r0, #1
 8002608:	d1bf      	bne.n	800258a <_puts_r+0x42>
 800260a:	e7df      	b.n	80025cc <_puts_r+0x84>
 800260c:	250a      	movs	r5, #10
 800260e:	6823      	ldr	r3, [r4, #0]
 8002610:	1c5a      	adds	r2, r3, #1
 8002612:	6022      	str	r2, [r4, #0]
 8002614:	701d      	strb	r5, [r3, #0]
 8002616:	e7db      	b.n	80025d0 <_puts_r+0x88>
 8002618:	08003638 	.word	0x08003638
 800261c:	08003658 	.word	0x08003658
 8002620:	08003618 	.word	0x08003618

08002624 <puts>:
 8002624:	4b02      	ldr	r3, [pc, #8]	; (8002630 <puts+0xc>)
 8002626:	4601      	mov	r1, r0
 8002628:	6818      	ldr	r0, [r3, #0]
 800262a:	f7ff bf8d 	b.w	8002548 <_puts_r>
 800262e:	bf00      	nop
 8002630:	2000000c 	.word	0x2000000c

08002634 <__swbuf_r>:
 8002634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002636:	460e      	mov	r6, r1
 8002638:	4614      	mov	r4, r2
 800263a:	4605      	mov	r5, r0
 800263c:	b118      	cbz	r0, 8002646 <__swbuf_r+0x12>
 800263e:	6983      	ldr	r3, [r0, #24]
 8002640:	b90b      	cbnz	r3, 8002646 <__swbuf_r+0x12>
 8002642:	f000 f9cd 	bl	80029e0 <__sinit>
 8002646:	4b21      	ldr	r3, [pc, #132]	; (80026cc <__swbuf_r+0x98>)
 8002648:	429c      	cmp	r4, r3
 800264a:	d12b      	bne.n	80026a4 <__swbuf_r+0x70>
 800264c:	686c      	ldr	r4, [r5, #4]
 800264e:	69a3      	ldr	r3, [r4, #24]
 8002650:	60a3      	str	r3, [r4, #8]
 8002652:	89a3      	ldrh	r3, [r4, #12]
 8002654:	071a      	lsls	r2, r3, #28
 8002656:	d52f      	bpl.n	80026b8 <__swbuf_r+0x84>
 8002658:	6923      	ldr	r3, [r4, #16]
 800265a:	b36b      	cbz	r3, 80026b8 <__swbuf_r+0x84>
 800265c:	6923      	ldr	r3, [r4, #16]
 800265e:	6820      	ldr	r0, [r4, #0]
 8002660:	b2f6      	uxtb	r6, r6
 8002662:	1ac0      	subs	r0, r0, r3
 8002664:	6963      	ldr	r3, [r4, #20]
 8002666:	4637      	mov	r7, r6
 8002668:	4283      	cmp	r3, r0
 800266a:	dc04      	bgt.n	8002676 <__swbuf_r+0x42>
 800266c:	4621      	mov	r1, r4
 800266e:	4628      	mov	r0, r5
 8002670:	f000 f922 	bl	80028b8 <_fflush_r>
 8002674:	bb30      	cbnz	r0, 80026c4 <__swbuf_r+0x90>
 8002676:	68a3      	ldr	r3, [r4, #8]
 8002678:	3001      	adds	r0, #1
 800267a:	3b01      	subs	r3, #1
 800267c:	60a3      	str	r3, [r4, #8]
 800267e:	6823      	ldr	r3, [r4, #0]
 8002680:	1c5a      	adds	r2, r3, #1
 8002682:	6022      	str	r2, [r4, #0]
 8002684:	701e      	strb	r6, [r3, #0]
 8002686:	6963      	ldr	r3, [r4, #20]
 8002688:	4283      	cmp	r3, r0
 800268a:	d004      	beq.n	8002696 <__swbuf_r+0x62>
 800268c:	89a3      	ldrh	r3, [r4, #12]
 800268e:	07db      	lsls	r3, r3, #31
 8002690:	d506      	bpl.n	80026a0 <__swbuf_r+0x6c>
 8002692:	2e0a      	cmp	r6, #10
 8002694:	d104      	bne.n	80026a0 <__swbuf_r+0x6c>
 8002696:	4621      	mov	r1, r4
 8002698:	4628      	mov	r0, r5
 800269a:	f000 f90d 	bl	80028b8 <_fflush_r>
 800269e:	b988      	cbnz	r0, 80026c4 <__swbuf_r+0x90>
 80026a0:	4638      	mov	r0, r7
 80026a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80026a4:	4b0a      	ldr	r3, [pc, #40]	; (80026d0 <__swbuf_r+0x9c>)
 80026a6:	429c      	cmp	r4, r3
 80026a8:	d101      	bne.n	80026ae <__swbuf_r+0x7a>
 80026aa:	68ac      	ldr	r4, [r5, #8]
 80026ac:	e7cf      	b.n	800264e <__swbuf_r+0x1a>
 80026ae:	4b09      	ldr	r3, [pc, #36]	; (80026d4 <__swbuf_r+0xa0>)
 80026b0:	429c      	cmp	r4, r3
 80026b2:	bf08      	it	eq
 80026b4:	68ec      	ldreq	r4, [r5, #12]
 80026b6:	e7ca      	b.n	800264e <__swbuf_r+0x1a>
 80026b8:	4621      	mov	r1, r4
 80026ba:	4628      	mov	r0, r5
 80026bc:	f000 f80c 	bl	80026d8 <__swsetup_r>
 80026c0:	2800      	cmp	r0, #0
 80026c2:	d0cb      	beq.n	800265c <__swbuf_r+0x28>
 80026c4:	f04f 37ff 	mov.w	r7, #4294967295
 80026c8:	e7ea      	b.n	80026a0 <__swbuf_r+0x6c>
 80026ca:	bf00      	nop
 80026cc:	08003638 	.word	0x08003638
 80026d0:	08003658 	.word	0x08003658
 80026d4:	08003618 	.word	0x08003618

080026d8 <__swsetup_r>:
 80026d8:	4b32      	ldr	r3, [pc, #200]	; (80027a4 <__swsetup_r+0xcc>)
 80026da:	b570      	push	{r4, r5, r6, lr}
 80026dc:	681d      	ldr	r5, [r3, #0]
 80026de:	4606      	mov	r6, r0
 80026e0:	460c      	mov	r4, r1
 80026e2:	b125      	cbz	r5, 80026ee <__swsetup_r+0x16>
 80026e4:	69ab      	ldr	r3, [r5, #24]
 80026e6:	b913      	cbnz	r3, 80026ee <__swsetup_r+0x16>
 80026e8:	4628      	mov	r0, r5
 80026ea:	f000 f979 	bl	80029e0 <__sinit>
 80026ee:	4b2e      	ldr	r3, [pc, #184]	; (80027a8 <__swsetup_r+0xd0>)
 80026f0:	429c      	cmp	r4, r3
 80026f2:	d10f      	bne.n	8002714 <__swsetup_r+0x3c>
 80026f4:	686c      	ldr	r4, [r5, #4]
 80026f6:	89a3      	ldrh	r3, [r4, #12]
 80026f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80026fc:	0719      	lsls	r1, r3, #28
 80026fe:	d42c      	bmi.n	800275a <__swsetup_r+0x82>
 8002700:	06dd      	lsls	r5, r3, #27
 8002702:	d411      	bmi.n	8002728 <__swsetup_r+0x50>
 8002704:	2309      	movs	r3, #9
 8002706:	6033      	str	r3, [r6, #0]
 8002708:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800270c:	f04f 30ff 	mov.w	r0, #4294967295
 8002710:	81a3      	strh	r3, [r4, #12]
 8002712:	e03e      	b.n	8002792 <__swsetup_r+0xba>
 8002714:	4b25      	ldr	r3, [pc, #148]	; (80027ac <__swsetup_r+0xd4>)
 8002716:	429c      	cmp	r4, r3
 8002718:	d101      	bne.n	800271e <__swsetup_r+0x46>
 800271a:	68ac      	ldr	r4, [r5, #8]
 800271c:	e7eb      	b.n	80026f6 <__swsetup_r+0x1e>
 800271e:	4b24      	ldr	r3, [pc, #144]	; (80027b0 <__swsetup_r+0xd8>)
 8002720:	429c      	cmp	r4, r3
 8002722:	bf08      	it	eq
 8002724:	68ec      	ldreq	r4, [r5, #12]
 8002726:	e7e6      	b.n	80026f6 <__swsetup_r+0x1e>
 8002728:	0758      	lsls	r0, r3, #29
 800272a:	d512      	bpl.n	8002752 <__swsetup_r+0x7a>
 800272c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800272e:	b141      	cbz	r1, 8002742 <__swsetup_r+0x6a>
 8002730:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002734:	4299      	cmp	r1, r3
 8002736:	d002      	beq.n	800273e <__swsetup_r+0x66>
 8002738:	4630      	mov	r0, r6
 800273a:	f000 fa57 	bl	8002bec <_free_r>
 800273e:	2300      	movs	r3, #0
 8002740:	6363      	str	r3, [r4, #52]	; 0x34
 8002742:	89a3      	ldrh	r3, [r4, #12]
 8002744:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002748:	81a3      	strh	r3, [r4, #12]
 800274a:	2300      	movs	r3, #0
 800274c:	6063      	str	r3, [r4, #4]
 800274e:	6923      	ldr	r3, [r4, #16]
 8002750:	6023      	str	r3, [r4, #0]
 8002752:	89a3      	ldrh	r3, [r4, #12]
 8002754:	f043 0308 	orr.w	r3, r3, #8
 8002758:	81a3      	strh	r3, [r4, #12]
 800275a:	6923      	ldr	r3, [r4, #16]
 800275c:	b94b      	cbnz	r3, 8002772 <__swsetup_r+0x9a>
 800275e:	89a3      	ldrh	r3, [r4, #12]
 8002760:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002764:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002768:	d003      	beq.n	8002772 <__swsetup_r+0x9a>
 800276a:	4621      	mov	r1, r4
 800276c:	4630      	mov	r0, r6
 800276e:	f000 f9fd 	bl	8002b6c <__smakebuf_r>
 8002772:	89a0      	ldrh	r0, [r4, #12]
 8002774:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002778:	f010 0301 	ands.w	r3, r0, #1
 800277c:	d00a      	beq.n	8002794 <__swsetup_r+0xbc>
 800277e:	2300      	movs	r3, #0
 8002780:	60a3      	str	r3, [r4, #8]
 8002782:	6963      	ldr	r3, [r4, #20]
 8002784:	425b      	negs	r3, r3
 8002786:	61a3      	str	r3, [r4, #24]
 8002788:	6923      	ldr	r3, [r4, #16]
 800278a:	b943      	cbnz	r3, 800279e <__swsetup_r+0xc6>
 800278c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002790:	d1ba      	bne.n	8002708 <__swsetup_r+0x30>
 8002792:	bd70      	pop	{r4, r5, r6, pc}
 8002794:	0781      	lsls	r1, r0, #30
 8002796:	bf58      	it	pl
 8002798:	6963      	ldrpl	r3, [r4, #20]
 800279a:	60a3      	str	r3, [r4, #8]
 800279c:	e7f4      	b.n	8002788 <__swsetup_r+0xb0>
 800279e:	2000      	movs	r0, #0
 80027a0:	e7f7      	b.n	8002792 <__swsetup_r+0xba>
 80027a2:	bf00      	nop
 80027a4:	2000000c 	.word	0x2000000c
 80027a8:	08003638 	.word	0x08003638
 80027ac:	08003658 	.word	0x08003658
 80027b0:	08003618 	.word	0x08003618

080027b4 <__sflush_r>:
 80027b4:	898a      	ldrh	r2, [r1, #12]
 80027b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027b8:	4605      	mov	r5, r0
 80027ba:	0710      	lsls	r0, r2, #28
 80027bc:	460c      	mov	r4, r1
 80027be:	d457      	bmi.n	8002870 <__sflush_r+0xbc>
 80027c0:	684b      	ldr	r3, [r1, #4]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	dc04      	bgt.n	80027d0 <__sflush_r+0x1c>
 80027c6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	dc01      	bgt.n	80027d0 <__sflush_r+0x1c>
 80027cc:	2000      	movs	r0, #0
 80027ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80027d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80027d2:	2e00      	cmp	r6, #0
 80027d4:	d0fa      	beq.n	80027cc <__sflush_r+0x18>
 80027d6:	2300      	movs	r3, #0
 80027d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80027dc:	682f      	ldr	r7, [r5, #0]
 80027de:	602b      	str	r3, [r5, #0]
 80027e0:	d032      	beq.n	8002848 <__sflush_r+0x94>
 80027e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80027e4:	89a3      	ldrh	r3, [r4, #12]
 80027e6:	075a      	lsls	r2, r3, #29
 80027e8:	d505      	bpl.n	80027f6 <__sflush_r+0x42>
 80027ea:	6863      	ldr	r3, [r4, #4]
 80027ec:	1ac0      	subs	r0, r0, r3
 80027ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80027f0:	b10b      	cbz	r3, 80027f6 <__sflush_r+0x42>
 80027f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80027f4:	1ac0      	subs	r0, r0, r3
 80027f6:	2300      	movs	r3, #0
 80027f8:	4602      	mov	r2, r0
 80027fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80027fc:	4628      	mov	r0, r5
 80027fe:	6a21      	ldr	r1, [r4, #32]
 8002800:	47b0      	blx	r6
 8002802:	1c43      	adds	r3, r0, #1
 8002804:	89a3      	ldrh	r3, [r4, #12]
 8002806:	d106      	bne.n	8002816 <__sflush_r+0x62>
 8002808:	6829      	ldr	r1, [r5, #0]
 800280a:	291d      	cmp	r1, #29
 800280c:	d82c      	bhi.n	8002868 <__sflush_r+0xb4>
 800280e:	4a29      	ldr	r2, [pc, #164]	; (80028b4 <__sflush_r+0x100>)
 8002810:	40ca      	lsrs	r2, r1
 8002812:	07d6      	lsls	r6, r2, #31
 8002814:	d528      	bpl.n	8002868 <__sflush_r+0xb4>
 8002816:	2200      	movs	r2, #0
 8002818:	6062      	str	r2, [r4, #4]
 800281a:	6922      	ldr	r2, [r4, #16]
 800281c:	04d9      	lsls	r1, r3, #19
 800281e:	6022      	str	r2, [r4, #0]
 8002820:	d504      	bpl.n	800282c <__sflush_r+0x78>
 8002822:	1c42      	adds	r2, r0, #1
 8002824:	d101      	bne.n	800282a <__sflush_r+0x76>
 8002826:	682b      	ldr	r3, [r5, #0]
 8002828:	b903      	cbnz	r3, 800282c <__sflush_r+0x78>
 800282a:	6560      	str	r0, [r4, #84]	; 0x54
 800282c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800282e:	602f      	str	r7, [r5, #0]
 8002830:	2900      	cmp	r1, #0
 8002832:	d0cb      	beq.n	80027cc <__sflush_r+0x18>
 8002834:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002838:	4299      	cmp	r1, r3
 800283a:	d002      	beq.n	8002842 <__sflush_r+0x8e>
 800283c:	4628      	mov	r0, r5
 800283e:	f000 f9d5 	bl	8002bec <_free_r>
 8002842:	2000      	movs	r0, #0
 8002844:	6360      	str	r0, [r4, #52]	; 0x34
 8002846:	e7c2      	b.n	80027ce <__sflush_r+0x1a>
 8002848:	6a21      	ldr	r1, [r4, #32]
 800284a:	2301      	movs	r3, #1
 800284c:	4628      	mov	r0, r5
 800284e:	47b0      	blx	r6
 8002850:	1c41      	adds	r1, r0, #1
 8002852:	d1c7      	bne.n	80027e4 <__sflush_r+0x30>
 8002854:	682b      	ldr	r3, [r5, #0]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d0c4      	beq.n	80027e4 <__sflush_r+0x30>
 800285a:	2b1d      	cmp	r3, #29
 800285c:	d001      	beq.n	8002862 <__sflush_r+0xae>
 800285e:	2b16      	cmp	r3, #22
 8002860:	d101      	bne.n	8002866 <__sflush_r+0xb2>
 8002862:	602f      	str	r7, [r5, #0]
 8002864:	e7b2      	b.n	80027cc <__sflush_r+0x18>
 8002866:	89a3      	ldrh	r3, [r4, #12]
 8002868:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800286c:	81a3      	strh	r3, [r4, #12]
 800286e:	e7ae      	b.n	80027ce <__sflush_r+0x1a>
 8002870:	690f      	ldr	r7, [r1, #16]
 8002872:	2f00      	cmp	r7, #0
 8002874:	d0aa      	beq.n	80027cc <__sflush_r+0x18>
 8002876:	0793      	lsls	r3, r2, #30
 8002878:	bf18      	it	ne
 800287a:	2300      	movne	r3, #0
 800287c:	680e      	ldr	r6, [r1, #0]
 800287e:	bf08      	it	eq
 8002880:	694b      	ldreq	r3, [r1, #20]
 8002882:	1bf6      	subs	r6, r6, r7
 8002884:	600f      	str	r7, [r1, #0]
 8002886:	608b      	str	r3, [r1, #8]
 8002888:	2e00      	cmp	r6, #0
 800288a:	dd9f      	ble.n	80027cc <__sflush_r+0x18>
 800288c:	4633      	mov	r3, r6
 800288e:	463a      	mov	r2, r7
 8002890:	4628      	mov	r0, r5
 8002892:	6a21      	ldr	r1, [r4, #32]
 8002894:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8002898:	47e0      	blx	ip
 800289a:	2800      	cmp	r0, #0
 800289c:	dc06      	bgt.n	80028ac <__sflush_r+0xf8>
 800289e:	89a3      	ldrh	r3, [r4, #12]
 80028a0:	f04f 30ff 	mov.w	r0, #4294967295
 80028a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028a8:	81a3      	strh	r3, [r4, #12]
 80028aa:	e790      	b.n	80027ce <__sflush_r+0x1a>
 80028ac:	4407      	add	r7, r0
 80028ae:	1a36      	subs	r6, r6, r0
 80028b0:	e7ea      	b.n	8002888 <__sflush_r+0xd4>
 80028b2:	bf00      	nop
 80028b4:	20400001 	.word	0x20400001

080028b8 <_fflush_r>:
 80028b8:	b538      	push	{r3, r4, r5, lr}
 80028ba:	690b      	ldr	r3, [r1, #16]
 80028bc:	4605      	mov	r5, r0
 80028be:	460c      	mov	r4, r1
 80028c0:	b913      	cbnz	r3, 80028c8 <_fflush_r+0x10>
 80028c2:	2500      	movs	r5, #0
 80028c4:	4628      	mov	r0, r5
 80028c6:	bd38      	pop	{r3, r4, r5, pc}
 80028c8:	b118      	cbz	r0, 80028d2 <_fflush_r+0x1a>
 80028ca:	6983      	ldr	r3, [r0, #24]
 80028cc:	b90b      	cbnz	r3, 80028d2 <_fflush_r+0x1a>
 80028ce:	f000 f887 	bl	80029e0 <__sinit>
 80028d2:	4b14      	ldr	r3, [pc, #80]	; (8002924 <_fflush_r+0x6c>)
 80028d4:	429c      	cmp	r4, r3
 80028d6:	d11b      	bne.n	8002910 <_fflush_r+0x58>
 80028d8:	686c      	ldr	r4, [r5, #4]
 80028da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d0ef      	beq.n	80028c2 <_fflush_r+0xa>
 80028e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80028e4:	07d0      	lsls	r0, r2, #31
 80028e6:	d404      	bmi.n	80028f2 <_fflush_r+0x3a>
 80028e8:	0599      	lsls	r1, r3, #22
 80028ea:	d402      	bmi.n	80028f2 <_fflush_r+0x3a>
 80028ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80028ee:	f000 f915 	bl	8002b1c <__retarget_lock_acquire_recursive>
 80028f2:	4628      	mov	r0, r5
 80028f4:	4621      	mov	r1, r4
 80028f6:	f7ff ff5d 	bl	80027b4 <__sflush_r>
 80028fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80028fc:	4605      	mov	r5, r0
 80028fe:	07da      	lsls	r2, r3, #31
 8002900:	d4e0      	bmi.n	80028c4 <_fflush_r+0xc>
 8002902:	89a3      	ldrh	r3, [r4, #12]
 8002904:	059b      	lsls	r3, r3, #22
 8002906:	d4dd      	bmi.n	80028c4 <_fflush_r+0xc>
 8002908:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800290a:	f000 f908 	bl	8002b1e <__retarget_lock_release_recursive>
 800290e:	e7d9      	b.n	80028c4 <_fflush_r+0xc>
 8002910:	4b05      	ldr	r3, [pc, #20]	; (8002928 <_fflush_r+0x70>)
 8002912:	429c      	cmp	r4, r3
 8002914:	d101      	bne.n	800291a <_fflush_r+0x62>
 8002916:	68ac      	ldr	r4, [r5, #8]
 8002918:	e7df      	b.n	80028da <_fflush_r+0x22>
 800291a:	4b04      	ldr	r3, [pc, #16]	; (800292c <_fflush_r+0x74>)
 800291c:	429c      	cmp	r4, r3
 800291e:	bf08      	it	eq
 8002920:	68ec      	ldreq	r4, [r5, #12]
 8002922:	e7da      	b.n	80028da <_fflush_r+0x22>
 8002924:	08003638 	.word	0x08003638
 8002928:	08003658 	.word	0x08003658
 800292c:	08003618 	.word	0x08003618

08002930 <std>:
 8002930:	2300      	movs	r3, #0
 8002932:	b510      	push	{r4, lr}
 8002934:	4604      	mov	r4, r0
 8002936:	e9c0 3300 	strd	r3, r3, [r0]
 800293a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800293e:	6083      	str	r3, [r0, #8]
 8002940:	8181      	strh	r1, [r0, #12]
 8002942:	6643      	str	r3, [r0, #100]	; 0x64
 8002944:	81c2      	strh	r2, [r0, #14]
 8002946:	6183      	str	r3, [r0, #24]
 8002948:	4619      	mov	r1, r3
 800294a:	2208      	movs	r2, #8
 800294c:	305c      	adds	r0, #92	; 0x5c
 800294e:	f7ff fddb 	bl	8002508 <memset>
 8002952:	4b05      	ldr	r3, [pc, #20]	; (8002968 <std+0x38>)
 8002954:	6224      	str	r4, [r4, #32]
 8002956:	6263      	str	r3, [r4, #36]	; 0x24
 8002958:	4b04      	ldr	r3, [pc, #16]	; (800296c <std+0x3c>)
 800295a:	62a3      	str	r3, [r4, #40]	; 0x28
 800295c:	4b04      	ldr	r3, [pc, #16]	; (8002970 <std+0x40>)
 800295e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002960:	4b04      	ldr	r3, [pc, #16]	; (8002974 <std+0x44>)
 8002962:	6323      	str	r3, [r4, #48]	; 0x30
 8002964:	bd10      	pop	{r4, pc}
 8002966:	bf00      	nop
 8002968:	080033a1 	.word	0x080033a1
 800296c:	080033c3 	.word	0x080033c3
 8002970:	080033fb 	.word	0x080033fb
 8002974:	0800341f 	.word	0x0800341f

08002978 <_cleanup_r>:
 8002978:	4901      	ldr	r1, [pc, #4]	; (8002980 <_cleanup_r+0x8>)
 800297a:	f000 b8af 	b.w	8002adc <_fwalk_reent>
 800297e:	bf00      	nop
 8002980:	080028b9 	.word	0x080028b9

08002984 <__sfmoreglue>:
 8002984:	2268      	movs	r2, #104	; 0x68
 8002986:	b570      	push	{r4, r5, r6, lr}
 8002988:	1e4d      	subs	r5, r1, #1
 800298a:	4355      	muls	r5, r2
 800298c:	460e      	mov	r6, r1
 800298e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002992:	f000 f993 	bl	8002cbc <_malloc_r>
 8002996:	4604      	mov	r4, r0
 8002998:	b140      	cbz	r0, 80029ac <__sfmoreglue+0x28>
 800299a:	2100      	movs	r1, #0
 800299c:	e9c0 1600 	strd	r1, r6, [r0]
 80029a0:	300c      	adds	r0, #12
 80029a2:	60a0      	str	r0, [r4, #8]
 80029a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80029a8:	f7ff fdae 	bl	8002508 <memset>
 80029ac:	4620      	mov	r0, r4
 80029ae:	bd70      	pop	{r4, r5, r6, pc}

080029b0 <__sfp_lock_acquire>:
 80029b0:	4801      	ldr	r0, [pc, #4]	; (80029b8 <__sfp_lock_acquire+0x8>)
 80029b2:	f000 b8b3 	b.w	8002b1c <__retarget_lock_acquire_recursive>
 80029b6:	bf00      	nop
 80029b8:	2000014d 	.word	0x2000014d

080029bc <__sfp_lock_release>:
 80029bc:	4801      	ldr	r0, [pc, #4]	; (80029c4 <__sfp_lock_release+0x8>)
 80029be:	f000 b8ae 	b.w	8002b1e <__retarget_lock_release_recursive>
 80029c2:	bf00      	nop
 80029c4:	2000014d 	.word	0x2000014d

080029c8 <__sinit_lock_acquire>:
 80029c8:	4801      	ldr	r0, [pc, #4]	; (80029d0 <__sinit_lock_acquire+0x8>)
 80029ca:	f000 b8a7 	b.w	8002b1c <__retarget_lock_acquire_recursive>
 80029ce:	bf00      	nop
 80029d0:	2000014e 	.word	0x2000014e

080029d4 <__sinit_lock_release>:
 80029d4:	4801      	ldr	r0, [pc, #4]	; (80029dc <__sinit_lock_release+0x8>)
 80029d6:	f000 b8a2 	b.w	8002b1e <__retarget_lock_release_recursive>
 80029da:	bf00      	nop
 80029dc:	2000014e 	.word	0x2000014e

080029e0 <__sinit>:
 80029e0:	b510      	push	{r4, lr}
 80029e2:	4604      	mov	r4, r0
 80029e4:	f7ff fff0 	bl	80029c8 <__sinit_lock_acquire>
 80029e8:	69a3      	ldr	r3, [r4, #24]
 80029ea:	b11b      	cbz	r3, 80029f4 <__sinit+0x14>
 80029ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80029f0:	f7ff bff0 	b.w	80029d4 <__sinit_lock_release>
 80029f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80029f8:	6523      	str	r3, [r4, #80]	; 0x50
 80029fa:	4b13      	ldr	r3, [pc, #76]	; (8002a48 <__sinit+0x68>)
 80029fc:	4a13      	ldr	r2, [pc, #76]	; (8002a4c <__sinit+0x6c>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	62a2      	str	r2, [r4, #40]	; 0x28
 8002a02:	42a3      	cmp	r3, r4
 8002a04:	bf08      	it	eq
 8002a06:	2301      	moveq	r3, #1
 8002a08:	4620      	mov	r0, r4
 8002a0a:	bf08      	it	eq
 8002a0c:	61a3      	streq	r3, [r4, #24]
 8002a0e:	f000 f81f 	bl	8002a50 <__sfp>
 8002a12:	6060      	str	r0, [r4, #4]
 8002a14:	4620      	mov	r0, r4
 8002a16:	f000 f81b 	bl	8002a50 <__sfp>
 8002a1a:	60a0      	str	r0, [r4, #8]
 8002a1c:	4620      	mov	r0, r4
 8002a1e:	f000 f817 	bl	8002a50 <__sfp>
 8002a22:	2200      	movs	r2, #0
 8002a24:	2104      	movs	r1, #4
 8002a26:	60e0      	str	r0, [r4, #12]
 8002a28:	6860      	ldr	r0, [r4, #4]
 8002a2a:	f7ff ff81 	bl	8002930 <std>
 8002a2e:	2201      	movs	r2, #1
 8002a30:	2109      	movs	r1, #9
 8002a32:	68a0      	ldr	r0, [r4, #8]
 8002a34:	f7ff ff7c 	bl	8002930 <std>
 8002a38:	2202      	movs	r2, #2
 8002a3a:	2112      	movs	r1, #18
 8002a3c:	68e0      	ldr	r0, [r4, #12]
 8002a3e:	f7ff ff77 	bl	8002930 <std>
 8002a42:	2301      	movs	r3, #1
 8002a44:	61a3      	str	r3, [r4, #24]
 8002a46:	e7d1      	b.n	80029ec <__sinit+0xc>
 8002a48:	08003614 	.word	0x08003614
 8002a4c:	08002979 	.word	0x08002979

08002a50 <__sfp>:
 8002a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a52:	4607      	mov	r7, r0
 8002a54:	f7ff ffac 	bl	80029b0 <__sfp_lock_acquire>
 8002a58:	4b1e      	ldr	r3, [pc, #120]	; (8002ad4 <__sfp+0x84>)
 8002a5a:	681e      	ldr	r6, [r3, #0]
 8002a5c:	69b3      	ldr	r3, [r6, #24]
 8002a5e:	b913      	cbnz	r3, 8002a66 <__sfp+0x16>
 8002a60:	4630      	mov	r0, r6
 8002a62:	f7ff ffbd 	bl	80029e0 <__sinit>
 8002a66:	3648      	adds	r6, #72	; 0x48
 8002a68:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002a6c:	3b01      	subs	r3, #1
 8002a6e:	d503      	bpl.n	8002a78 <__sfp+0x28>
 8002a70:	6833      	ldr	r3, [r6, #0]
 8002a72:	b30b      	cbz	r3, 8002ab8 <__sfp+0x68>
 8002a74:	6836      	ldr	r6, [r6, #0]
 8002a76:	e7f7      	b.n	8002a68 <__sfp+0x18>
 8002a78:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002a7c:	b9d5      	cbnz	r5, 8002ab4 <__sfp+0x64>
 8002a7e:	4b16      	ldr	r3, [pc, #88]	; (8002ad8 <__sfp+0x88>)
 8002a80:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002a84:	60e3      	str	r3, [r4, #12]
 8002a86:	6665      	str	r5, [r4, #100]	; 0x64
 8002a88:	f000 f847 	bl	8002b1a <__retarget_lock_init_recursive>
 8002a8c:	f7ff ff96 	bl	80029bc <__sfp_lock_release>
 8002a90:	2208      	movs	r2, #8
 8002a92:	4629      	mov	r1, r5
 8002a94:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002a98:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002a9c:	6025      	str	r5, [r4, #0]
 8002a9e:	61a5      	str	r5, [r4, #24]
 8002aa0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002aa4:	f7ff fd30 	bl	8002508 <memset>
 8002aa8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002aac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002ab0:	4620      	mov	r0, r4
 8002ab2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ab4:	3468      	adds	r4, #104	; 0x68
 8002ab6:	e7d9      	b.n	8002a6c <__sfp+0x1c>
 8002ab8:	2104      	movs	r1, #4
 8002aba:	4638      	mov	r0, r7
 8002abc:	f7ff ff62 	bl	8002984 <__sfmoreglue>
 8002ac0:	4604      	mov	r4, r0
 8002ac2:	6030      	str	r0, [r6, #0]
 8002ac4:	2800      	cmp	r0, #0
 8002ac6:	d1d5      	bne.n	8002a74 <__sfp+0x24>
 8002ac8:	f7ff ff78 	bl	80029bc <__sfp_lock_release>
 8002acc:	230c      	movs	r3, #12
 8002ace:	603b      	str	r3, [r7, #0]
 8002ad0:	e7ee      	b.n	8002ab0 <__sfp+0x60>
 8002ad2:	bf00      	nop
 8002ad4:	08003614 	.word	0x08003614
 8002ad8:	ffff0001 	.word	0xffff0001

08002adc <_fwalk_reent>:
 8002adc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002ae0:	4606      	mov	r6, r0
 8002ae2:	4688      	mov	r8, r1
 8002ae4:	2700      	movs	r7, #0
 8002ae6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002aea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002aee:	f1b9 0901 	subs.w	r9, r9, #1
 8002af2:	d505      	bpl.n	8002b00 <_fwalk_reent+0x24>
 8002af4:	6824      	ldr	r4, [r4, #0]
 8002af6:	2c00      	cmp	r4, #0
 8002af8:	d1f7      	bne.n	8002aea <_fwalk_reent+0xe>
 8002afa:	4638      	mov	r0, r7
 8002afc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002b00:	89ab      	ldrh	r3, [r5, #12]
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d907      	bls.n	8002b16 <_fwalk_reent+0x3a>
 8002b06:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	d003      	beq.n	8002b16 <_fwalk_reent+0x3a>
 8002b0e:	4629      	mov	r1, r5
 8002b10:	4630      	mov	r0, r6
 8002b12:	47c0      	blx	r8
 8002b14:	4307      	orrs	r7, r0
 8002b16:	3568      	adds	r5, #104	; 0x68
 8002b18:	e7e9      	b.n	8002aee <_fwalk_reent+0x12>

08002b1a <__retarget_lock_init_recursive>:
 8002b1a:	4770      	bx	lr

08002b1c <__retarget_lock_acquire_recursive>:
 8002b1c:	4770      	bx	lr

08002b1e <__retarget_lock_release_recursive>:
 8002b1e:	4770      	bx	lr

08002b20 <__swhatbuf_r>:
 8002b20:	b570      	push	{r4, r5, r6, lr}
 8002b22:	460e      	mov	r6, r1
 8002b24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b28:	4614      	mov	r4, r2
 8002b2a:	2900      	cmp	r1, #0
 8002b2c:	461d      	mov	r5, r3
 8002b2e:	b096      	sub	sp, #88	; 0x58
 8002b30:	da08      	bge.n	8002b44 <__swhatbuf_r+0x24>
 8002b32:	2200      	movs	r2, #0
 8002b34:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8002b38:	602a      	str	r2, [r5, #0]
 8002b3a:	061a      	lsls	r2, r3, #24
 8002b3c:	d410      	bmi.n	8002b60 <__swhatbuf_r+0x40>
 8002b3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b42:	e00e      	b.n	8002b62 <__swhatbuf_r+0x42>
 8002b44:	466a      	mov	r2, sp
 8002b46:	f000 fc91 	bl	800346c <_fstat_r>
 8002b4a:	2800      	cmp	r0, #0
 8002b4c:	dbf1      	blt.n	8002b32 <__swhatbuf_r+0x12>
 8002b4e:	9a01      	ldr	r2, [sp, #4]
 8002b50:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002b54:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002b58:	425a      	negs	r2, r3
 8002b5a:	415a      	adcs	r2, r3
 8002b5c:	602a      	str	r2, [r5, #0]
 8002b5e:	e7ee      	b.n	8002b3e <__swhatbuf_r+0x1e>
 8002b60:	2340      	movs	r3, #64	; 0x40
 8002b62:	2000      	movs	r0, #0
 8002b64:	6023      	str	r3, [r4, #0]
 8002b66:	b016      	add	sp, #88	; 0x58
 8002b68:	bd70      	pop	{r4, r5, r6, pc}
	...

08002b6c <__smakebuf_r>:
 8002b6c:	898b      	ldrh	r3, [r1, #12]
 8002b6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002b70:	079d      	lsls	r5, r3, #30
 8002b72:	4606      	mov	r6, r0
 8002b74:	460c      	mov	r4, r1
 8002b76:	d507      	bpl.n	8002b88 <__smakebuf_r+0x1c>
 8002b78:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002b7c:	6023      	str	r3, [r4, #0]
 8002b7e:	6123      	str	r3, [r4, #16]
 8002b80:	2301      	movs	r3, #1
 8002b82:	6163      	str	r3, [r4, #20]
 8002b84:	b002      	add	sp, #8
 8002b86:	bd70      	pop	{r4, r5, r6, pc}
 8002b88:	466a      	mov	r2, sp
 8002b8a:	ab01      	add	r3, sp, #4
 8002b8c:	f7ff ffc8 	bl	8002b20 <__swhatbuf_r>
 8002b90:	9900      	ldr	r1, [sp, #0]
 8002b92:	4605      	mov	r5, r0
 8002b94:	4630      	mov	r0, r6
 8002b96:	f000 f891 	bl	8002cbc <_malloc_r>
 8002b9a:	b948      	cbnz	r0, 8002bb0 <__smakebuf_r+0x44>
 8002b9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002ba0:	059a      	lsls	r2, r3, #22
 8002ba2:	d4ef      	bmi.n	8002b84 <__smakebuf_r+0x18>
 8002ba4:	f023 0303 	bic.w	r3, r3, #3
 8002ba8:	f043 0302 	orr.w	r3, r3, #2
 8002bac:	81a3      	strh	r3, [r4, #12]
 8002bae:	e7e3      	b.n	8002b78 <__smakebuf_r+0xc>
 8002bb0:	4b0d      	ldr	r3, [pc, #52]	; (8002be8 <__smakebuf_r+0x7c>)
 8002bb2:	62b3      	str	r3, [r6, #40]	; 0x28
 8002bb4:	89a3      	ldrh	r3, [r4, #12]
 8002bb6:	6020      	str	r0, [r4, #0]
 8002bb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bbc:	81a3      	strh	r3, [r4, #12]
 8002bbe:	9b00      	ldr	r3, [sp, #0]
 8002bc0:	6120      	str	r0, [r4, #16]
 8002bc2:	6163      	str	r3, [r4, #20]
 8002bc4:	9b01      	ldr	r3, [sp, #4]
 8002bc6:	b15b      	cbz	r3, 8002be0 <__smakebuf_r+0x74>
 8002bc8:	4630      	mov	r0, r6
 8002bca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002bce:	f000 fc5f 	bl	8003490 <_isatty_r>
 8002bd2:	b128      	cbz	r0, 8002be0 <__smakebuf_r+0x74>
 8002bd4:	89a3      	ldrh	r3, [r4, #12]
 8002bd6:	f023 0303 	bic.w	r3, r3, #3
 8002bda:	f043 0301 	orr.w	r3, r3, #1
 8002bde:	81a3      	strh	r3, [r4, #12]
 8002be0:	89a0      	ldrh	r0, [r4, #12]
 8002be2:	4305      	orrs	r5, r0
 8002be4:	81a5      	strh	r5, [r4, #12]
 8002be6:	e7cd      	b.n	8002b84 <__smakebuf_r+0x18>
 8002be8:	08002979 	.word	0x08002979

08002bec <_free_r>:
 8002bec:	b538      	push	{r3, r4, r5, lr}
 8002bee:	4605      	mov	r5, r0
 8002bf0:	2900      	cmp	r1, #0
 8002bf2:	d040      	beq.n	8002c76 <_free_r+0x8a>
 8002bf4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002bf8:	1f0c      	subs	r4, r1, #4
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	bfb8      	it	lt
 8002bfe:	18e4      	addlt	r4, r4, r3
 8002c00:	f000 fc76 	bl	80034f0 <__malloc_lock>
 8002c04:	4a1c      	ldr	r2, [pc, #112]	; (8002c78 <_free_r+0x8c>)
 8002c06:	6813      	ldr	r3, [r2, #0]
 8002c08:	b933      	cbnz	r3, 8002c18 <_free_r+0x2c>
 8002c0a:	6063      	str	r3, [r4, #4]
 8002c0c:	6014      	str	r4, [r2, #0]
 8002c0e:	4628      	mov	r0, r5
 8002c10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002c14:	f000 bc72 	b.w	80034fc <__malloc_unlock>
 8002c18:	42a3      	cmp	r3, r4
 8002c1a:	d908      	bls.n	8002c2e <_free_r+0x42>
 8002c1c:	6820      	ldr	r0, [r4, #0]
 8002c1e:	1821      	adds	r1, r4, r0
 8002c20:	428b      	cmp	r3, r1
 8002c22:	bf01      	itttt	eq
 8002c24:	6819      	ldreq	r1, [r3, #0]
 8002c26:	685b      	ldreq	r3, [r3, #4]
 8002c28:	1809      	addeq	r1, r1, r0
 8002c2a:	6021      	streq	r1, [r4, #0]
 8002c2c:	e7ed      	b.n	8002c0a <_free_r+0x1e>
 8002c2e:	461a      	mov	r2, r3
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	b10b      	cbz	r3, 8002c38 <_free_r+0x4c>
 8002c34:	42a3      	cmp	r3, r4
 8002c36:	d9fa      	bls.n	8002c2e <_free_r+0x42>
 8002c38:	6811      	ldr	r1, [r2, #0]
 8002c3a:	1850      	adds	r0, r2, r1
 8002c3c:	42a0      	cmp	r0, r4
 8002c3e:	d10b      	bne.n	8002c58 <_free_r+0x6c>
 8002c40:	6820      	ldr	r0, [r4, #0]
 8002c42:	4401      	add	r1, r0
 8002c44:	1850      	adds	r0, r2, r1
 8002c46:	4283      	cmp	r3, r0
 8002c48:	6011      	str	r1, [r2, #0]
 8002c4a:	d1e0      	bne.n	8002c0e <_free_r+0x22>
 8002c4c:	6818      	ldr	r0, [r3, #0]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	4401      	add	r1, r0
 8002c52:	6011      	str	r1, [r2, #0]
 8002c54:	6053      	str	r3, [r2, #4]
 8002c56:	e7da      	b.n	8002c0e <_free_r+0x22>
 8002c58:	d902      	bls.n	8002c60 <_free_r+0x74>
 8002c5a:	230c      	movs	r3, #12
 8002c5c:	602b      	str	r3, [r5, #0]
 8002c5e:	e7d6      	b.n	8002c0e <_free_r+0x22>
 8002c60:	6820      	ldr	r0, [r4, #0]
 8002c62:	1821      	adds	r1, r4, r0
 8002c64:	428b      	cmp	r3, r1
 8002c66:	bf01      	itttt	eq
 8002c68:	6819      	ldreq	r1, [r3, #0]
 8002c6a:	685b      	ldreq	r3, [r3, #4]
 8002c6c:	1809      	addeq	r1, r1, r0
 8002c6e:	6021      	streq	r1, [r4, #0]
 8002c70:	6063      	str	r3, [r4, #4]
 8002c72:	6054      	str	r4, [r2, #4]
 8002c74:	e7cb      	b.n	8002c0e <_free_r+0x22>
 8002c76:	bd38      	pop	{r3, r4, r5, pc}
 8002c78:	20000150 	.word	0x20000150

08002c7c <sbrk_aligned>:
 8002c7c:	b570      	push	{r4, r5, r6, lr}
 8002c7e:	4e0e      	ldr	r6, [pc, #56]	; (8002cb8 <sbrk_aligned+0x3c>)
 8002c80:	460c      	mov	r4, r1
 8002c82:	6831      	ldr	r1, [r6, #0]
 8002c84:	4605      	mov	r5, r0
 8002c86:	b911      	cbnz	r1, 8002c8e <sbrk_aligned+0x12>
 8002c88:	f000 fb7a 	bl	8003380 <_sbrk_r>
 8002c8c:	6030      	str	r0, [r6, #0]
 8002c8e:	4621      	mov	r1, r4
 8002c90:	4628      	mov	r0, r5
 8002c92:	f000 fb75 	bl	8003380 <_sbrk_r>
 8002c96:	1c43      	adds	r3, r0, #1
 8002c98:	d00a      	beq.n	8002cb0 <sbrk_aligned+0x34>
 8002c9a:	1cc4      	adds	r4, r0, #3
 8002c9c:	f024 0403 	bic.w	r4, r4, #3
 8002ca0:	42a0      	cmp	r0, r4
 8002ca2:	d007      	beq.n	8002cb4 <sbrk_aligned+0x38>
 8002ca4:	1a21      	subs	r1, r4, r0
 8002ca6:	4628      	mov	r0, r5
 8002ca8:	f000 fb6a 	bl	8003380 <_sbrk_r>
 8002cac:	3001      	adds	r0, #1
 8002cae:	d101      	bne.n	8002cb4 <sbrk_aligned+0x38>
 8002cb0:	f04f 34ff 	mov.w	r4, #4294967295
 8002cb4:	4620      	mov	r0, r4
 8002cb6:	bd70      	pop	{r4, r5, r6, pc}
 8002cb8:	20000154 	.word	0x20000154

08002cbc <_malloc_r>:
 8002cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002cc0:	1ccd      	adds	r5, r1, #3
 8002cc2:	f025 0503 	bic.w	r5, r5, #3
 8002cc6:	3508      	adds	r5, #8
 8002cc8:	2d0c      	cmp	r5, #12
 8002cca:	bf38      	it	cc
 8002ccc:	250c      	movcc	r5, #12
 8002cce:	2d00      	cmp	r5, #0
 8002cd0:	4607      	mov	r7, r0
 8002cd2:	db01      	blt.n	8002cd8 <_malloc_r+0x1c>
 8002cd4:	42a9      	cmp	r1, r5
 8002cd6:	d905      	bls.n	8002ce4 <_malloc_r+0x28>
 8002cd8:	230c      	movs	r3, #12
 8002cda:	2600      	movs	r6, #0
 8002cdc:	603b      	str	r3, [r7, #0]
 8002cde:	4630      	mov	r0, r6
 8002ce0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002ce4:	4e2e      	ldr	r6, [pc, #184]	; (8002da0 <_malloc_r+0xe4>)
 8002ce6:	f000 fc03 	bl	80034f0 <__malloc_lock>
 8002cea:	6833      	ldr	r3, [r6, #0]
 8002cec:	461c      	mov	r4, r3
 8002cee:	bb34      	cbnz	r4, 8002d3e <_malloc_r+0x82>
 8002cf0:	4629      	mov	r1, r5
 8002cf2:	4638      	mov	r0, r7
 8002cf4:	f7ff ffc2 	bl	8002c7c <sbrk_aligned>
 8002cf8:	1c43      	adds	r3, r0, #1
 8002cfa:	4604      	mov	r4, r0
 8002cfc:	d14d      	bne.n	8002d9a <_malloc_r+0xde>
 8002cfe:	6834      	ldr	r4, [r6, #0]
 8002d00:	4626      	mov	r6, r4
 8002d02:	2e00      	cmp	r6, #0
 8002d04:	d140      	bne.n	8002d88 <_malloc_r+0xcc>
 8002d06:	6823      	ldr	r3, [r4, #0]
 8002d08:	4631      	mov	r1, r6
 8002d0a:	4638      	mov	r0, r7
 8002d0c:	eb04 0803 	add.w	r8, r4, r3
 8002d10:	f000 fb36 	bl	8003380 <_sbrk_r>
 8002d14:	4580      	cmp	r8, r0
 8002d16:	d13a      	bne.n	8002d8e <_malloc_r+0xd2>
 8002d18:	6821      	ldr	r1, [r4, #0]
 8002d1a:	3503      	adds	r5, #3
 8002d1c:	1a6d      	subs	r5, r5, r1
 8002d1e:	f025 0503 	bic.w	r5, r5, #3
 8002d22:	3508      	adds	r5, #8
 8002d24:	2d0c      	cmp	r5, #12
 8002d26:	bf38      	it	cc
 8002d28:	250c      	movcc	r5, #12
 8002d2a:	4638      	mov	r0, r7
 8002d2c:	4629      	mov	r1, r5
 8002d2e:	f7ff ffa5 	bl	8002c7c <sbrk_aligned>
 8002d32:	3001      	adds	r0, #1
 8002d34:	d02b      	beq.n	8002d8e <_malloc_r+0xd2>
 8002d36:	6823      	ldr	r3, [r4, #0]
 8002d38:	442b      	add	r3, r5
 8002d3a:	6023      	str	r3, [r4, #0]
 8002d3c:	e00e      	b.n	8002d5c <_malloc_r+0xa0>
 8002d3e:	6822      	ldr	r2, [r4, #0]
 8002d40:	1b52      	subs	r2, r2, r5
 8002d42:	d41e      	bmi.n	8002d82 <_malloc_r+0xc6>
 8002d44:	2a0b      	cmp	r2, #11
 8002d46:	d916      	bls.n	8002d76 <_malloc_r+0xba>
 8002d48:	1961      	adds	r1, r4, r5
 8002d4a:	42a3      	cmp	r3, r4
 8002d4c:	6025      	str	r5, [r4, #0]
 8002d4e:	bf18      	it	ne
 8002d50:	6059      	strne	r1, [r3, #4]
 8002d52:	6863      	ldr	r3, [r4, #4]
 8002d54:	bf08      	it	eq
 8002d56:	6031      	streq	r1, [r6, #0]
 8002d58:	5162      	str	r2, [r4, r5]
 8002d5a:	604b      	str	r3, [r1, #4]
 8002d5c:	4638      	mov	r0, r7
 8002d5e:	f104 060b 	add.w	r6, r4, #11
 8002d62:	f000 fbcb 	bl	80034fc <__malloc_unlock>
 8002d66:	f026 0607 	bic.w	r6, r6, #7
 8002d6a:	1d23      	adds	r3, r4, #4
 8002d6c:	1af2      	subs	r2, r6, r3
 8002d6e:	d0b6      	beq.n	8002cde <_malloc_r+0x22>
 8002d70:	1b9b      	subs	r3, r3, r6
 8002d72:	50a3      	str	r3, [r4, r2]
 8002d74:	e7b3      	b.n	8002cde <_malloc_r+0x22>
 8002d76:	6862      	ldr	r2, [r4, #4]
 8002d78:	42a3      	cmp	r3, r4
 8002d7a:	bf0c      	ite	eq
 8002d7c:	6032      	streq	r2, [r6, #0]
 8002d7e:	605a      	strne	r2, [r3, #4]
 8002d80:	e7ec      	b.n	8002d5c <_malloc_r+0xa0>
 8002d82:	4623      	mov	r3, r4
 8002d84:	6864      	ldr	r4, [r4, #4]
 8002d86:	e7b2      	b.n	8002cee <_malloc_r+0x32>
 8002d88:	4634      	mov	r4, r6
 8002d8a:	6876      	ldr	r6, [r6, #4]
 8002d8c:	e7b9      	b.n	8002d02 <_malloc_r+0x46>
 8002d8e:	230c      	movs	r3, #12
 8002d90:	4638      	mov	r0, r7
 8002d92:	603b      	str	r3, [r7, #0]
 8002d94:	f000 fbb2 	bl	80034fc <__malloc_unlock>
 8002d98:	e7a1      	b.n	8002cde <_malloc_r+0x22>
 8002d9a:	6025      	str	r5, [r4, #0]
 8002d9c:	e7de      	b.n	8002d5c <_malloc_r+0xa0>
 8002d9e:	bf00      	nop
 8002da0:	20000150 	.word	0x20000150

08002da4 <__sfputc_r>:
 8002da4:	6893      	ldr	r3, [r2, #8]
 8002da6:	b410      	push	{r4}
 8002da8:	3b01      	subs	r3, #1
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	6093      	str	r3, [r2, #8]
 8002dae:	da07      	bge.n	8002dc0 <__sfputc_r+0x1c>
 8002db0:	6994      	ldr	r4, [r2, #24]
 8002db2:	42a3      	cmp	r3, r4
 8002db4:	db01      	blt.n	8002dba <__sfputc_r+0x16>
 8002db6:	290a      	cmp	r1, #10
 8002db8:	d102      	bne.n	8002dc0 <__sfputc_r+0x1c>
 8002dba:	bc10      	pop	{r4}
 8002dbc:	f7ff bc3a 	b.w	8002634 <__swbuf_r>
 8002dc0:	6813      	ldr	r3, [r2, #0]
 8002dc2:	1c58      	adds	r0, r3, #1
 8002dc4:	6010      	str	r0, [r2, #0]
 8002dc6:	7019      	strb	r1, [r3, #0]
 8002dc8:	4608      	mov	r0, r1
 8002dca:	bc10      	pop	{r4}
 8002dcc:	4770      	bx	lr

08002dce <__sfputs_r>:
 8002dce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dd0:	4606      	mov	r6, r0
 8002dd2:	460f      	mov	r7, r1
 8002dd4:	4614      	mov	r4, r2
 8002dd6:	18d5      	adds	r5, r2, r3
 8002dd8:	42ac      	cmp	r4, r5
 8002dda:	d101      	bne.n	8002de0 <__sfputs_r+0x12>
 8002ddc:	2000      	movs	r0, #0
 8002dde:	e007      	b.n	8002df0 <__sfputs_r+0x22>
 8002de0:	463a      	mov	r2, r7
 8002de2:	4630      	mov	r0, r6
 8002de4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002de8:	f7ff ffdc 	bl	8002da4 <__sfputc_r>
 8002dec:	1c43      	adds	r3, r0, #1
 8002dee:	d1f3      	bne.n	8002dd8 <__sfputs_r+0xa>
 8002df0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002df4 <_vfiprintf_r>:
 8002df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002df8:	460d      	mov	r5, r1
 8002dfa:	4614      	mov	r4, r2
 8002dfc:	4698      	mov	r8, r3
 8002dfe:	4606      	mov	r6, r0
 8002e00:	b09d      	sub	sp, #116	; 0x74
 8002e02:	b118      	cbz	r0, 8002e0c <_vfiprintf_r+0x18>
 8002e04:	6983      	ldr	r3, [r0, #24]
 8002e06:	b90b      	cbnz	r3, 8002e0c <_vfiprintf_r+0x18>
 8002e08:	f7ff fdea 	bl	80029e0 <__sinit>
 8002e0c:	4b89      	ldr	r3, [pc, #548]	; (8003034 <_vfiprintf_r+0x240>)
 8002e0e:	429d      	cmp	r5, r3
 8002e10:	d11b      	bne.n	8002e4a <_vfiprintf_r+0x56>
 8002e12:	6875      	ldr	r5, [r6, #4]
 8002e14:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002e16:	07d9      	lsls	r1, r3, #31
 8002e18:	d405      	bmi.n	8002e26 <_vfiprintf_r+0x32>
 8002e1a:	89ab      	ldrh	r3, [r5, #12]
 8002e1c:	059a      	lsls	r2, r3, #22
 8002e1e:	d402      	bmi.n	8002e26 <_vfiprintf_r+0x32>
 8002e20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002e22:	f7ff fe7b 	bl	8002b1c <__retarget_lock_acquire_recursive>
 8002e26:	89ab      	ldrh	r3, [r5, #12]
 8002e28:	071b      	lsls	r3, r3, #28
 8002e2a:	d501      	bpl.n	8002e30 <_vfiprintf_r+0x3c>
 8002e2c:	692b      	ldr	r3, [r5, #16]
 8002e2e:	b9eb      	cbnz	r3, 8002e6c <_vfiprintf_r+0x78>
 8002e30:	4629      	mov	r1, r5
 8002e32:	4630      	mov	r0, r6
 8002e34:	f7ff fc50 	bl	80026d8 <__swsetup_r>
 8002e38:	b1c0      	cbz	r0, 8002e6c <_vfiprintf_r+0x78>
 8002e3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002e3c:	07dc      	lsls	r4, r3, #31
 8002e3e:	d50e      	bpl.n	8002e5e <_vfiprintf_r+0x6a>
 8002e40:	f04f 30ff 	mov.w	r0, #4294967295
 8002e44:	b01d      	add	sp, #116	; 0x74
 8002e46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e4a:	4b7b      	ldr	r3, [pc, #492]	; (8003038 <_vfiprintf_r+0x244>)
 8002e4c:	429d      	cmp	r5, r3
 8002e4e:	d101      	bne.n	8002e54 <_vfiprintf_r+0x60>
 8002e50:	68b5      	ldr	r5, [r6, #8]
 8002e52:	e7df      	b.n	8002e14 <_vfiprintf_r+0x20>
 8002e54:	4b79      	ldr	r3, [pc, #484]	; (800303c <_vfiprintf_r+0x248>)
 8002e56:	429d      	cmp	r5, r3
 8002e58:	bf08      	it	eq
 8002e5a:	68f5      	ldreq	r5, [r6, #12]
 8002e5c:	e7da      	b.n	8002e14 <_vfiprintf_r+0x20>
 8002e5e:	89ab      	ldrh	r3, [r5, #12]
 8002e60:	0598      	lsls	r0, r3, #22
 8002e62:	d4ed      	bmi.n	8002e40 <_vfiprintf_r+0x4c>
 8002e64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002e66:	f7ff fe5a 	bl	8002b1e <__retarget_lock_release_recursive>
 8002e6a:	e7e9      	b.n	8002e40 <_vfiprintf_r+0x4c>
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	9309      	str	r3, [sp, #36]	; 0x24
 8002e70:	2320      	movs	r3, #32
 8002e72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002e76:	2330      	movs	r3, #48	; 0x30
 8002e78:	f04f 0901 	mov.w	r9, #1
 8002e7c:	f8cd 800c 	str.w	r8, [sp, #12]
 8002e80:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8003040 <_vfiprintf_r+0x24c>
 8002e84:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002e88:	4623      	mov	r3, r4
 8002e8a:	469a      	mov	sl, r3
 8002e8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002e90:	b10a      	cbz	r2, 8002e96 <_vfiprintf_r+0xa2>
 8002e92:	2a25      	cmp	r2, #37	; 0x25
 8002e94:	d1f9      	bne.n	8002e8a <_vfiprintf_r+0x96>
 8002e96:	ebba 0b04 	subs.w	fp, sl, r4
 8002e9a:	d00b      	beq.n	8002eb4 <_vfiprintf_r+0xc0>
 8002e9c:	465b      	mov	r3, fp
 8002e9e:	4622      	mov	r2, r4
 8002ea0:	4629      	mov	r1, r5
 8002ea2:	4630      	mov	r0, r6
 8002ea4:	f7ff ff93 	bl	8002dce <__sfputs_r>
 8002ea8:	3001      	adds	r0, #1
 8002eaa:	f000 80aa 	beq.w	8003002 <_vfiprintf_r+0x20e>
 8002eae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002eb0:	445a      	add	r2, fp
 8002eb2:	9209      	str	r2, [sp, #36]	; 0x24
 8002eb4:	f89a 3000 	ldrb.w	r3, [sl]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	f000 80a2 	beq.w	8003002 <_vfiprintf_r+0x20e>
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	f04f 32ff 	mov.w	r2, #4294967295
 8002ec4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002ec8:	f10a 0a01 	add.w	sl, sl, #1
 8002ecc:	9304      	str	r3, [sp, #16]
 8002ece:	9307      	str	r3, [sp, #28]
 8002ed0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002ed4:	931a      	str	r3, [sp, #104]	; 0x68
 8002ed6:	4654      	mov	r4, sl
 8002ed8:	2205      	movs	r2, #5
 8002eda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002ede:	4858      	ldr	r0, [pc, #352]	; (8003040 <_vfiprintf_r+0x24c>)
 8002ee0:	f000 faf8 	bl	80034d4 <memchr>
 8002ee4:	9a04      	ldr	r2, [sp, #16]
 8002ee6:	b9d8      	cbnz	r0, 8002f20 <_vfiprintf_r+0x12c>
 8002ee8:	06d1      	lsls	r1, r2, #27
 8002eea:	bf44      	itt	mi
 8002eec:	2320      	movmi	r3, #32
 8002eee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002ef2:	0713      	lsls	r3, r2, #28
 8002ef4:	bf44      	itt	mi
 8002ef6:	232b      	movmi	r3, #43	; 0x2b
 8002ef8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002efc:	f89a 3000 	ldrb.w	r3, [sl]
 8002f00:	2b2a      	cmp	r3, #42	; 0x2a
 8002f02:	d015      	beq.n	8002f30 <_vfiprintf_r+0x13c>
 8002f04:	4654      	mov	r4, sl
 8002f06:	2000      	movs	r0, #0
 8002f08:	f04f 0c0a 	mov.w	ip, #10
 8002f0c:	9a07      	ldr	r2, [sp, #28]
 8002f0e:	4621      	mov	r1, r4
 8002f10:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002f14:	3b30      	subs	r3, #48	; 0x30
 8002f16:	2b09      	cmp	r3, #9
 8002f18:	d94e      	bls.n	8002fb8 <_vfiprintf_r+0x1c4>
 8002f1a:	b1b0      	cbz	r0, 8002f4a <_vfiprintf_r+0x156>
 8002f1c:	9207      	str	r2, [sp, #28]
 8002f1e:	e014      	b.n	8002f4a <_vfiprintf_r+0x156>
 8002f20:	eba0 0308 	sub.w	r3, r0, r8
 8002f24:	fa09 f303 	lsl.w	r3, r9, r3
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	46a2      	mov	sl, r4
 8002f2c:	9304      	str	r3, [sp, #16]
 8002f2e:	e7d2      	b.n	8002ed6 <_vfiprintf_r+0xe2>
 8002f30:	9b03      	ldr	r3, [sp, #12]
 8002f32:	1d19      	adds	r1, r3, #4
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	9103      	str	r1, [sp, #12]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	bfbb      	ittet	lt
 8002f3c:	425b      	neglt	r3, r3
 8002f3e:	f042 0202 	orrlt.w	r2, r2, #2
 8002f42:	9307      	strge	r3, [sp, #28]
 8002f44:	9307      	strlt	r3, [sp, #28]
 8002f46:	bfb8      	it	lt
 8002f48:	9204      	strlt	r2, [sp, #16]
 8002f4a:	7823      	ldrb	r3, [r4, #0]
 8002f4c:	2b2e      	cmp	r3, #46	; 0x2e
 8002f4e:	d10c      	bne.n	8002f6a <_vfiprintf_r+0x176>
 8002f50:	7863      	ldrb	r3, [r4, #1]
 8002f52:	2b2a      	cmp	r3, #42	; 0x2a
 8002f54:	d135      	bne.n	8002fc2 <_vfiprintf_r+0x1ce>
 8002f56:	9b03      	ldr	r3, [sp, #12]
 8002f58:	3402      	adds	r4, #2
 8002f5a:	1d1a      	adds	r2, r3, #4
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	9203      	str	r2, [sp, #12]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	bfb8      	it	lt
 8002f64:	f04f 33ff 	movlt.w	r3, #4294967295
 8002f68:	9305      	str	r3, [sp, #20]
 8002f6a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8003044 <_vfiprintf_r+0x250>
 8002f6e:	2203      	movs	r2, #3
 8002f70:	4650      	mov	r0, sl
 8002f72:	7821      	ldrb	r1, [r4, #0]
 8002f74:	f000 faae 	bl	80034d4 <memchr>
 8002f78:	b140      	cbz	r0, 8002f8c <_vfiprintf_r+0x198>
 8002f7a:	2340      	movs	r3, #64	; 0x40
 8002f7c:	eba0 000a 	sub.w	r0, r0, sl
 8002f80:	fa03 f000 	lsl.w	r0, r3, r0
 8002f84:	9b04      	ldr	r3, [sp, #16]
 8002f86:	3401      	adds	r4, #1
 8002f88:	4303      	orrs	r3, r0
 8002f8a:	9304      	str	r3, [sp, #16]
 8002f8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f90:	2206      	movs	r2, #6
 8002f92:	482d      	ldr	r0, [pc, #180]	; (8003048 <_vfiprintf_r+0x254>)
 8002f94:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002f98:	f000 fa9c 	bl	80034d4 <memchr>
 8002f9c:	2800      	cmp	r0, #0
 8002f9e:	d03f      	beq.n	8003020 <_vfiprintf_r+0x22c>
 8002fa0:	4b2a      	ldr	r3, [pc, #168]	; (800304c <_vfiprintf_r+0x258>)
 8002fa2:	bb1b      	cbnz	r3, 8002fec <_vfiprintf_r+0x1f8>
 8002fa4:	9b03      	ldr	r3, [sp, #12]
 8002fa6:	3307      	adds	r3, #7
 8002fa8:	f023 0307 	bic.w	r3, r3, #7
 8002fac:	3308      	adds	r3, #8
 8002fae:	9303      	str	r3, [sp, #12]
 8002fb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002fb2:	443b      	add	r3, r7
 8002fb4:	9309      	str	r3, [sp, #36]	; 0x24
 8002fb6:	e767      	b.n	8002e88 <_vfiprintf_r+0x94>
 8002fb8:	460c      	mov	r4, r1
 8002fba:	2001      	movs	r0, #1
 8002fbc:	fb0c 3202 	mla	r2, ip, r2, r3
 8002fc0:	e7a5      	b.n	8002f0e <_vfiprintf_r+0x11a>
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	f04f 0c0a 	mov.w	ip, #10
 8002fc8:	4619      	mov	r1, r3
 8002fca:	3401      	adds	r4, #1
 8002fcc:	9305      	str	r3, [sp, #20]
 8002fce:	4620      	mov	r0, r4
 8002fd0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002fd4:	3a30      	subs	r2, #48	; 0x30
 8002fd6:	2a09      	cmp	r2, #9
 8002fd8:	d903      	bls.n	8002fe2 <_vfiprintf_r+0x1ee>
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d0c5      	beq.n	8002f6a <_vfiprintf_r+0x176>
 8002fde:	9105      	str	r1, [sp, #20]
 8002fe0:	e7c3      	b.n	8002f6a <_vfiprintf_r+0x176>
 8002fe2:	4604      	mov	r4, r0
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	fb0c 2101 	mla	r1, ip, r1, r2
 8002fea:	e7f0      	b.n	8002fce <_vfiprintf_r+0x1da>
 8002fec:	ab03      	add	r3, sp, #12
 8002fee:	9300      	str	r3, [sp, #0]
 8002ff0:	462a      	mov	r2, r5
 8002ff2:	4630      	mov	r0, r6
 8002ff4:	4b16      	ldr	r3, [pc, #88]	; (8003050 <_vfiprintf_r+0x25c>)
 8002ff6:	a904      	add	r1, sp, #16
 8002ff8:	f3af 8000 	nop.w
 8002ffc:	4607      	mov	r7, r0
 8002ffe:	1c78      	adds	r0, r7, #1
 8003000:	d1d6      	bne.n	8002fb0 <_vfiprintf_r+0x1bc>
 8003002:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003004:	07d9      	lsls	r1, r3, #31
 8003006:	d405      	bmi.n	8003014 <_vfiprintf_r+0x220>
 8003008:	89ab      	ldrh	r3, [r5, #12]
 800300a:	059a      	lsls	r2, r3, #22
 800300c:	d402      	bmi.n	8003014 <_vfiprintf_r+0x220>
 800300e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003010:	f7ff fd85 	bl	8002b1e <__retarget_lock_release_recursive>
 8003014:	89ab      	ldrh	r3, [r5, #12]
 8003016:	065b      	lsls	r3, r3, #25
 8003018:	f53f af12 	bmi.w	8002e40 <_vfiprintf_r+0x4c>
 800301c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800301e:	e711      	b.n	8002e44 <_vfiprintf_r+0x50>
 8003020:	ab03      	add	r3, sp, #12
 8003022:	9300      	str	r3, [sp, #0]
 8003024:	462a      	mov	r2, r5
 8003026:	4630      	mov	r0, r6
 8003028:	4b09      	ldr	r3, [pc, #36]	; (8003050 <_vfiprintf_r+0x25c>)
 800302a:	a904      	add	r1, sp, #16
 800302c:	f000 f882 	bl	8003134 <_printf_i>
 8003030:	e7e4      	b.n	8002ffc <_vfiprintf_r+0x208>
 8003032:	bf00      	nop
 8003034:	08003638 	.word	0x08003638
 8003038:	08003658 	.word	0x08003658
 800303c:	08003618 	.word	0x08003618
 8003040:	08003678 	.word	0x08003678
 8003044:	0800367e 	.word	0x0800367e
 8003048:	08003682 	.word	0x08003682
 800304c:	00000000 	.word	0x00000000
 8003050:	08002dcf 	.word	0x08002dcf

08003054 <_printf_common>:
 8003054:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003058:	4616      	mov	r6, r2
 800305a:	4699      	mov	r9, r3
 800305c:	688a      	ldr	r2, [r1, #8]
 800305e:	690b      	ldr	r3, [r1, #16]
 8003060:	4607      	mov	r7, r0
 8003062:	4293      	cmp	r3, r2
 8003064:	bfb8      	it	lt
 8003066:	4613      	movlt	r3, r2
 8003068:	6033      	str	r3, [r6, #0]
 800306a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800306e:	460c      	mov	r4, r1
 8003070:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003074:	b10a      	cbz	r2, 800307a <_printf_common+0x26>
 8003076:	3301      	adds	r3, #1
 8003078:	6033      	str	r3, [r6, #0]
 800307a:	6823      	ldr	r3, [r4, #0]
 800307c:	0699      	lsls	r1, r3, #26
 800307e:	bf42      	ittt	mi
 8003080:	6833      	ldrmi	r3, [r6, #0]
 8003082:	3302      	addmi	r3, #2
 8003084:	6033      	strmi	r3, [r6, #0]
 8003086:	6825      	ldr	r5, [r4, #0]
 8003088:	f015 0506 	ands.w	r5, r5, #6
 800308c:	d106      	bne.n	800309c <_printf_common+0x48>
 800308e:	f104 0a19 	add.w	sl, r4, #25
 8003092:	68e3      	ldr	r3, [r4, #12]
 8003094:	6832      	ldr	r2, [r6, #0]
 8003096:	1a9b      	subs	r3, r3, r2
 8003098:	42ab      	cmp	r3, r5
 800309a:	dc28      	bgt.n	80030ee <_printf_common+0x9a>
 800309c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80030a0:	1e13      	subs	r3, r2, #0
 80030a2:	6822      	ldr	r2, [r4, #0]
 80030a4:	bf18      	it	ne
 80030a6:	2301      	movne	r3, #1
 80030a8:	0692      	lsls	r2, r2, #26
 80030aa:	d42d      	bmi.n	8003108 <_printf_common+0xb4>
 80030ac:	4649      	mov	r1, r9
 80030ae:	4638      	mov	r0, r7
 80030b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80030b4:	47c0      	blx	r8
 80030b6:	3001      	adds	r0, #1
 80030b8:	d020      	beq.n	80030fc <_printf_common+0xa8>
 80030ba:	6823      	ldr	r3, [r4, #0]
 80030bc:	68e5      	ldr	r5, [r4, #12]
 80030be:	f003 0306 	and.w	r3, r3, #6
 80030c2:	2b04      	cmp	r3, #4
 80030c4:	bf18      	it	ne
 80030c6:	2500      	movne	r5, #0
 80030c8:	6832      	ldr	r2, [r6, #0]
 80030ca:	f04f 0600 	mov.w	r6, #0
 80030ce:	68a3      	ldr	r3, [r4, #8]
 80030d0:	bf08      	it	eq
 80030d2:	1aad      	subeq	r5, r5, r2
 80030d4:	6922      	ldr	r2, [r4, #16]
 80030d6:	bf08      	it	eq
 80030d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80030dc:	4293      	cmp	r3, r2
 80030de:	bfc4      	itt	gt
 80030e0:	1a9b      	subgt	r3, r3, r2
 80030e2:	18ed      	addgt	r5, r5, r3
 80030e4:	341a      	adds	r4, #26
 80030e6:	42b5      	cmp	r5, r6
 80030e8:	d11a      	bne.n	8003120 <_printf_common+0xcc>
 80030ea:	2000      	movs	r0, #0
 80030ec:	e008      	b.n	8003100 <_printf_common+0xac>
 80030ee:	2301      	movs	r3, #1
 80030f0:	4652      	mov	r2, sl
 80030f2:	4649      	mov	r1, r9
 80030f4:	4638      	mov	r0, r7
 80030f6:	47c0      	blx	r8
 80030f8:	3001      	adds	r0, #1
 80030fa:	d103      	bne.n	8003104 <_printf_common+0xb0>
 80030fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003100:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003104:	3501      	adds	r5, #1
 8003106:	e7c4      	b.n	8003092 <_printf_common+0x3e>
 8003108:	2030      	movs	r0, #48	; 0x30
 800310a:	18e1      	adds	r1, r4, r3
 800310c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003110:	1c5a      	adds	r2, r3, #1
 8003112:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003116:	4422      	add	r2, r4
 8003118:	3302      	adds	r3, #2
 800311a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800311e:	e7c5      	b.n	80030ac <_printf_common+0x58>
 8003120:	2301      	movs	r3, #1
 8003122:	4622      	mov	r2, r4
 8003124:	4649      	mov	r1, r9
 8003126:	4638      	mov	r0, r7
 8003128:	47c0      	blx	r8
 800312a:	3001      	adds	r0, #1
 800312c:	d0e6      	beq.n	80030fc <_printf_common+0xa8>
 800312e:	3601      	adds	r6, #1
 8003130:	e7d9      	b.n	80030e6 <_printf_common+0x92>
	...

08003134 <_printf_i>:
 8003134:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003138:	7e0f      	ldrb	r7, [r1, #24]
 800313a:	4691      	mov	r9, r2
 800313c:	2f78      	cmp	r7, #120	; 0x78
 800313e:	4680      	mov	r8, r0
 8003140:	460c      	mov	r4, r1
 8003142:	469a      	mov	sl, r3
 8003144:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003146:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800314a:	d807      	bhi.n	800315c <_printf_i+0x28>
 800314c:	2f62      	cmp	r7, #98	; 0x62
 800314e:	d80a      	bhi.n	8003166 <_printf_i+0x32>
 8003150:	2f00      	cmp	r7, #0
 8003152:	f000 80d9 	beq.w	8003308 <_printf_i+0x1d4>
 8003156:	2f58      	cmp	r7, #88	; 0x58
 8003158:	f000 80a4 	beq.w	80032a4 <_printf_i+0x170>
 800315c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003160:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003164:	e03a      	b.n	80031dc <_printf_i+0xa8>
 8003166:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800316a:	2b15      	cmp	r3, #21
 800316c:	d8f6      	bhi.n	800315c <_printf_i+0x28>
 800316e:	a101      	add	r1, pc, #4	; (adr r1, 8003174 <_printf_i+0x40>)
 8003170:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003174:	080031cd 	.word	0x080031cd
 8003178:	080031e1 	.word	0x080031e1
 800317c:	0800315d 	.word	0x0800315d
 8003180:	0800315d 	.word	0x0800315d
 8003184:	0800315d 	.word	0x0800315d
 8003188:	0800315d 	.word	0x0800315d
 800318c:	080031e1 	.word	0x080031e1
 8003190:	0800315d 	.word	0x0800315d
 8003194:	0800315d 	.word	0x0800315d
 8003198:	0800315d 	.word	0x0800315d
 800319c:	0800315d 	.word	0x0800315d
 80031a0:	080032ef 	.word	0x080032ef
 80031a4:	08003211 	.word	0x08003211
 80031a8:	080032d1 	.word	0x080032d1
 80031ac:	0800315d 	.word	0x0800315d
 80031b0:	0800315d 	.word	0x0800315d
 80031b4:	08003311 	.word	0x08003311
 80031b8:	0800315d 	.word	0x0800315d
 80031bc:	08003211 	.word	0x08003211
 80031c0:	0800315d 	.word	0x0800315d
 80031c4:	0800315d 	.word	0x0800315d
 80031c8:	080032d9 	.word	0x080032d9
 80031cc:	682b      	ldr	r3, [r5, #0]
 80031ce:	1d1a      	adds	r2, r3, #4
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	602a      	str	r2, [r5, #0]
 80031d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80031d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80031dc:	2301      	movs	r3, #1
 80031de:	e0a4      	b.n	800332a <_printf_i+0x1f6>
 80031e0:	6820      	ldr	r0, [r4, #0]
 80031e2:	6829      	ldr	r1, [r5, #0]
 80031e4:	0606      	lsls	r6, r0, #24
 80031e6:	f101 0304 	add.w	r3, r1, #4
 80031ea:	d50a      	bpl.n	8003202 <_printf_i+0xce>
 80031ec:	680e      	ldr	r6, [r1, #0]
 80031ee:	602b      	str	r3, [r5, #0]
 80031f0:	2e00      	cmp	r6, #0
 80031f2:	da03      	bge.n	80031fc <_printf_i+0xc8>
 80031f4:	232d      	movs	r3, #45	; 0x2d
 80031f6:	4276      	negs	r6, r6
 80031f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80031fc:	230a      	movs	r3, #10
 80031fe:	485e      	ldr	r0, [pc, #376]	; (8003378 <_printf_i+0x244>)
 8003200:	e019      	b.n	8003236 <_printf_i+0x102>
 8003202:	680e      	ldr	r6, [r1, #0]
 8003204:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003208:	602b      	str	r3, [r5, #0]
 800320a:	bf18      	it	ne
 800320c:	b236      	sxthne	r6, r6
 800320e:	e7ef      	b.n	80031f0 <_printf_i+0xbc>
 8003210:	682b      	ldr	r3, [r5, #0]
 8003212:	6820      	ldr	r0, [r4, #0]
 8003214:	1d19      	adds	r1, r3, #4
 8003216:	6029      	str	r1, [r5, #0]
 8003218:	0601      	lsls	r1, r0, #24
 800321a:	d501      	bpl.n	8003220 <_printf_i+0xec>
 800321c:	681e      	ldr	r6, [r3, #0]
 800321e:	e002      	b.n	8003226 <_printf_i+0xf2>
 8003220:	0646      	lsls	r6, r0, #25
 8003222:	d5fb      	bpl.n	800321c <_printf_i+0xe8>
 8003224:	881e      	ldrh	r6, [r3, #0]
 8003226:	2f6f      	cmp	r7, #111	; 0x6f
 8003228:	bf0c      	ite	eq
 800322a:	2308      	moveq	r3, #8
 800322c:	230a      	movne	r3, #10
 800322e:	4852      	ldr	r0, [pc, #328]	; (8003378 <_printf_i+0x244>)
 8003230:	2100      	movs	r1, #0
 8003232:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003236:	6865      	ldr	r5, [r4, #4]
 8003238:	2d00      	cmp	r5, #0
 800323a:	bfa8      	it	ge
 800323c:	6821      	ldrge	r1, [r4, #0]
 800323e:	60a5      	str	r5, [r4, #8]
 8003240:	bfa4      	itt	ge
 8003242:	f021 0104 	bicge.w	r1, r1, #4
 8003246:	6021      	strge	r1, [r4, #0]
 8003248:	b90e      	cbnz	r6, 800324e <_printf_i+0x11a>
 800324a:	2d00      	cmp	r5, #0
 800324c:	d04d      	beq.n	80032ea <_printf_i+0x1b6>
 800324e:	4615      	mov	r5, r2
 8003250:	fbb6 f1f3 	udiv	r1, r6, r3
 8003254:	fb03 6711 	mls	r7, r3, r1, r6
 8003258:	5dc7      	ldrb	r7, [r0, r7]
 800325a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800325e:	4637      	mov	r7, r6
 8003260:	42bb      	cmp	r3, r7
 8003262:	460e      	mov	r6, r1
 8003264:	d9f4      	bls.n	8003250 <_printf_i+0x11c>
 8003266:	2b08      	cmp	r3, #8
 8003268:	d10b      	bne.n	8003282 <_printf_i+0x14e>
 800326a:	6823      	ldr	r3, [r4, #0]
 800326c:	07de      	lsls	r6, r3, #31
 800326e:	d508      	bpl.n	8003282 <_printf_i+0x14e>
 8003270:	6923      	ldr	r3, [r4, #16]
 8003272:	6861      	ldr	r1, [r4, #4]
 8003274:	4299      	cmp	r1, r3
 8003276:	bfde      	ittt	le
 8003278:	2330      	movle	r3, #48	; 0x30
 800327a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800327e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003282:	1b52      	subs	r2, r2, r5
 8003284:	6122      	str	r2, [r4, #16]
 8003286:	464b      	mov	r3, r9
 8003288:	4621      	mov	r1, r4
 800328a:	4640      	mov	r0, r8
 800328c:	f8cd a000 	str.w	sl, [sp]
 8003290:	aa03      	add	r2, sp, #12
 8003292:	f7ff fedf 	bl	8003054 <_printf_common>
 8003296:	3001      	adds	r0, #1
 8003298:	d14c      	bne.n	8003334 <_printf_i+0x200>
 800329a:	f04f 30ff 	mov.w	r0, #4294967295
 800329e:	b004      	add	sp, #16
 80032a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032a4:	4834      	ldr	r0, [pc, #208]	; (8003378 <_printf_i+0x244>)
 80032a6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80032aa:	6829      	ldr	r1, [r5, #0]
 80032ac:	6823      	ldr	r3, [r4, #0]
 80032ae:	f851 6b04 	ldr.w	r6, [r1], #4
 80032b2:	6029      	str	r1, [r5, #0]
 80032b4:	061d      	lsls	r5, r3, #24
 80032b6:	d514      	bpl.n	80032e2 <_printf_i+0x1ae>
 80032b8:	07df      	lsls	r7, r3, #31
 80032ba:	bf44      	itt	mi
 80032bc:	f043 0320 	orrmi.w	r3, r3, #32
 80032c0:	6023      	strmi	r3, [r4, #0]
 80032c2:	b91e      	cbnz	r6, 80032cc <_printf_i+0x198>
 80032c4:	6823      	ldr	r3, [r4, #0]
 80032c6:	f023 0320 	bic.w	r3, r3, #32
 80032ca:	6023      	str	r3, [r4, #0]
 80032cc:	2310      	movs	r3, #16
 80032ce:	e7af      	b.n	8003230 <_printf_i+0xfc>
 80032d0:	6823      	ldr	r3, [r4, #0]
 80032d2:	f043 0320 	orr.w	r3, r3, #32
 80032d6:	6023      	str	r3, [r4, #0]
 80032d8:	2378      	movs	r3, #120	; 0x78
 80032da:	4828      	ldr	r0, [pc, #160]	; (800337c <_printf_i+0x248>)
 80032dc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80032e0:	e7e3      	b.n	80032aa <_printf_i+0x176>
 80032e2:	0659      	lsls	r1, r3, #25
 80032e4:	bf48      	it	mi
 80032e6:	b2b6      	uxthmi	r6, r6
 80032e8:	e7e6      	b.n	80032b8 <_printf_i+0x184>
 80032ea:	4615      	mov	r5, r2
 80032ec:	e7bb      	b.n	8003266 <_printf_i+0x132>
 80032ee:	682b      	ldr	r3, [r5, #0]
 80032f0:	6826      	ldr	r6, [r4, #0]
 80032f2:	1d18      	adds	r0, r3, #4
 80032f4:	6961      	ldr	r1, [r4, #20]
 80032f6:	6028      	str	r0, [r5, #0]
 80032f8:	0635      	lsls	r5, r6, #24
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	d501      	bpl.n	8003302 <_printf_i+0x1ce>
 80032fe:	6019      	str	r1, [r3, #0]
 8003300:	e002      	b.n	8003308 <_printf_i+0x1d4>
 8003302:	0670      	lsls	r0, r6, #25
 8003304:	d5fb      	bpl.n	80032fe <_printf_i+0x1ca>
 8003306:	8019      	strh	r1, [r3, #0]
 8003308:	2300      	movs	r3, #0
 800330a:	4615      	mov	r5, r2
 800330c:	6123      	str	r3, [r4, #16]
 800330e:	e7ba      	b.n	8003286 <_printf_i+0x152>
 8003310:	682b      	ldr	r3, [r5, #0]
 8003312:	2100      	movs	r1, #0
 8003314:	1d1a      	adds	r2, r3, #4
 8003316:	602a      	str	r2, [r5, #0]
 8003318:	681d      	ldr	r5, [r3, #0]
 800331a:	6862      	ldr	r2, [r4, #4]
 800331c:	4628      	mov	r0, r5
 800331e:	f000 f8d9 	bl	80034d4 <memchr>
 8003322:	b108      	cbz	r0, 8003328 <_printf_i+0x1f4>
 8003324:	1b40      	subs	r0, r0, r5
 8003326:	6060      	str	r0, [r4, #4]
 8003328:	6863      	ldr	r3, [r4, #4]
 800332a:	6123      	str	r3, [r4, #16]
 800332c:	2300      	movs	r3, #0
 800332e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003332:	e7a8      	b.n	8003286 <_printf_i+0x152>
 8003334:	462a      	mov	r2, r5
 8003336:	4649      	mov	r1, r9
 8003338:	4640      	mov	r0, r8
 800333a:	6923      	ldr	r3, [r4, #16]
 800333c:	47d0      	blx	sl
 800333e:	3001      	adds	r0, #1
 8003340:	d0ab      	beq.n	800329a <_printf_i+0x166>
 8003342:	6823      	ldr	r3, [r4, #0]
 8003344:	079b      	lsls	r3, r3, #30
 8003346:	d413      	bmi.n	8003370 <_printf_i+0x23c>
 8003348:	68e0      	ldr	r0, [r4, #12]
 800334a:	9b03      	ldr	r3, [sp, #12]
 800334c:	4298      	cmp	r0, r3
 800334e:	bfb8      	it	lt
 8003350:	4618      	movlt	r0, r3
 8003352:	e7a4      	b.n	800329e <_printf_i+0x16a>
 8003354:	2301      	movs	r3, #1
 8003356:	4632      	mov	r2, r6
 8003358:	4649      	mov	r1, r9
 800335a:	4640      	mov	r0, r8
 800335c:	47d0      	blx	sl
 800335e:	3001      	adds	r0, #1
 8003360:	d09b      	beq.n	800329a <_printf_i+0x166>
 8003362:	3501      	adds	r5, #1
 8003364:	68e3      	ldr	r3, [r4, #12]
 8003366:	9903      	ldr	r1, [sp, #12]
 8003368:	1a5b      	subs	r3, r3, r1
 800336a:	42ab      	cmp	r3, r5
 800336c:	dcf2      	bgt.n	8003354 <_printf_i+0x220>
 800336e:	e7eb      	b.n	8003348 <_printf_i+0x214>
 8003370:	2500      	movs	r5, #0
 8003372:	f104 0619 	add.w	r6, r4, #25
 8003376:	e7f5      	b.n	8003364 <_printf_i+0x230>
 8003378:	08003689 	.word	0x08003689
 800337c:	0800369a 	.word	0x0800369a

08003380 <_sbrk_r>:
 8003380:	b538      	push	{r3, r4, r5, lr}
 8003382:	2300      	movs	r3, #0
 8003384:	4d05      	ldr	r5, [pc, #20]	; (800339c <_sbrk_r+0x1c>)
 8003386:	4604      	mov	r4, r0
 8003388:	4608      	mov	r0, r1
 800338a:	602b      	str	r3, [r5, #0]
 800338c:	f7fd fa12 	bl	80007b4 <_sbrk>
 8003390:	1c43      	adds	r3, r0, #1
 8003392:	d102      	bne.n	800339a <_sbrk_r+0x1a>
 8003394:	682b      	ldr	r3, [r5, #0]
 8003396:	b103      	cbz	r3, 800339a <_sbrk_r+0x1a>
 8003398:	6023      	str	r3, [r4, #0]
 800339a:	bd38      	pop	{r3, r4, r5, pc}
 800339c:	20000158 	.word	0x20000158

080033a0 <__sread>:
 80033a0:	b510      	push	{r4, lr}
 80033a2:	460c      	mov	r4, r1
 80033a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80033a8:	f000 f8ae 	bl	8003508 <_read_r>
 80033ac:	2800      	cmp	r0, #0
 80033ae:	bfab      	itete	ge
 80033b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80033b2:	89a3      	ldrhlt	r3, [r4, #12]
 80033b4:	181b      	addge	r3, r3, r0
 80033b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80033ba:	bfac      	ite	ge
 80033bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80033be:	81a3      	strhlt	r3, [r4, #12]
 80033c0:	bd10      	pop	{r4, pc}

080033c2 <__swrite>:
 80033c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80033c6:	461f      	mov	r7, r3
 80033c8:	898b      	ldrh	r3, [r1, #12]
 80033ca:	4605      	mov	r5, r0
 80033cc:	05db      	lsls	r3, r3, #23
 80033ce:	460c      	mov	r4, r1
 80033d0:	4616      	mov	r6, r2
 80033d2:	d505      	bpl.n	80033e0 <__swrite+0x1e>
 80033d4:	2302      	movs	r3, #2
 80033d6:	2200      	movs	r2, #0
 80033d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80033dc:	f000 f868 	bl	80034b0 <_lseek_r>
 80033e0:	89a3      	ldrh	r3, [r4, #12]
 80033e2:	4632      	mov	r2, r6
 80033e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80033e8:	81a3      	strh	r3, [r4, #12]
 80033ea:	4628      	mov	r0, r5
 80033ec:	463b      	mov	r3, r7
 80033ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80033f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80033f6:	f000 b817 	b.w	8003428 <_write_r>

080033fa <__sseek>:
 80033fa:	b510      	push	{r4, lr}
 80033fc:	460c      	mov	r4, r1
 80033fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003402:	f000 f855 	bl	80034b0 <_lseek_r>
 8003406:	1c43      	adds	r3, r0, #1
 8003408:	89a3      	ldrh	r3, [r4, #12]
 800340a:	bf15      	itete	ne
 800340c:	6560      	strne	r0, [r4, #84]	; 0x54
 800340e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003412:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003416:	81a3      	strheq	r3, [r4, #12]
 8003418:	bf18      	it	ne
 800341a:	81a3      	strhne	r3, [r4, #12]
 800341c:	bd10      	pop	{r4, pc}

0800341e <__sclose>:
 800341e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003422:	f000 b813 	b.w	800344c <_close_r>
	...

08003428 <_write_r>:
 8003428:	b538      	push	{r3, r4, r5, lr}
 800342a:	4604      	mov	r4, r0
 800342c:	4608      	mov	r0, r1
 800342e:	4611      	mov	r1, r2
 8003430:	2200      	movs	r2, #0
 8003432:	4d05      	ldr	r5, [pc, #20]	; (8003448 <_write_r+0x20>)
 8003434:	602a      	str	r2, [r5, #0]
 8003436:	461a      	mov	r2, r3
 8003438:	f7fc fe88 	bl	800014c <_write>
 800343c:	1c43      	adds	r3, r0, #1
 800343e:	d102      	bne.n	8003446 <_write_r+0x1e>
 8003440:	682b      	ldr	r3, [r5, #0]
 8003442:	b103      	cbz	r3, 8003446 <_write_r+0x1e>
 8003444:	6023      	str	r3, [r4, #0]
 8003446:	bd38      	pop	{r3, r4, r5, pc}
 8003448:	20000158 	.word	0x20000158

0800344c <_close_r>:
 800344c:	b538      	push	{r3, r4, r5, lr}
 800344e:	2300      	movs	r3, #0
 8003450:	4d05      	ldr	r5, [pc, #20]	; (8003468 <_close_r+0x1c>)
 8003452:	4604      	mov	r4, r0
 8003454:	4608      	mov	r0, r1
 8003456:	602b      	str	r3, [r5, #0]
 8003458:	f7fd f97b 	bl	8000752 <_close>
 800345c:	1c43      	adds	r3, r0, #1
 800345e:	d102      	bne.n	8003466 <_close_r+0x1a>
 8003460:	682b      	ldr	r3, [r5, #0]
 8003462:	b103      	cbz	r3, 8003466 <_close_r+0x1a>
 8003464:	6023      	str	r3, [r4, #0]
 8003466:	bd38      	pop	{r3, r4, r5, pc}
 8003468:	20000158 	.word	0x20000158

0800346c <_fstat_r>:
 800346c:	b538      	push	{r3, r4, r5, lr}
 800346e:	2300      	movs	r3, #0
 8003470:	4d06      	ldr	r5, [pc, #24]	; (800348c <_fstat_r+0x20>)
 8003472:	4604      	mov	r4, r0
 8003474:	4608      	mov	r0, r1
 8003476:	4611      	mov	r1, r2
 8003478:	602b      	str	r3, [r5, #0]
 800347a:	f7fd f975 	bl	8000768 <_fstat>
 800347e:	1c43      	adds	r3, r0, #1
 8003480:	d102      	bne.n	8003488 <_fstat_r+0x1c>
 8003482:	682b      	ldr	r3, [r5, #0]
 8003484:	b103      	cbz	r3, 8003488 <_fstat_r+0x1c>
 8003486:	6023      	str	r3, [r4, #0]
 8003488:	bd38      	pop	{r3, r4, r5, pc}
 800348a:	bf00      	nop
 800348c:	20000158 	.word	0x20000158

08003490 <_isatty_r>:
 8003490:	b538      	push	{r3, r4, r5, lr}
 8003492:	2300      	movs	r3, #0
 8003494:	4d05      	ldr	r5, [pc, #20]	; (80034ac <_isatty_r+0x1c>)
 8003496:	4604      	mov	r4, r0
 8003498:	4608      	mov	r0, r1
 800349a:	602b      	str	r3, [r5, #0]
 800349c:	f7fd f973 	bl	8000786 <_isatty>
 80034a0:	1c43      	adds	r3, r0, #1
 80034a2:	d102      	bne.n	80034aa <_isatty_r+0x1a>
 80034a4:	682b      	ldr	r3, [r5, #0]
 80034a6:	b103      	cbz	r3, 80034aa <_isatty_r+0x1a>
 80034a8:	6023      	str	r3, [r4, #0]
 80034aa:	bd38      	pop	{r3, r4, r5, pc}
 80034ac:	20000158 	.word	0x20000158

080034b0 <_lseek_r>:
 80034b0:	b538      	push	{r3, r4, r5, lr}
 80034b2:	4604      	mov	r4, r0
 80034b4:	4608      	mov	r0, r1
 80034b6:	4611      	mov	r1, r2
 80034b8:	2200      	movs	r2, #0
 80034ba:	4d05      	ldr	r5, [pc, #20]	; (80034d0 <_lseek_r+0x20>)
 80034bc:	602a      	str	r2, [r5, #0]
 80034be:	461a      	mov	r2, r3
 80034c0:	f7fd f96b 	bl	800079a <_lseek>
 80034c4:	1c43      	adds	r3, r0, #1
 80034c6:	d102      	bne.n	80034ce <_lseek_r+0x1e>
 80034c8:	682b      	ldr	r3, [r5, #0]
 80034ca:	b103      	cbz	r3, 80034ce <_lseek_r+0x1e>
 80034cc:	6023      	str	r3, [r4, #0]
 80034ce:	bd38      	pop	{r3, r4, r5, pc}
 80034d0:	20000158 	.word	0x20000158

080034d4 <memchr>:
 80034d4:	4603      	mov	r3, r0
 80034d6:	b510      	push	{r4, lr}
 80034d8:	b2c9      	uxtb	r1, r1
 80034da:	4402      	add	r2, r0
 80034dc:	4293      	cmp	r3, r2
 80034de:	4618      	mov	r0, r3
 80034e0:	d101      	bne.n	80034e6 <memchr+0x12>
 80034e2:	2000      	movs	r0, #0
 80034e4:	e003      	b.n	80034ee <memchr+0x1a>
 80034e6:	7804      	ldrb	r4, [r0, #0]
 80034e8:	3301      	adds	r3, #1
 80034ea:	428c      	cmp	r4, r1
 80034ec:	d1f6      	bne.n	80034dc <memchr+0x8>
 80034ee:	bd10      	pop	{r4, pc}

080034f0 <__malloc_lock>:
 80034f0:	4801      	ldr	r0, [pc, #4]	; (80034f8 <__malloc_lock+0x8>)
 80034f2:	f7ff bb13 	b.w	8002b1c <__retarget_lock_acquire_recursive>
 80034f6:	bf00      	nop
 80034f8:	2000014c 	.word	0x2000014c

080034fc <__malloc_unlock>:
 80034fc:	4801      	ldr	r0, [pc, #4]	; (8003504 <__malloc_unlock+0x8>)
 80034fe:	f7ff bb0e 	b.w	8002b1e <__retarget_lock_release_recursive>
 8003502:	bf00      	nop
 8003504:	2000014c 	.word	0x2000014c

08003508 <_read_r>:
 8003508:	b538      	push	{r3, r4, r5, lr}
 800350a:	4604      	mov	r4, r0
 800350c:	4608      	mov	r0, r1
 800350e:	4611      	mov	r1, r2
 8003510:	2200      	movs	r2, #0
 8003512:	4d05      	ldr	r5, [pc, #20]	; (8003528 <_read_r+0x20>)
 8003514:	602a      	str	r2, [r5, #0]
 8003516:	461a      	mov	r2, r3
 8003518:	f7fd f8fe 	bl	8000718 <_read>
 800351c:	1c43      	adds	r3, r0, #1
 800351e:	d102      	bne.n	8003526 <_read_r+0x1e>
 8003520:	682b      	ldr	r3, [r5, #0]
 8003522:	b103      	cbz	r3, 8003526 <_read_r+0x1e>
 8003524:	6023      	str	r3, [r4, #0]
 8003526:	bd38      	pop	{r3, r4, r5, pc}
 8003528:	20000158 	.word	0x20000158

0800352c <_init>:
 800352c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800352e:	bf00      	nop
 8003530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003532:	bc08      	pop	{r3}
 8003534:	469e      	mov	lr, r3
 8003536:	4770      	bx	lr

08003538 <_fini>:
 8003538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800353a:	bf00      	nop
 800353c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800353e:	bc08      	pop	{r3}
 8003540:	469e      	mov	lr, r3
 8003542:	4770      	bx	lr
